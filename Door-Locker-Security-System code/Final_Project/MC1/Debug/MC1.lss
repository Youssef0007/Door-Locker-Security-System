
MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003952  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00800060  00003952  000039e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800208  00800208  00003b8e  2**0
                  ALLOC
  3 .stab         000024e4  00000000  00000000  00003b90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f19  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00006f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d0  00000000  00000000  0000710d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000258f  00000000  00000000  000072dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011c4  00000000  00000000  0000986c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d8  00000000  00000000  0000aa30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000bb08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000336  00000000  00000000  0000bca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000173a  00000000  00000000  0000bfde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000d718  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 0c 	call	0x192e	; 0x192e <main>
      8a:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
     1bc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x56f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__stack+0x8f>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	83 50       	subi	r24, 0x03	; 3
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__stack+0x73>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__stack+0x73>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__stack+0x73>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0xa2d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__stack+0xb5>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__stack+0xe9>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__stack+0xdf>
     532:	28 f0       	brcs	.+10     	; 0x53e <__stack+0xdf>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__stack+0x10d>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__stack+0x10d>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__stack+0x105>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__stack+0x10d>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__stack+0x11d>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__stack+0x115>
     580:	83 50       	subi	r24, 0x03	; 3
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__stack+0x167>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__stack+0x3a3>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__stack+0x179>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__stack+0x171>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__stack+0x191>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__stack+0x189>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__stack+0x1a9>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__stack+0x1a1>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__stack+0x1c1>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__stack+0x1b9>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__stack+0x2b9>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__stack+0x2b9>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__stack+0x2b9>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__stack+0x35d>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__stack+0x35d>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__stack+0x35d>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__stack+0x375>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__stack+0x36d>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x49f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x49f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x49f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x547>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x547>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x547>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0xa33>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x57b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0xa1d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x5af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x5a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x5a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x5d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x5d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x5cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x5d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x5e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x5db>
     a46:	83 50       	subi	r24, 0x03	; 3
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x637>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x621>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0xa05>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x635>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0xa05>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0xa1d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x649>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x641>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x661>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x659>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x68d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x685>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x6a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x6a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x6c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x6b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x6d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x6cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x7b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x7b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x7b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 09 1c 	call	0x3812	; 0x3812 <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x863>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x863>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x863>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 ea 1b 	call	0x37d4	; 0x37d4 <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x977>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x9eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x9a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0xa2d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x9dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x9d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0xa2d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0xa2d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0xa33>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0xa33>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0xa3b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__epilogue_restores__>

00000ed2 <_fpadd_parts>:
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__prologue_saves__>
     ede:	dc 01       	movw	r26, r24
     ee0:	2b 01       	movw	r4, r22
     ee2:	fa 01       	movw	r30, r20
     ee4:	9c 91       	ld	r25, X
     ee6:	92 30       	cpi	r25, 0x02	; 2
     ee8:	08 f4       	brcc	.+2      	; 0xeec <_fpadd_parts+0x1a>
     eea:	39 c1       	rjmp	.+626    	; 0x115e <_fpadd_parts+0x28c>
     eec:	eb 01       	movw	r28, r22
     eee:	88 81       	ld	r24, Y
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <_fpadd_parts+0x24>
     ef4:	33 c1       	rjmp	.+614    	; 0x115c <_fpadd_parts+0x28a>
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	69 f4       	brne	.+26     	; 0xf14 <_fpadd_parts+0x42>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f0       	breq	.+2      	; 0xf00 <_fpadd_parts+0x2e>
     efe:	2f c1       	rjmp	.+606    	; 0x115e <_fpadd_parts+0x28c>
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	98 17       	cp	r25, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <_fpadd_parts+0x3c>
     f0c:	28 c1       	rjmp	.+592    	; 0x115e <_fpadd_parts+0x28c>
     f0e:	a5 ef       	ldi	r26, 0xF5	; 245
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	25 c1       	rjmp	.+586    	; 0x115e <_fpadd_parts+0x28c>
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	09 f4       	brne	.+2      	; 0xf1a <_fpadd_parts+0x48>
     f18:	21 c1       	rjmp	.+578    	; 0x115c <_fpadd_parts+0x28a>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <_fpadd_parts+0x76>
     f1e:	92 30       	cpi	r25, 0x02	; 2
     f20:	09 f0       	breq	.+2      	; 0xf24 <_fpadd_parts+0x52>
     f22:	1d c1       	rjmp	.+570    	; 0x115e <_fpadd_parts+0x28c>
     f24:	9a 01       	movw	r18, r20
     f26:	ad 01       	movw	r20, r26
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	ea 01       	movw	r28, r20
     f2c:	09 90       	ld	r0, Y+
     f2e:	ae 01       	movw	r20, r28
     f30:	e9 01       	movw	r28, r18
     f32:	09 92       	st	Y+, r0
     f34:	9e 01       	movw	r18, r28
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	c1 f7       	brne	.-16     	; 0xf2a <_fpadd_parts+0x58>
     f3a:	e2 01       	movw	r28, r4
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	9c 91       	ld	r25, X
     f42:	89 23       	and	r24, r25
     f44:	81 83       	std	Z+1, r24	; 0x01
     f46:	08 c1       	rjmp	.+528    	; 0x1158 <_fpadd_parts+0x286>
     f48:	92 30       	cpi	r25, 0x02	; 2
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_fpadd_parts+0x7c>
     f4c:	07 c1       	rjmp	.+526    	; 0x115c <_fpadd_parts+0x28a>
     f4e:	12 96       	adiw	r26, 0x02	; 2
     f50:	2d 90       	ld	r2, X+
     f52:	3c 90       	ld	r3, X
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	eb 01       	movw	r28, r22
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	ad 90       	ld	r10, X+
     f60:	bd 90       	ld	r11, X+
     f62:	cd 90       	ld	r12, X+
     f64:	dc 90       	ld	r13, X
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	ec 80       	ldd	r14, Y+4	; 0x04
     f6a:	fd 80       	ldd	r15, Y+5	; 0x05
     f6c:	0e 81       	ldd	r16, Y+6	; 0x06
     f6e:	1f 81       	ldd	r17, Y+7	; 0x07
     f70:	91 01       	movw	r18, r2
     f72:	28 1b       	sub	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	b9 01       	movw	r22, r18
     f78:	37 ff       	sbrs	r19, 7
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <_fpadd_parts+0xb2>
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	60 32       	cpi	r22, 0x20	; 32
     f86:	71 05       	cpc	r23, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <_fpadd_parts+0xba>
     f8a:	61 c0       	rjmp	.+194    	; 0x104e <_fpadd_parts+0x17c>
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	6c f5       	brge	.+90     	; 0xfec <_fpadd_parts+0x11a>
     f92:	37 01       	movw	r6, r14
     f94:	48 01       	movw	r8, r16
     f96:	06 2e       	mov	r0, r22
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_fpadd_parts+0xd0>
     f9a:	96 94       	lsr	r9
     f9c:	87 94       	ror	r8
     f9e:	77 94       	ror	r7
     fa0:	67 94       	ror	r6
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <_fpadd_parts+0xc8>
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <_fpadd_parts+0xe6>
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	44 1f       	adc	r20, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	6a 95       	dec	r22
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <_fpadd_parts+0xde>
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	40 40       	sbci	r20, 0x00	; 0
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	2e 21       	and	r18, r14
     fc6:	3f 21       	and	r19, r15
     fc8:	40 23       	and	r20, r16
     fca:	51 23       	and	r21, r17
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	41 05       	cpc	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	21 f0       	breq	.+8      	; 0xfde <_fpadd_parts+0x10c>
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	79 01       	movw	r14, r18
     fe0:	8a 01       	movw	r16, r20
     fe2:	e6 28       	or	r14, r6
     fe4:	f7 28       	or	r15, r7
     fe6:	08 29       	or	r16, r8
     fe8:	19 29       	or	r17, r9
     fea:	3c c0       	rjmp	.+120    	; 0x1064 <_fpadd_parts+0x192>
     fec:	23 2b       	or	r18, r19
     fee:	d1 f1       	breq	.+116    	; 0x1064 <_fpadd_parts+0x192>
     ff0:	26 0e       	add	r2, r22
     ff2:	37 1e       	adc	r3, r23
     ff4:	35 01       	movw	r6, r10
     ff6:	46 01       	movw	r8, r12
     ff8:	06 2e       	mov	r0, r22
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <_fpadd_parts+0x132>
     ffc:	96 94       	lsr	r9
     ffe:	87 94       	ror	r8
    1000:	77 94       	ror	r7
    1002:	67 94       	ror	r6
    1004:	0a 94       	dec	r0
    1006:	d2 f7       	brpl	.-12     	; 0xffc <_fpadd_parts+0x12a>
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <_fpadd_parts+0x148>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	44 1f       	adc	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	6a 95       	dec	r22
    101c:	d2 f7       	brpl	.-12     	; 0x1012 <_fpadd_parts+0x140>
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	40 40       	sbci	r20, 0x00	; 0
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	2a 21       	and	r18, r10
    1028:	3b 21       	and	r19, r11
    102a:	4c 21       	and	r20, r12
    102c:	5d 21       	and	r21, r13
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 05       	cpc	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	21 f0       	breq	.+8      	; 0x1040 <_fpadd_parts+0x16e>
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	59 01       	movw	r10, r18
    1042:	6a 01       	movw	r12, r20
    1044:	a6 28       	or	r10, r6
    1046:	b7 28       	or	r11, r7
    1048:	c8 28       	or	r12, r8
    104a:	d9 28       	or	r13, r9
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <_fpadd_parts+0x192>
    104e:	82 15       	cp	r24, r2
    1050:	93 05       	cpc	r25, r3
    1052:	2c f0       	brlt	.+10     	; 0x105e <_fpadd_parts+0x18c>
    1054:	1c 01       	movw	r2, r24
    1056:	aa 24       	eor	r10, r10
    1058:	bb 24       	eor	r11, r11
    105a:	65 01       	movw	r12, r10
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <_fpadd_parts+0x192>
    105e:	ee 24       	eor	r14, r14
    1060:	ff 24       	eor	r15, r15
    1062:	87 01       	movw	r16, r14
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	9c 91       	ld	r25, X
    1068:	d2 01       	movw	r26, r4
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	8c 91       	ld	r24, X
    106e:	98 17       	cp	r25, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <_fpadd_parts+0x1a2>
    1072:	45 c0       	rjmp	.+138    	; 0x10fe <_fpadd_parts+0x22c>
    1074:	99 23       	and	r25, r25
    1076:	39 f0       	breq	.+14     	; 0x1086 <_fpadd_parts+0x1b4>
    1078:	a8 01       	movw	r20, r16
    107a:	97 01       	movw	r18, r14
    107c:	2a 19       	sub	r18, r10
    107e:	3b 09       	sbc	r19, r11
    1080:	4c 09       	sbc	r20, r12
    1082:	5d 09       	sbc	r21, r13
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <_fpadd_parts+0x1c0>
    1086:	a6 01       	movw	r20, r12
    1088:	95 01       	movw	r18, r10
    108a:	2e 19       	sub	r18, r14
    108c:	3f 09       	sbc	r19, r15
    108e:	40 0b       	sbc	r20, r16
    1090:	51 0b       	sbc	r21, r17
    1092:	57 fd       	sbrc	r21, 7
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <_fpadd_parts+0x1d4>
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	33 82       	std	Z+3, r3	; 0x03
    109a:	22 82       	std	Z+2, r2	; 0x02
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
    10a0:	46 83       	std	Z+6, r20	; 0x06
    10a2:	57 83       	std	Z+7, r21	; 0x07
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <_fpadd_parts+0x20e>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	81 83       	std	Z+1, r24	; 0x01
    10aa:	33 82       	std	Z+3, r3	; 0x03
    10ac:	22 82       	std	Z+2, r2	; 0x02
    10ae:	88 27       	eor	r24, r24
    10b0:	99 27       	eor	r25, r25
    10b2:	dc 01       	movw	r26, r24
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	a4 0b       	sbc	r26, r20
    10ba:	b5 0b       	sbc	r27, r21
    10bc:	84 83       	std	Z+4, r24	; 0x04
    10be:	95 83       	std	Z+5, r25	; 0x05
    10c0:	a6 83       	std	Z+6, r26	; 0x06
    10c2:	b7 83       	std	Z+7, r27	; 0x07
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <_fpadd_parts+0x20e>
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	24 83       	std	Z+4, r18	; 0x04
    10d0:	35 83       	std	Z+5, r19	; 0x05
    10d2:	46 83       	std	Z+6, r20	; 0x06
    10d4:	57 83       	std	Z+7, r21	; 0x07
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	24 81       	ldd	r18, Z+4	; 0x04
    10e2:	35 81       	ldd	r19, Z+5	; 0x05
    10e4:	46 81       	ldd	r20, Z+6	; 0x06
    10e6:	57 81       	ldd	r21, Z+7	; 0x07
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 09       	sbc	r26, r1
    10f0:	b1 09       	sbc	r27, r1
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	af 4f       	sbci	r26, 0xFF	; 255
    10f8:	bf 43       	sbci	r27, 0x3F	; 63
    10fa:	28 f3       	brcs	.-54     	; 0x10c6 <_fpadd_parts+0x1f4>
    10fc:	0b c0       	rjmp	.+22     	; 0x1114 <_fpadd_parts+0x242>
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	33 82       	std	Z+3, r3	; 0x03
    1102:	22 82       	std	Z+2, r2	; 0x02
    1104:	ea 0c       	add	r14, r10
    1106:	fb 1c       	adc	r15, r11
    1108:	0c 1d       	adc	r16, r12
    110a:	1d 1d       	adc	r17, r13
    110c:	e4 82       	std	Z+4, r14	; 0x04
    110e:	f5 82       	std	Z+5, r15	; 0x05
    1110:	06 83       	std	Z+6, r16	; 0x06
    1112:	17 83       	std	Z+7, r17	; 0x07
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	80 83       	st	Z, r24
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	57 ff       	sbrs	r21, 7
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <_fpadd_parts+0x286>
    1124:	c9 01       	movw	r24, r18
    1126:	aa 27       	eor	r26, r26
    1128:	97 fd       	sbrc	r25, 7
    112a:	a0 95       	com	r26
    112c:	ba 2f       	mov	r27, r26
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	a0 70       	andi	r26, 0x00	; 0
    1134:	b0 70       	andi	r27, 0x00	; 0
    1136:	56 95       	lsr	r21
    1138:	47 95       	ror	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	82 2b       	or	r24, r18
    1140:	93 2b       	or	r25, r19
    1142:	a4 2b       	or	r26, r20
    1144:	b5 2b       	or	r27, r21
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	95 83       	std	Z+5, r25	; 0x05
    114a:	a6 83       	std	Z+6, r26	; 0x06
    114c:	b7 83       	std	Z+7, r27	; 0x07
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	df 01       	movw	r26, r30
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_fpadd_parts+0x28c>
    115c:	d2 01       	movw	r26, r4
    115e:	cd 01       	movw	r24, r26
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	e2 e1       	ldi	r30, 0x12	; 18
    1166:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__epilogue_restores__>

0000116a <__subsf3>:
    116a:	a0 e2       	ldi	r26, 0x20	; 32
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__prologue_saves__+0x18>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	3e 83       	std	Y+6, r19	; 0x06
    1182:	4f 83       	std	Y+7, r20	; 0x07
    1184:	58 87       	std	Y+8, r21	; 0x08
    1186:	e9 e0       	ldi	r30, 0x09	; 9
    1188:	ee 2e       	mov	r14, r30
    118a:	f1 2c       	mov	r15, r1
    118c:	ec 0e       	add	r14, r28
    118e:	fd 1e       	adc	r15, r29
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5e       	subi	r16, 0xEF	; 239
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	b8 01       	movw	r22, r16
    11a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11aa:	8a 89       	ldd	r24, Y+18	; 0x12
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	89 27       	eor	r24, r25
    11b0:	8a 8b       	std	Y+18, r24	; 0x12
    11b2:	c7 01       	movw	r24, r14
    11b4:	b8 01       	movw	r22, r16
    11b6:	ae 01       	movw	r20, r28
    11b8:	47 5e       	subi	r20, 0xE7	; 231
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    11c0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    11c4:	a0 96       	adiw	r28, 0x20	; 32
    11c6:	e6 e0       	ldi	r30, 0x06	; 6
    11c8:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <__epilogue_restores__+0x18>

000011cc <__addsf3>:
    11cc:	a0 e2       	ldi	r26, 0x20	; 32
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__prologue_saves__+0x18>
    11d8:	69 83       	std	Y+1, r22	; 0x01
    11da:	7a 83       	std	Y+2, r23	; 0x02
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	3e 83       	std	Y+6, r19	; 0x06
    11e4:	4f 83       	std	Y+7, r20	; 0x07
    11e6:	58 87       	std	Y+8, r21	; 0x08
    11e8:	f9 e0       	ldi	r31, 0x09	; 9
    11ea:	ef 2e       	mov	r14, r31
    11ec:	f1 2c       	mov	r15, r1
    11ee:	ec 0e       	add	r14, r28
    11f0:	fd 1e       	adc	r15, r29
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	b7 01       	movw	r22, r14
    11f8:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5e       	subi	r16, 0xEF	; 239
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	05 96       	adiw	r24, 0x05	; 5
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    120c:	c7 01       	movw	r24, r14
    120e:	b8 01       	movw	r22, r16
    1210:	ae 01       	movw	r20, r28
    1212:	47 5e       	subi	r20, 0xE7	; 231
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    121a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    121e:	a0 96       	adiw	r28, 0x20	; 32
    1220:	e6 e0       	ldi	r30, 0x06	; 6
    1222:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <__epilogue_restores__+0x18>

00001226 <__mulsf3>:
    1226:	a0 e2       	ldi	r26, 0x20	; 32
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e1       	ldi	r30, 0x19	; 25
    122c:	f9 e0       	ldi	r31, 0x09	; 9
    122e:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__prologue_saves__>
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	2d 83       	std	Y+5, r18	; 0x05
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	4f 83       	std	Y+7, r20	; 0x07
    1240:	58 87       	std	Y+8, r21	; 0x08
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	be 01       	movw	r22, r28
    1248:	67 5f       	subi	r22, 0xF7	; 247
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    1250:	ce 01       	movw	r24, r28
    1252:	05 96       	adiw	r24, 0x05	; 5
    1254:	be 01       	movw	r22, r28
    1256:	6f 5e       	subi	r22, 0xEF	; 239
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    125e:	99 85       	ldd	r25, Y+9	; 0x09
    1260:	92 30       	cpi	r25, 0x02	; 2
    1262:	88 f0       	brcs	.+34     	; 0x1286 <__mulsf3+0x60>
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	c8 f0       	brcs	.+50     	; 0x129c <__mulsf3+0x76>
    126a:	94 30       	cpi	r25, 0x04	; 4
    126c:	19 f4       	brne	.+6      	; 0x1274 <__mulsf3+0x4e>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	51 f4       	brne	.+20     	; 0x1286 <__mulsf3+0x60>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__mulsf3+0x56>
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	29 f4       	brne	.+10     	; 0x1282 <__mulsf3+0x5c>
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	81 f4       	brne	.+32     	; 0x129c <__mulsf3+0x76>
    127c:	85 ef       	ldi	r24, 0xF5	; 245
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	c6 c0       	rjmp	.+396    	; 0x140e <__mulsf3+0x1e8>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	49 f4       	brne	.+18     	; 0x1298 <__mulsf3+0x72>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	8a 89       	ldd	r24, Y+18	; 0x12
    128c:	98 13       	cpse	r25, r24
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	2a 87       	std	Y+10, r18	; 0x0a
    1292:	ce 01       	movw	r24, r28
    1294:	09 96       	adiw	r24, 0x09	; 9
    1296:	bb c0       	rjmp	.+374    	; 0x140e <__mulsf3+0x1e8>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	49 f4       	brne	.+18     	; 0x12ae <__mulsf3+0x88>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	8a 89       	ldd	r24, Y+18	; 0x12
    12a2:	98 13       	cpse	r25, r24
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	2a 8b       	std	Y+18, r18	; 0x12
    12a8:	ce 01       	movw	r24, r28
    12aa:	41 96       	adiw	r24, 0x11	; 17
    12ac:	b0 c0       	rjmp	.+352    	; 0x140e <__mulsf3+0x1e8>
    12ae:	2d 84       	ldd	r2, Y+13	; 0x0d
    12b0:	3e 84       	ldd	r3, Y+14	; 0x0e
    12b2:	4f 84       	ldd	r4, Y+15	; 0x0f
    12b4:	58 88       	ldd	r5, Y+16	; 0x10
    12b6:	6d 88       	ldd	r6, Y+21	; 0x15
    12b8:	7e 88       	ldd	r7, Y+22	; 0x16
    12ba:	8f 88       	ldd	r8, Y+23	; 0x17
    12bc:	98 8c       	ldd	r9, Y+24	; 0x18
    12be:	ee 24       	eor	r14, r14
    12c0:	ff 24       	eor	r15, r15
    12c2:	87 01       	movw	r16, r14
    12c4:	aa 24       	eor	r10, r10
    12c6:	bb 24       	eor	r11, r11
    12c8:	65 01       	movw	r12, r10
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	c1 01       	movw	r24, r2
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	89 2b       	or	r24, r25
    12de:	e9 f0       	breq	.+58     	; 0x131a <__mulsf3+0xf4>
    12e0:	e6 0c       	add	r14, r6
    12e2:	f7 1c       	adc	r15, r7
    12e4:	08 1d       	adc	r16, r8
    12e6:	19 1d       	adc	r17, r9
    12e8:	9a 01       	movw	r18, r20
    12ea:	ab 01       	movw	r20, r22
    12ec:	2a 0d       	add	r18, r10
    12ee:	3b 1d       	adc	r19, r11
    12f0:	4c 1d       	adc	r20, r12
    12f2:	5d 1d       	adc	r21, r13
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 14       	cp	r14, r6
    12fe:	f7 04       	cpc	r15, r7
    1300:	08 05       	cpc	r16, r8
    1302:	19 05       	cpc	r17, r9
    1304:	20 f4       	brcc	.+8      	; 0x130e <__mulsf3+0xe8>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ba 01       	movw	r22, r20
    1310:	a9 01       	movw	r20, r18
    1312:	48 0f       	add	r20, r24
    1314:	59 1f       	adc	r21, r25
    1316:	6a 1f       	adc	r22, r26
    1318:	7b 1f       	adc	r23, r27
    131a:	aa 0c       	add	r10, r10
    131c:	bb 1c       	adc	r11, r11
    131e:	cc 1c       	adc	r12, r12
    1320:	dd 1c       	adc	r13, r13
    1322:	97 fe       	sbrs	r9, 7
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <__mulsf3+0x110>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	a8 2a       	or	r10, r24
    1330:	b9 2a       	or	r11, r25
    1332:	ca 2a       	or	r12, r26
    1334:	db 2a       	or	r13, r27
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	e0 32       	cpi	r30, 0x20	; 32
    133a:	f1 05       	cpc	r31, r1
    133c:	49 f0       	breq	.+18     	; 0x1350 <__mulsf3+0x12a>
    133e:	66 0c       	add	r6, r6
    1340:	77 1c       	adc	r7, r7
    1342:	88 1c       	adc	r8, r8
    1344:	99 1c       	adc	r9, r9
    1346:	56 94       	lsr	r5
    1348:	47 94       	ror	r4
    134a:	37 94       	ror	r3
    134c:	27 94       	ror	r2
    134e:	c3 cf       	rjmp	.-122    	; 0x12d6 <__mulsf3+0xb0>
    1350:	fa 85       	ldd	r31, Y+10	; 0x0a
    1352:	ea 89       	ldd	r30, Y+18	; 0x12
    1354:	2b 89       	ldd	r18, Y+19	; 0x13
    1356:	3c 89       	ldd	r19, Y+20	; 0x14
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	28 0f       	add	r18, r24
    135e:	39 1f       	adc	r19, r25
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	17 c0       	rjmp	.+46     	; 0x1394 <__mulsf3+0x16e>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	89 2b       	or	r24, r25
    136e:	61 f0       	breq	.+24     	; 0x1388 <__mulsf3+0x162>
    1370:	16 95       	lsr	r17
    1372:	07 95       	ror	r16
    1374:	f7 94       	ror	r15
    1376:	e7 94       	ror	r14
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e8       	ldi	r27, 0x80	; 128
    1380:	e8 2a       	or	r14, r24
    1382:	f9 2a       	or	r15, r25
    1384:	0a 2b       	or	r16, r26
    1386:	1b 2b       	or	r17, r27
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	77 fd       	sbrc	r23, 7
    1396:	e7 cf       	rjmp	.-50     	; 0x1366 <__mulsf3+0x140>
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <__mulsf3+0x18c>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	17 fd       	sbrc	r17, 7
    13a4:	41 60       	ori	r20, 0x01	; 1
    13a6:	ee 0c       	add	r14, r14
    13a8:	ff 1c       	adc	r15, r15
    13aa:	00 1f       	adc	r16, r16
    13ac:	11 1f       	adc	r17, r17
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	30 40       	sbci	r19, 0x00	; 0
    13b2:	40 30       	cpi	r20, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	59 07       	cpc	r21, r25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	69 07       	cpc	r22, r25
    13bc:	90 e4       	ldi	r25, 0x40	; 64
    13be:	79 07       	cpc	r23, r25
    13c0:	60 f3       	brcs	.-40     	; 0x139a <__mulsf3+0x174>
    13c2:	2b 8f       	std	Y+27, r18	; 0x1b
    13c4:	3c 8f       	std	Y+28, r19	; 0x1c
    13c6:	db 01       	movw	r26, r22
    13c8:	ca 01       	movw	r24, r20
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	a0 70       	andi	r26, 0x00	; 0
    13d0:	b0 70       	andi	r27, 0x00	; 0
    13d2:	80 34       	cpi	r24, 0x40	; 64
    13d4:	91 05       	cpc	r25, r1
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	61 f4       	brne	.+24     	; 0x13f4 <__mulsf3+0x1ce>
    13dc:	47 fd       	sbrc	r20, 7
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <__mulsf3+0x1ce>
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	01 05       	cpc	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__mulsf3+0x1ce>
    13ea:	40 5c       	subi	r20, 0xC0	; 192
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	6f 4f       	sbci	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	40 78       	andi	r20, 0x80	; 128
    13f4:	1a 8e       	std	Y+26, r1	; 0x1a
    13f6:	fe 17       	cp	r31, r30
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__mulsf3+0x1d8>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8a 8f       	std	Y+26, r24	; 0x1a
    13fe:	4d 8f       	std	Y+29, r20	; 0x1d
    1400:	5e 8f       	std	Y+30, r21	; 0x1e
    1402:	6f 8f       	std	Y+31, r22	; 0x1f
    1404:	78 a3       	std	Y+32, r23	; 0x20
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	89 8f       	std	Y+25, r24	; 0x19
    140a:	ce 01       	movw	r24, r28
    140c:	49 96       	adiw	r24, 0x19	; 25
    140e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    1412:	a0 96       	adiw	r28, 0x20	; 32
    1414:	e2 e1       	ldi	r30, 0x12	; 18
    1416:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__epilogue_restores__>

0000141a <__gtsf2>:
    141a:	a8 e1       	ldi	r26, 0x18	; 24
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__prologue_saves__+0x18>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	4f 83       	std	Y+7, r20	; 0x07
    1434:	58 87       	std	Y+8, r21	; 0x08
    1436:	89 e0       	ldi	r24, 0x09	; 9
    1438:	e8 2e       	mov	r14, r24
    143a:	f1 2c       	mov	r15, r1
    143c:	ec 0e       	add	r14, r28
    143e:	fd 1e       	adc	r15, r29
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	b7 01       	movw	r22, r14
    1446:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    144a:	8e 01       	movw	r16, r28
    144c:	0f 5e       	subi	r16, 0xEF	; 239
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	05 96       	adiw	r24, 0x05	; 5
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	40 f0       	brcs	.+16     	; 0x1470 <__gtsf2+0x56>
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	28 f0       	brcs	.+10     	; 0x1470 <__gtsf2+0x56>
    1466:	c7 01       	movw	r24, r14
    1468:	b8 01       	movw	r22, r16
    146a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <__gtsf2+0x58>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	68 96       	adiw	r28, 0x18	; 24
    1474:	e6 e0       	ldi	r30, 0x06	; 6
    1476:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <__epilogue_restores__+0x18>

0000147a <__gesf2>:
    147a:	a8 e1       	ldi	r26, 0x18	; 24
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e3 e4       	ldi	r30, 0x43	; 67
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__prologue_saves__+0x18>
    1486:	69 83       	std	Y+1, r22	; 0x01
    1488:	7a 83       	std	Y+2, r23	; 0x02
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	2d 83       	std	Y+5, r18	; 0x05
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	4f 83       	std	Y+7, r20	; 0x07
    1494:	58 87       	std	Y+8, r21	; 0x08
    1496:	89 e0       	ldi	r24, 0x09	; 9
    1498:	e8 2e       	mov	r14, r24
    149a:	f1 2c       	mov	r15, r1
    149c:	ec 0e       	add	r14, r28
    149e:	fd 1e       	adc	r15, r29
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	b7 01       	movw	r22, r14
    14a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5e       	subi	r16, 0xEF	; 239
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	05 96       	adiw	r24, 0x05	; 5
    14b4:	b8 01       	movw	r22, r16
    14b6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	40 f0       	brcs	.+16     	; 0x14d0 <__gesf2+0x56>
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	28 f0       	brcs	.+10     	; 0x14d0 <__gesf2+0x56>
    14c6:	c7 01       	movw	r24, r14
    14c8:	b8 01       	movw	r22, r16
    14ca:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <__gesf2+0x58>
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	68 96       	adiw	r28, 0x18	; 24
    14d4:	e6 e0       	ldi	r30, 0x06	; 6
    14d6:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <__epilogue_restores__+0x18>

000014da <__ltsf2>:
    14da:	a8 e1       	ldi	r26, 0x18	; 24
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e7       	ldi	r30, 0x73	; 115
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__prologue_saves__+0x18>
    14e6:	69 83       	std	Y+1, r22	; 0x01
    14e8:	7a 83       	std	Y+2, r23	; 0x02
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	2d 83       	std	Y+5, r18	; 0x05
    14f0:	3e 83       	std	Y+6, r19	; 0x06
    14f2:	4f 83       	std	Y+7, r20	; 0x07
    14f4:	58 87       	std	Y+8, r21	; 0x08
    14f6:	89 e0       	ldi	r24, 0x09	; 9
    14f8:	e8 2e       	mov	r14, r24
    14fa:	f1 2c       	mov	r15, r1
    14fc:	ec 0e       	add	r14, r28
    14fe:	fd 1e       	adc	r15, r29
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	b7 01       	movw	r22, r14
    1506:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    150a:	8e 01       	movw	r16, r28
    150c:	0f 5e       	subi	r16, 0xEF	; 239
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	ce 01       	movw	r24, r28
    1512:	05 96       	adiw	r24, 0x05	; 5
    1514:	b8 01       	movw	r22, r16
    1516:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	40 f0       	brcs	.+16     	; 0x1530 <__ltsf2+0x56>
    1520:	89 89       	ldd	r24, Y+17	; 0x11
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	28 f0       	brcs	.+10     	; 0x1530 <__ltsf2+0x56>
    1526:	c7 01       	movw	r24, r14
    1528:	b8 01       	movw	r22, r16
    152a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <__ltsf2+0x58>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	68 96       	adiw	r28, 0x18	; 24
    1534:	e6 e0       	ldi	r30, 0x06	; 6
    1536:	0c 94 53 1c 	jmp	0x38a6	; 0x38a6 <__epilogue_restores__+0x18>

0000153a <__fixsfsi>:
    153a:	ac e0       	ldi	r26, 0x0C	; 12
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 ea       	ldi	r30, 0xA3	; 163
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	0c 94 3b 1c 	jmp	0x3876	; 0x3876 <__prologue_saves__+0x20>
    1546:	69 83       	std	Y+1, r22	; 0x01
    1548:	7a 83       	std	Y+2, r23	; 0x02
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	be 01       	movw	r22, r28
    1554:	6b 5f       	subi	r22, 0xFB	; 251
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	61 f1       	breq	.+88     	; 0x15ba <__fixsfsi+0x80>
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	50 f1       	brcs	.+84     	; 0x15ba <__fixsfsi+0x80>
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	21 f4       	brne	.+8      	; 0x1572 <__fixsfsi+0x38>
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	88 23       	and	r24, r24
    156e:	51 f1       	breq	.+84     	; 0x15c4 <__fixsfsi+0x8a>
    1570:	2e c0       	rjmp	.+92     	; 0x15ce <__fixsfsi+0x94>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	37 fd       	sbrc	r19, 7
    1578:	20 c0       	rjmp	.+64     	; 0x15ba <__fixsfsi+0x80>
    157a:	6e 81       	ldd	r22, Y+6	; 0x06
    157c:	2f 31       	cpi	r18, 0x1F	; 31
    157e:	31 05       	cpc	r19, r1
    1580:	1c f0       	brlt	.+6      	; 0x1588 <__fixsfsi+0x4e>
    1582:	66 23       	and	r22, r22
    1584:	f9 f0       	breq	.+62     	; 0x15c4 <__fixsfsi+0x8a>
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <__fixsfsi+0x94>
    1588:	8e e1       	ldi	r24, 0x1E	; 30
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	29 85       	ldd	r18, Y+9	; 0x09
    1592:	3a 85       	ldd	r19, Y+10	; 0x0a
    1594:	4b 85       	ldd	r20, Y+11	; 0x0b
    1596:	5c 85       	ldd	r21, Y+12	; 0x0c
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <__fixsfsi+0x68>
    159a:	56 95       	lsr	r21
    159c:	47 95       	ror	r20
    159e:	37 95       	ror	r19
    15a0:	27 95       	ror	r18
    15a2:	8a 95       	dec	r24
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <__fixsfsi+0x60>
    15a6:	66 23       	and	r22, r22
    15a8:	b1 f0       	breq	.+44     	; 0x15d6 <__fixsfsi+0x9c>
    15aa:	50 95       	com	r21
    15ac:	40 95       	com	r20
    15ae:	30 95       	com	r19
    15b0:	21 95       	neg	r18
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	4f 4f       	sbci	r20, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <__fixsfsi+0x9c>
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__fixsfsi+0x9c>
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f ef       	ldi	r20, 0xFF	; 255
    15ca:	5f e7       	ldi	r21, 0x7F	; 127
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__fixsfsi+0x9c>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e8       	ldi	r21, 0x80	; 128
    15d6:	b9 01       	movw	r22, r18
    15d8:	ca 01       	movw	r24, r20
    15da:	2c 96       	adiw	r28, 0x0c	; 12
    15dc:	e2 e0       	ldi	r30, 0x02	; 2
    15de:	0c 94 57 1c 	jmp	0x38ae	; 0x38ae <__epilogue_restores__+0x20>

000015e2 <__pack_f>:
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	fc 01       	movw	r30, r24
    15ee:	e4 80       	ldd	r14, Z+4	; 0x04
    15f0:	f5 80       	ldd	r15, Z+5	; 0x05
    15f2:	06 81       	ldd	r16, Z+6	; 0x06
    15f4:	17 81       	ldd	r17, Z+7	; 0x07
    15f6:	d1 80       	ldd	r13, Z+1	; 0x01
    15f8:	80 81       	ld	r24, Z
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	48 f4       	brcc	.+18     	; 0x1610 <__pack_f+0x2e>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e1       	ldi	r26, 0x10	; 16
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 2a       	or	r14, r24
    1608:	f9 2a       	or	r15, r25
    160a:	0a 2b       	or	r16, r26
    160c:	1b 2b       	or	r17, r27
    160e:	a5 c0       	rjmp	.+330    	; 0x175a <__pack_f+0x178>
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	09 f4       	brne	.+2      	; 0x1616 <__pack_f+0x34>
    1614:	9f c0       	rjmp	.+318    	; 0x1754 <__pack_f+0x172>
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	21 f4       	brne	.+8      	; 0x1622 <__pack_f+0x40>
    161a:	ee 24       	eor	r14, r14
    161c:	ff 24       	eor	r15, r15
    161e:	87 01       	movw	r16, r14
    1620:	05 c0       	rjmp	.+10     	; 0x162c <__pack_f+0x4a>
    1622:	e1 14       	cp	r14, r1
    1624:	f1 04       	cpc	r15, r1
    1626:	01 05       	cpc	r16, r1
    1628:	11 05       	cpc	r17, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <__pack_f+0x50>
    162c:	e0 e0       	ldi	r30, 0x00	; 0
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	96 c0       	rjmp	.+300    	; 0x175e <__pack_f+0x17c>
    1632:	62 81       	ldd	r22, Z+2	; 0x02
    1634:	73 81       	ldd	r23, Z+3	; 0x03
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	62 38       	cpi	r22, 0x82	; 130
    163a:	79 07       	cpc	r23, r25
    163c:	0c f0       	brlt	.+2      	; 0x1640 <__pack_f+0x5e>
    163e:	5b c0       	rjmp	.+182    	; 0x16f6 <__pack_f+0x114>
    1640:	22 e8       	ldi	r18, 0x82	; 130
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	26 1b       	sub	r18, r22
    1646:	37 0b       	sbc	r19, r23
    1648:	2a 31       	cpi	r18, 0x1A	; 26
    164a:	31 05       	cpc	r19, r1
    164c:	2c f0       	brlt	.+10     	; 0x1658 <__pack_f+0x76>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	2a c0       	rjmp	.+84     	; 0x16ac <__pack_f+0xca>
    1658:	b8 01       	movw	r22, r16
    165a:	a7 01       	movw	r20, r14
    165c:	02 2e       	mov	r0, r18
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__pack_f+0x86>
    1660:	76 95       	lsr	r23
    1662:	67 95       	ror	r22
    1664:	57 95       	ror	r21
    1666:	47 95       	ror	r20
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__pack_f+0x7e>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__pack_f+0x9c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	2a 95       	dec	r18
    1680:	d2 f7       	brpl	.-12     	; 0x1676 <__pack_f+0x94>
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	a1 09       	sbc	r26, r1
    1686:	b1 09       	sbc	r27, r1
    1688:	8e 21       	and	r24, r14
    168a:	9f 21       	and	r25, r15
    168c:	a0 23       	and	r26, r16
    168e:	b1 23       	and	r27, r17
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	21 f0       	breq	.+8      	; 0x16a0 <__pack_f+0xbe>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	9a 01       	movw	r18, r20
    16a2:	ab 01       	movw	r20, r22
    16a4:	28 2b       	or	r18, r24
    16a6:	39 2b       	or	r19, r25
    16a8:	4a 2b       	or	r20, r26
    16aa:	5b 2b       	or	r21, r27
    16ac:	da 01       	movw	r26, r20
    16ae:	c9 01       	movw	r24, r18
    16b0:	8f 77       	andi	r24, 0x7F	; 127
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	a0 70       	andi	r26, 0x00	; 0
    16b6:	b0 70       	andi	r27, 0x00	; 0
    16b8:	80 34       	cpi	r24, 0x40	; 64
    16ba:	91 05       	cpc	r25, r1
    16bc:	a1 05       	cpc	r26, r1
    16be:	b1 05       	cpc	r27, r1
    16c0:	39 f4       	brne	.+14     	; 0x16d0 <__pack_f+0xee>
    16c2:	27 ff       	sbrs	r18, 7
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <__pack_f+0xf6>
    16c6:	20 5c       	subi	r18, 0xC0	; 192
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ca:	4f 4f       	sbci	r20, 0xFF	; 255
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <__pack_f+0xf6>
    16d0:	21 5c       	subi	r18, 0xC1	; 193
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	4f 4f       	sbci	r20, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	20 30       	cpi	r18, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	3a 07       	cpc	r19, r26
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	4a 07       	cpc	r20, r26
    16e6:	a0 e4       	ldi	r26, 0x40	; 64
    16e8:	5a 07       	cpc	r21, r26
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <__pack_f+0x10e>
    16ec:	e1 e0       	ldi	r30, 0x01	; 1
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	79 01       	movw	r14, r18
    16f2:	8a 01       	movw	r16, r20
    16f4:	27 c0       	rjmp	.+78     	; 0x1744 <__pack_f+0x162>
    16f6:	60 38       	cpi	r22, 0x80	; 128
    16f8:	71 05       	cpc	r23, r1
    16fa:	64 f5       	brge	.+88     	; 0x1754 <__pack_f+0x172>
    16fc:	fb 01       	movw	r30, r22
    16fe:	e1 58       	subi	r30, 0x81	; 129
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	d8 01       	movw	r26, r16
    1704:	c7 01       	movw	r24, r14
    1706:	8f 77       	andi	r24, 0x7F	; 127
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	a0 70       	andi	r26, 0x00	; 0
    170c:	b0 70       	andi	r27, 0x00	; 0
    170e:	80 34       	cpi	r24, 0x40	; 64
    1710:	91 05       	cpc	r25, r1
    1712:	a1 05       	cpc	r26, r1
    1714:	b1 05       	cpc	r27, r1
    1716:	39 f4       	brne	.+14     	; 0x1726 <__pack_f+0x144>
    1718:	e7 fe       	sbrs	r14, 7
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <__pack_f+0x154>
    171c:	80 e4       	ldi	r24, 0x40	; 64
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__pack_f+0x14c>
    1726:	8f e3       	ldi	r24, 0x3F	; 63
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 0e       	add	r14, r24
    1730:	f9 1e       	adc	r15, r25
    1732:	0a 1f       	adc	r16, r26
    1734:	1b 1f       	adc	r17, r27
    1736:	17 ff       	sbrs	r17, 7
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__pack_f+0x162>
    173a:	16 95       	lsr	r17
    173c:	07 95       	ror	r16
    173e:	f7 94       	ror	r15
    1740:	e7 94       	ror	r14
    1742:	31 96       	adiw	r30, 0x01	; 1
    1744:	87 e0       	ldi	r24, 0x07	; 7
    1746:	16 95       	lsr	r17
    1748:	07 95       	ror	r16
    174a:	f7 94       	ror	r15
    174c:	e7 94       	ror	r14
    174e:	8a 95       	dec	r24
    1750:	d1 f7       	brne	.-12     	; 0x1746 <__pack_f+0x164>
    1752:	05 c0       	rjmp	.+10     	; 0x175e <__pack_f+0x17c>
    1754:	ee 24       	eor	r14, r14
    1756:	ff 24       	eor	r15, r15
    1758:	87 01       	movw	r16, r14
    175a:	ef ef       	ldi	r30, 0xFF	; 255
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	6e 2f       	mov	r22, r30
    1760:	67 95       	ror	r22
    1762:	66 27       	eor	r22, r22
    1764:	67 95       	ror	r22
    1766:	90 2f       	mov	r25, r16
    1768:	9f 77       	andi	r25, 0x7F	; 127
    176a:	d7 94       	ror	r13
    176c:	dd 24       	eor	r13, r13
    176e:	d7 94       	ror	r13
    1770:	8e 2f       	mov	r24, r30
    1772:	86 95       	lsr	r24
    1774:	49 2f       	mov	r20, r25
    1776:	46 2b       	or	r20, r22
    1778:	58 2f       	mov	r21, r24
    177a:	5d 29       	or	r21, r13
    177c:	b7 01       	movw	r22, r14
    177e:	ca 01       	movw	r24, r20
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	08 95       	ret

0000178c <__unpack_f>:
    178c:	fc 01       	movw	r30, r24
    178e:	db 01       	movw	r26, r22
    1790:	40 81       	ld	r20, Z
    1792:	51 81       	ldd	r21, Z+1	; 0x01
    1794:	22 81       	ldd	r18, Z+2	; 0x02
    1796:	62 2f       	mov	r22, r18
    1798:	6f 77       	andi	r22, 0x7F	; 127
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	22 1f       	adc	r18, r18
    179e:	22 27       	eor	r18, r18
    17a0:	22 1f       	adc	r18, r18
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	89 2f       	mov	r24, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	82 2b       	or	r24, r18
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	99 1f       	adc	r25, r25
    17b0:	99 27       	eor	r25, r25
    17b2:	99 1f       	adc	r25, r25
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	9c 93       	st	X, r25
    17b8:	11 97       	sbiw	r26, 0x01	; 1
    17ba:	21 15       	cp	r18, r1
    17bc:	31 05       	cpc	r19, r1
    17be:	a9 f5       	brne	.+106    	; 0x182a <__unpack_f+0x9e>
    17c0:	41 15       	cp	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	61 05       	cpc	r22, r1
    17c6:	71 05       	cpc	r23, r1
    17c8:	11 f4       	brne	.+4      	; 0x17ce <__unpack_f+0x42>
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	37 c0       	rjmp	.+110    	; 0x183c <__unpack_f+0xb0>
    17ce:	82 e8       	ldi	r24, 0x82	; 130
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	13 96       	adiw	r26, 0x03	; 3
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
    17d8:	12 97       	sbiw	r26, 0x02	; 2
    17da:	9a 01       	movw	r18, r20
    17dc:	ab 01       	movw	r20, r22
    17de:	67 e0       	ldi	r22, 0x07	; 7
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	44 1f       	adc	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	6a 95       	dec	r22
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <__unpack_f+0x54>
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	8c 93       	st	X, r24
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <__unpack_f+0x80>
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	44 1f       	adc	r20, r20
    17f8:	55 1f       	adc	r21, r21
    17fa:	12 96       	adiw	r26, 0x02	; 2
    17fc:	8d 91       	ld	r24, X+
    17fe:	9c 91       	ld	r25, X
    1800:	13 97       	sbiw	r26, 0x03	; 3
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	13 96       	adiw	r26, 0x03	; 3
    1806:	9c 93       	st	X, r25
    1808:	8e 93       	st	-X, r24
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	20 30       	cpi	r18, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	38 07       	cpc	r19, r24
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	48 07       	cpc	r20, r24
    1816:	80 e4       	ldi	r24, 0x40	; 64
    1818:	58 07       	cpc	r21, r24
    181a:	58 f3       	brcs	.-42     	; 0x17f2 <__unpack_f+0x66>
    181c:	14 96       	adiw	r26, 0x04	; 4
    181e:	2d 93       	st	X+, r18
    1820:	3d 93       	st	X+, r19
    1822:	4d 93       	st	X+, r20
    1824:	5c 93       	st	X, r21
    1826:	17 97       	sbiw	r26, 0x07	; 7
    1828:	08 95       	ret
    182a:	2f 3f       	cpi	r18, 0xFF	; 255
    182c:	31 05       	cpc	r19, r1
    182e:	79 f4       	brne	.+30     	; 0x184e <__unpack_f+0xc2>
    1830:	41 15       	cp	r20, r1
    1832:	51 05       	cpc	r21, r1
    1834:	61 05       	cpc	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	19 f4       	brne	.+6      	; 0x1840 <__unpack_f+0xb4>
    183a:	84 e0       	ldi	r24, 0x04	; 4
    183c:	8c 93       	st	X, r24
    183e:	08 95       	ret
    1840:	64 ff       	sbrs	r22, 4
    1842:	03 c0       	rjmp	.+6      	; 0x184a <__unpack_f+0xbe>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	8c 93       	st	X, r24
    1848:	12 c0       	rjmp	.+36     	; 0x186e <__unpack_f+0xe2>
    184a:	1c 92       	st	X, r1
    184c:	10 c0       	rjmp	.+32     	; 0x186e <__unpack_f+0xe2>
    184e:	2f 57       	subi	r18, 0x7F	; 127
    1850:	30 40       	sbci	r19, 0x00	; 0
    1852:	13 96       	adiw	r26, 0x03	; 3
    1854:	3c 93       	st	X, r19
    1856:	2e 93       	st	-X, r18
    1858:	12 97       	sbiw	r26, 0x02	; 2
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	8c 93       	st	X, r24
    185e:	87 e0       	ldi	r24, 0x07	; 7
    1860:	44 0f       	add	r20, r20
    1862:	55 1f       	adc	r21, r21
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	8a 95       	dec	r24
    186a:	d1 f7       	brne	.-12     	; 0x1860 <__unpack_f+0xd4>
    186c:	70 64       	ori	r23, 0x40	; 64
    186e:	14 96       	adiw	r26, 0x04	; 4
    1870:	4d 93       	st	X+, r20
    1872:	5d 93       	st	X+, r21
    1874:	6d 93       	st	X+, r22
    1876:	7c 93       	st	X, r23
    1878:	17 97       	sbiw	r26, 0x07	; 7
    187a:	08 95       	ret

0000187c <__fpcmp_parts_f>:
    187c:	1f 93       	push	r17
    187e:	dc 01       	movw	r26, r24
    1880:	fb 01       	movw	r30, r22
    1882:	9c 91       	ld	r25, X
    1884:	92 30       	cpi	r25, 0x02	; 2
    1886:	08 f4       	brcc	.+2      	; 0x188a <__fpcmp_parts_f+0xe>
    1888:	47 c0       	rjmp	.+142    	; 0x1918 <__fpcmp_parts_f+0x9c>
    188a:	80 81       	ld	r24, Z
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	08 f4       	brcc	.+2      	; 0x1892 <__fpcmp_parts_f+0x16>
    1890:	43 c0       	rjmp	.+134    	; 0x1918 <__fpcmp_parts_f+0x9c>
    1892:	94 30       	cpi	r25, 0x04	; 4
    1894:	51 f4       	brne	.+20     	; 0x18aa <__fpcmp_parts_f+0x2e>
    1896:	11 96       	adiw	r26, 0x01	; 1
    1898:	1c 91       	ld	r17, X
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	99 f5       	brne	.+102    	; 0x1904 <__fpcmp_parts_f+0x88>
    189e:	81 81       	ldd	r24, Z+1	; 0x01
    18a0:	68 2f       	mov	r22, r24
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	61 1b       	sub	r22, r17
    18a6:	71 09       	sbc	r23, r1
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <__fpcmp_parts_f+0xac>
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <__fpcmp_parts_f+0x3a>
    18ae:	92 30       	cpi	r25, 0x02	; 2
    18b0:	31 f4       	brne	.+12     	; 0x18be <__fpcmp_parts_f+0x42>
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	b9 f1       	breq	.+110    	; 0x1924 <__fpcmp_parts_f+0xa8>
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
    18b8:	88 23       	and	r24, r24
    18ba:	89 f1       	breq	.+98     	; 0x191e <__fpcmp_parts_f+0xa2>
    18bc:	2d c0       	rjmp	.+90     	; 0x1918 <__fpcmp_parts_f+0x9c>
    18be:	11 96       	adiw	r26, 0x01	; 1
    18c0:	1c 91       	ld	r17, X
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	f1 f0       	breq	.+60     	; 0x1904 <__fpcmp_parts_f+0x88>
    18c8:	81 81       	ldd	r24, Z+1	; 0x01
    18ca:	18 17       	cp	r17, r24
    18cc:	d9 f4       	brne	.+54     	; 0x1904 <__fpcmp_parts_f+0x88>
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	2d 91       	ld	r18, X+
    18d2:	3c 91       	ld	r19, X
    18d4:	13 97       	sbiw	r26, 0x03	; 3
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	82 17       	cp	r24, r18
    18dc:	93 07       	cpc	r25, r19
    18de:	94 f0       	brlt	.+36     	; 0x1904 <__fpcmp_parts_f+0x88>
    18e0:	28 17       	cp	r18, r24
    18e2:	39 07       	cpc	r19, r25
    18e4:	bc f0       	brlt	.+46     	; 0x1914 <__fpcmp_parts_f+0x98>
    18e6:	14 96       	adiw	r26, 0x04	; 4
    18e8:	8d 91       	ld	r24, X+
    18ea:	9d 91       	ld	r25, X+
    18ec:	0d 90       	ld	r0, X+
    18ee:	bc 91       	ld	r27, X
    18f0:	a0 2d       	mov	r26, r0
    18f2:	24 81       	ldd	r18, Z+4	; 0x04
    18f4:	35 81       	ldd	r19, Z+5	; 0x05
    18f6:	46 81       	ldd	r20, Z+6	; 0x06
    18f8:	57 81       	ldd	r21, Z+7	; 0x07
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	4a 07       	cpc	r20, r26
    1900:	5b 07       	cpc	r21, r27
    1902:	18 f4       	brcc	.+6      	; 0x190a <__fpcmp_parts_f+0x8e>
    1904:	11 23       	and	r17, r17
    1906:	41 f0       	breq	.+16     	; 0x1918 <__fpcmp_parts_f+0x9c>
    1908:	0a c0       	rjmp	.+20     	; 0x191e <__fpcmp_parts_f+0xa2>
    190a:	82 17       	cp	r24, r18
    190c:	93 07       	cpc	r25, r19
    190e:	a4 07       	cpc	r26, r20
    1910:	b5 07       	cpc	r27, r21
    1912:	40 f4       	brcc	.+16     	; 0x1924 <__fpcmp_parts_f+0xa8>
    1914:	11 23       	and	r17, r17
    1916:	19 f0       	breq	.+6      	; 0x191e <__fpcmp_parts_f+0xa2>
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <__fpcmp_parts_f+0xac>
    191e:	6f ef       	ldi	r22, 0xFF	; 255
    1920:	7f ef       	ldi	r23, 0xFF	; 255
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <__fpcmp_parts_f+0xac>
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	cb 01       	movw	r24, r22
    192a:	1f 91       	pop	r17
    192c:	08 95       	ret

0000192e <main>:
Uart_ConfigType g_UartMc1 ={_8_BITS,_1_BIT,DISABLED,9600};
/******************************************************************************
 *								Main                                          *
 *******************************************************************************/
int main()
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	6e 97       	sbiw	r28, 0x1e	; 30
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
	LCD_init();/*initiate the LCD driver*/
    1942:	0e 94 99 15 	call	0x2b32	; 0x2b32 <LCD_init>
	UART_init(&g_UartMc1);/*initiate the UART driver*/
    1946:	8d ef       	ldi	r24, 0xFD	; 253
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <UART_init>
	UART_sendByte(MC2_READY);/*send byte from HMI_ECU to CONTROL_ECU to synchronize*/
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <UART_sendByte>
	MC1_setPassword();/*set the pass for the first time*/
    1954:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <MC1_setPassword>
	 *******************************************************************************/

	while(1)
	{
		/*receive the current state from CONTROL_ECU*/
		g_displayMessage=UART_recieveByte();
    1958:	0e 94 6f 1b 	call	0x36de	; 0x36de <UART_recieveByte>
    195c:	80 93 08 02 	sts	0x0208, r24
		 * in state ERROR_STATE -->> display "ERROR!!!" while the alarm is on for one minute
		 *
		 * in state ENTER_NEW_PASSWORD -->> call function MC1_setPassword to allow the user
		 * to set or change the password
		 * */
		switch (g_displayMessage)
    1960:	80 91 08 02 	lds	r24, 0x0208
    1964:	28 2f       	mov	r18, r24
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	3e 8f       	std	Y+30, r19	; 0x1e
    196a:	2d 8f       	std	Y+29, r18	; 0x1d
    196c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    196e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1970:	89 3f       	cpi	r24, 0xF9	; 249
    1972:	91 05       	cpc	r25, r1
    1974:	09 f4       	brne	.+2      	; 0x1978 <main+0x4a>
    1976:	46 c1       	rjmp	.+652    	; 0x1c04 <main+0x2d6>
    1978:	2d 8d       	ldd	r18, Y+29	; 0x1d
    197a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    197c:	2a 3f       	cpi	r18, 0xFA	; 250
    197e:	31 05       	cpc	r19, r1
    1980:	f4 f4       	brge	.+60     	; 0x19be <main+0x90>
    1982:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1984:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1986:	8e 3e       	cpi	r24, 0xEE	; 238
    1988:	91 05       	cpc	r25, r1
    198a:	09 f4       	brne	.+2      	; 0x198e <main+0x60>
    198c:	b2 c0       	rjmp	.+356    	; 0x1af2 <main+0x1c4>
    198e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1990:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1992:	2f 3e       	cpi	r18, 0xEF	; 239
    1994:	31 05       	cpc	r19, r1
    1996:	34 f4       	brge	.+12     	; 0x19a4 <main+0x76>
    1998:	8d 8d       	ldd	r24, Y+29	; 0x1d
    199a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    199c:	8c 3c       	cpi	r24, 0xCC	; 204
    199e:	91 05       	cpc	r25, r1
    19a0:	59 f1       	breq	.+86     	; 0x19f8 <main+0xca>
    19a2:	da cf       	rjmp	.-76     	; 0x1958 <main+0x2a>
    19a4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    19a6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    19a8:	27 3f       	cpi	r18, 0xF7	; 247
    19aa:	31 05       	cpc	r19, r1
    19ac:	09 f4       	brne	.+2      	; 0x19b0 <main+0x82>
    19ae:	40 c1       	rjmp	.+640    	; 0x1c30 <main+0x302>
    19b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19b4:	88 3f       	cpi	r24, 0xF8	; 248
    19b6:	91 05       	cpc	r25, r1
    19b8:	09 f4       	brne	.+2      	; 0x19bc <main+0x8e>
    19ba:	2f c1       	rjmp	.+606    	; 0x1c1a <main+0x2ec>
    19bc:	cd cf       	rjmp	.-102    	; 0x1958 <main+0x2a>
    19be:	2d 8d       	ldd	r18, Y+29	; 0x1d
    19c0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    19c2:	2b 3f       	cpi	r18, 0xFB	; 251
    19c4:	31 05       	cpc	r19, r1
    19c6:	a9 f0       	breq	.+42     	; 0x19f2 <main+0xc4>
    19c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19cc:	8b 3f       	cpi	r24, 0xFB	; 251
    19ce:	91 05       	cpc	r25, r1
    19d0:	0c f4       	brge	.+2      	; 0x19d4 <main+0xa6>
    19d2:	0d c1       	rjmp	.+538    	; 0x1bee <main+0x2c0>
    19d4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    19d6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    19d8:	2d 3f       	cpi	r18, 0xFD	; 253
    19da:	31 05       	cpc	r19, r1
    19dc:	39 f0       	breq	.+14     	; 0x19ec <main+0xbe>
    19de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19e2:	8e 3f       	cpi	r24, 0xFE	; 254
    19e4:	91 05       	cpc	r25, r1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <main+0xbc>
    19e8:	2e c1       	rjmp	.+604    	; 0x1c46 <main+0x318>
    19ea:	b6 cf       	rjmp	.-148    	; 0x1958 <main+0x2a>
		{
		case MAIN_OPTIONS:
			MC1_mainOptions();
    19ec:	0e 94 08 10 	call	0x2010	; 0x2010 <MC1_mainOptions>
    19f0:	b3 cf       	rjmp	.-154    	; 0x1958 <main+0x2a>
			break;
		case ENTER_YOUR_PASSWORD:
			MC1_enterPassword();
    19f2:	0e 94 ac 10 	call	0x2158	; 0x2158 <MC1_enterPassword>
    19f6:	b0 cf       	rjmp	.-160    	; 0x1958 <main+0x2a>
			break;
		case MATCH:
			LCD_clearScreen();
    19f8:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
			LCD_moveCursor(0,0);
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	60 e0       	ldi	r22, 0x00	; 0
    1a00:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
			LCD_displayString("Welcome");
    1a04:	80 e6       	ldi	r24, 0x60	; 96
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	aa ef       	ldi	r26, 0xFA	; 250
    1a12:	b4 e4       	ldi	r27, 0x44	; 68
    1a14:	89 8f       	std	Y+25, r24	; 0x19
    1a16:	9a 8f       	std	Y+26, r25	; 0x1a
    1a18:	ab 8f       	std	Y+27, r26	; 0x1b
    1a1a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	4a e7       	ldi	r20, 0x7A	; 122
    1a2a:	53 e4       	ldi	r21, 0x43	; 67
    1a2c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	8d 8b       	std	Y+21, r24	; 0x15
    1a36:	9e 8b       	std	Y+22, r25	; 0x16
    1a38:	af 8b       	std	Y+23, r26	; 0x17
    1a3a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1a40:	8f 89       	ldd	r24, Y+23	; 0x17
    1a42:	98 8d       	ldd	r25, Y+24	; 0x18
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	40 e8       	ldi	r20, 0x80	; 128
    1a4a:	5f e3       	ldi	r21, 0x3F	; 63
    1a4c:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1a50:	88 23       	and	r24, r24
    1a52:	2c f4       	brge	.+10     	; 0x1a5e <main+0x130>
		__ticks = 1;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	9c 8b       	std	Y+20, r25	; 0x14
    1a5a:	8b 8b       	std	Y+19, r24	; 0x13
    1a5c:	3f c0       	rjmp	.+126    	; 0x1adc <main+0x1ae>
	else if (__tmp > 65535)
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	3f ef       	ldi	r19, 0xFF	; 255
    1a6a:	4f e7       	ldi	r20, 0x7F	; 127
    1a6c:	57 e4       	ldi	r21, 0x47	; 71
    1a6e:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1a72:	18 16       	cp	r1, r24
    1a74:	4c f5       	brge	.+82     	; 0x1ac8 <main+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a76:	69 8d       	ldd	r22, Y+25	; 0x19
    1a78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	30 e0       	ldi	r19, 0x00	; 0
    1a82:	40 e2       	ldi	r20, 0x20	; 32
    1a84:	51 e4       	ldi	r21, 0x41	; 65
    1a86:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1a8a:	dc 01       	movw	r26, r24
    1a8c:	cb 01       	movw	r24, r22
    1a8e:	bc 01       	movw	r22, r24
    1a90:	cd 01       	movw	r24, r26
    1a92:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	9c 8b       	std	Y+20, r25	; 0x14
    1a9c:	8b 8b       	std	Y+19, r24	; 0x13
    1a9e:	0f c0       	rjmp	.+30     	; 0x1abe <main+0x190>
    1aa0:	89 e1       	ldi	r24, 0x19	; 25
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	9a 8b       	std	Y+18, r25	; 0x12
    1aa6:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa8:	89 89       	ldd	r24, Y+17	; 0x11
    1aaa:	9a 89       	ldd	r25, Y+18	; 0x12
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <main+0x17e>
    1ab0:	9a 8b       	std	Y+18, r25	; 0x12
    1ab2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ab8:	01 97       	sbiw	r24, 0x01	; 1
    1aba:	9c 8b       	std	Y+20, r25	; 0x14
    1abc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1abe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	69 f7       	brne	.-38     	; 0x1aa0 <main+0x172>
    1ac6:	48 cf       	rjmp	.-368    	; 0x1958 <main+0x2a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac8:	6d 89       	ldd	r22, Y+21	; 0x15
    1aca:	7e 89       	ldd	r23, Y+22	; 0x16
    1acc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ace:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	9c 8b       	std	Y+20, r25	; 0x14
    1ada:	8b 8b       	std	Y+19, r24	; 0x13
    1adc:	8b 89       	ldd	r24, Y+19	; 0x13
    1ade:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae0:	98 8b       	std	Y+16, r25	; 0x10
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
    1ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae6:	98 89       	ldd	r25, Y+16	; 0x10
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	f1 f7       	brne	.-4      	; 0x1ae8 <main+0x1ba>
    1aec:	98 8b       	std	Y+16, r25	; 0x10
    1aee:	8f 87       	std	Y+15, r24	; 0x0f
    1af0:	33 cf       	rjmp	.-410    	; 0x1958 <main+0x2a>
			_delay_ms(2000);
			break;
		case MISMATCH:
			LCD_clearScreen();
    1af2:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"TRY AGAIN");
    1af6:	28 e6       	ldi	r18, 0x68	; 104
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	a9 01       	movw	r20, r18
    1b00:	0e 94 11 1a 	call	0x3422	; 0x3422 <LCD_displayStringRowColumn>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	aa ef       	ldi	r26, 0xFA	; 250
    1b0a:	b4 e4       	ldi	r27, 0x44	; 68
    1b0c:	8b 87       	std	Y+11, r24	; 0x0b
    1b0e:	9c 87       	std	Y+12, r25	; 0x0c
    1b10:	ad 87       	std	Y+13, r26	; 0x0d
    1b12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a e7       	ldi	r20, 0x7A	; 122
    1b22:	53 e4       	ldi	r21, 0x43	; 67
    1b24:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8f 83       	std	Y+7, r24	; 0x07
    1b2e:	98 87       	std	Y+8, r25	; 0x08
    1b30:	a9 87       	std	Y+9, r26	; 0x09
    1b32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <main+0x228>
		__ticks = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
    1b54:	3f c0       	rjmp	.+126    	; 0x1bd4 <main+0x2a6>
	else if (__tmp > 65535)
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	57 e4       	ldi	r21, 0x47	; 71
    1b66:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	4c f5       	brge	.+82     	; 0x1bc0 <main+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <main+0x288>
    1b98:	89 e1       	ldi	r24, 0x19	; 25
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <main+0x276>
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <main+0x26a>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <main+0x2b2>
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			MC1_enterPassword();
    1be8:	0e 94 ac 10 	call	0x2158	; 0x2158 <MC1_enterPassword>
    1bec:	b5 ce       	rjmp	.-662    	; 0x1958 <main+0x2a>
			break;
		case OPENING:
			LCD_clearScreen();
    1bee:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
			LCD_displayString("Opening...");
    1bfa:	82 e7       	ldi	r24, 0x72	; 114
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
    1c02:	aa ce       	rjmp	.-684    	; 0x1958 <main+0x2a>
			break;
		case DOOR_IS_OPENED:
			LCD_clearScreen();
    1c04:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	60 e0       	ldi	r22, 0x00	; 0
    1c0c:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
			LCD_displayString("Door opened");
    1c10:	8d e7       	ldi	r24, 0x7D	; 125
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
    1c18:	9f ce       	rjmp	.-706    	; 0x1958 <main+0x2a>
			break;
		case CLOSING:
			LCD_clearScreen();
    1c1a:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
			LCD_displayString("Closing...");
    1c26:	89 e8       	ldi	r24, 0x89	; 137
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
    1c2e:	94 ce       	rjmp	.-728    	; 0x1958 <main+0x2a>
			break;
		case ERROR_STATE:
			LCD_clearScreen();
    1c30:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
			LCD_moveCursor(0,0);
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	60 e0       	ldi	r22, 0x00	; 0
    1c38:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
			LCD_displayString("ERROR!!!");
    1c3c:	84 e9       	ldi	r24, 0x94	; 148
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
    1c44:	89 ce       	rjmp	.-750    	; 0x1958 <main+0x2a>
			break;
		case ENTER_NEW_PASSWORD:
			MC1_setPassword();
    1c46:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <MC1_setPassword>
    1c4a:	86 ce       	rjmp	.-756    	; 0x1958 <main+0x2a>

00001c4c <MC1_setPassword>:
 * 				it takes the password from the user
 * 				two times and send both to the CONTROL_ECU through the UART
 * 				to check if both are matched or not.
 */
void MC1_setPassword(void)
{
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	ac 97       	sbiw	r28, 0x2c	; 44
    1c5a:	0f b6       	in	r0, 0x3f	; 63
    1c5c:	f8 94       	cli
    1c5e:	de bf       	out	0x3e, r29	; 62
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    1c64:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter pass: ");
    1c68:	2d e9       	ldi	r18, 0x9D	; 157
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	a9 01       	movw	r20, r18
    1c72:	0e 94 11 1a 	call	0x3422	; 0x3422 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
	/*this for loop takes the password from user for the first time
	 * and print asterisks on the screen then send the entered password
	 * to CONTROL_ECU */
	for(uint8 i =0;i<PASS_LENGTH+1;i++)
    1c7e:	1c a6       	std	Y+44, r1	; 0x2c
    1c80:	8d c0       	rjmp	.+282    	; 0x1d9c <MC1_setPassword+0x150>
	{
		g_Password[i]=KEYPAD_getPressedKey();
    1c82:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c84:	08 2f       	mov	r16, r24
    1c86:	10 e0       	ldi	r17, 0x00	; 0
    1c88:	0e 94 a1 14 	call	0x2942	; 0x2942 <KEYPAD_getPressedKey>
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	e7 5f       	subi	r30, 0xF7	; 247
    1c90:	fd 4f       	sbci	r31, 0xFD	; 253
    1c92:	80 83       	st	Z, r24
		if(i<PASS_LENGTH)
    1c94:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c96:	85 30       	cpi	r24, 0x05	; 5
    1c98:	60 f4       	brcc	.+24     	; 0x1cb2 <MC1_setPassword+0x66>
		{
			/*display * for each entered character*/
			LCD_displayCharacter('*');
    1c9a:	8a e2       	ldi	r24, 0x2A	; 42
    1c9c:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_displayCharacter>
			/*send the first password to CONTROL_ECU*/
			UART_sendByte(g_Password[i]);
    1ca0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ca2:	88 2f       	mov	r24, r24
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	e7 5f       	subi	r30, 0xF7	; 247
    1caa:	fd 4f       	sbci	r31, 0xFD	; 253
    1cac:	80 81       	ld	r24, Z
    1cae:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <UART_sendByte>
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	90 e8       	ldi	r25, 0x80	; 128
    1cb6:	ab e3       	ldi	r26, 0x3B	; 59
    1cb8:	b5 e4       	ldi	r27, 0x45	; 69
    1cba:	8f a3       	std	Y+39, r24	; 0x27
    1cbc:	98 a7       	std	Y+40, r25	; 0x28
    1cbe:	a9 a7       	std	Y+41, r26	; 0x29
    1cc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	4a e7       	ldi	r20, 0x7A	; 122
    1cd0:	53 e4       	ldi	r21, 0x43	; 67
    1cd2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	8b a3       	std	Y+35, r24	; 0x23
    1cdc:	9c a3       	std	Y+36, r25	; 0x24
    1cde:	ad a3       	std	Y+37, r26	; 0x25
    1ce0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ce2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ce4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ce6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ce8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e8       	ldi	r20, 0x80	; 128
    1cf0:	5f e3       	ldi	r21, 0x3F	; 63
    1cf2:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1cf6:	88 23       	and	r24, r24
    1cf8:	2c f4       	brge	.+10     	; 0x1d04 <MC1_setPassword+0xb8>
		__ticks = 1;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	9a a3       	std	Y+34, r25	; 0x22
    1d00:	89 a3       	std	Y+33, r24	; 0x21
    1d02:	3f c0       	rjmp	.+126    	; 0x1d82 <MC1_setPassword+0x136>
	else if (__tmp > 65535)
    1d04:	6b a1       	ldd	r22, Y+35	; 0x23
    1d06:	7c a1       	ldd	r23, Y+36	; 0x24
    1d08:	8d a1       	ldd	r24, Y+37	; 0x25
    1d0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	3f ef       	ldi	r19, 0xFF	; 255
    1d10:	4f e7       	ldi	r20, 0x7F	; 127
    1d12:	57 e4       	ldi	r21, 0x47	; 71
    1d14:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	4c f5       	brge	.+82     	; 0x1d6e <MC1_setPassword+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d20:	89 a5       	ldd	r24, Y+41	; 0x29
    1d22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e2       	ldi	r20, 0x20	; 32
    1d2a:	51 e4       	ldi	r21, 0x41	; 65
    1d2c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	bc 01       	movw	r22, r24
    1d36:	cd 01       	movw	r24, r26
    1d38:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	9a a3       	std	Y+34, r25	; 0x22
    1d42:	89 a3       	std	Y+33, r24	; 0x21
    1d44:	0f c0       	rjmp	.+30     	; 0x1d64 <MC1_setPassword+0x118>
    1d46:	89 e1       	ldi	r24, 0x19	; 25
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	98 a3       	std	Y+32, r25	; 0x20
    1d4c:	8f 8f       	std	Y+31, r24	; 0x1f
    1d4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d50:	98 a1       	ldd	r25, Y+32	; 0x20
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <MC1_setPassword+0x106>
    1d56:	98 a3       	std	Y+32, r25	; 0x20
    1d58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	9a a3       	std	Y+34, r25	; 0x22
    1d62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d64:	89 a1       	ldd	r24, Y+33	; 0x21
    1d66:	9a a1       	ldd	r25, Y+34	; 0x22
    1d68:	00 97       	sbiw	r24, 0x00	; 0
    1d6a:	69 f7       	brne	.-38     	; 0x1d46 <MC1_setPassword+0xfa>
    1d6c:	14 c0       	rjmp	.+40     	; 0x1d96 <MC1_setPassword+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d70:	7c a1       	ldd	r23, Y+36	; 0x24
    1d72:	8d a1       	ldd	r24, Y+37	; 0x25
    1d74:	9e a1       	ldd	r25, Y+38	; 0x26
    1d76:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	9a a3       	std	Y+34, r25	; 0x22
    1d80:	89 a3       	std	Y+33, r24	; 0x21
    1d82:	89 a1       	ldd	r24, Y+33	; 0x21
    1d84:	9a a1       	ldd	r25, Y+34	; 0x22
    1d86:	9e 8f       	std	Y+30, r25	; 0x1e
    1d88:	8d 8f       	std	Y+29, r24	; 0x1d
    1d8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <MC1_setPassword+0x142>
    1d92:	9e 8f       	std	Y+30, r25	; 0x1e
    1d94:	8d 8f       	std	Y+29, r24	; 0x1d
	LCD_displayStringRowColumn(0,0,"Enter pass: ");
	LCD_moveCursor(1,0);
	/*this for loop takes the password from user for the first time
	 * and print asterisks on the screen then send the entered password
	 * to CONTROL_ECU */
	for(uint8 i =0;i<PASS_LENGTH+1;i++)
    1d96:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	8c a7       	std	Y+44, r24	; 0x2c
    1d9c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d9e:	86 30       	cpi	r24, 0x06	; 6
    1da0:	08 f4       	brcc	.+2      	; 0x1da4 <MC1_setPassword+0x158>
    1da2:	6f cf       	rjmp	.-290    	; 0x1c82 <MC1_setPassword+0x36>
			/*send the first password to CONTROL_ECU*/
			UART_sendByte(g_Password[i]);
		}
		_delay_ms(3000); /* Press time delay */
	}
	LCD_clearScreen();
    1da4:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Reenter pass: ");
    1da8:	2a ea       	ldi	r18, 0xAA	; 170
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	a9 01       	movw	r20, r18
    1db2:	0e 94 11 1a 	call	0x3422	; 0x3422 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	60 e0       	ldi	r22, 0x00	; 0
    1dba:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
	/*this for loop takes the password from user for the second time
	 * and print asterisks on the screen then send the entered password
	 * to CONTROL_ECU to match it with the second one*/
	for(uint8 i =0;i<PASS_LENGTH+1;i++)
    1dbe:	1b a6       	std	Y+43, r1	; 0x2b
    1dc0:	8d c0       	rjmp	.+282    	; 0x1edc <MC1_setPassword+0x290>
	{
		g_Password[i]=KEYPAD_getPressedKey();
    1dc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dc4:	08 2f       	mov	r16, r24
    1dc6:	10 e0       	ldi	r17, 0x00	; 0
    1dc8:	0e 94 a1 14 	call	0x2942	; 0x2942 <KEYPAD_getPressedKey>
    1dcc:	f8 01       	movw	r30, r16
    1dce:	e7 5f       	subi	r30, 0xF7	; 247
    1dd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1dd2:	80 83       	st	Z, r24
		/*user press each number and save it in g_password array*/
		if(i<PASS_LENGTH)
    1dd4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1dd6:	85 30       	cpi	r24, 0x05	; 5
    1dd8:	60 f4       	brcc	.+24     	; 0x1df2 <MC1_setPassword+0x1a6>
		{
			/*display * for each entered character*/
			LCD_displayCharacter('*');
    1dda:	8a e2       	ldi	r24, 0x2A	; 42
    1ddc:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_displayCharacter>
			/*send the second password to CONTROL_ECU*/
			UART_sendByte(g_Password[i]);
    1de0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de2:	88 2f       	mov	r24, r24
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	fc 01       	movw	r30, r24
    1de8:	e7 5f       	subi	r30, 0xF7	; 247
    1dea:	fd 4f       	sbci	r31, 0xFD	; 253
    1dec:	80 81       	ld	r24, Z
    1dee:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <UART_sendByte>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e8       	ldi	r25, 0x80	; 128
    1df6:	ab e3       	ldi	r26, 0x3B	; 59
    1df8:	b5 e4       	ldi	r27, 0x45	; 69
    1dfa:	89 8f       	std	Y+25, r24	; 0x19
    1dfc:	9a 8f       	std	Y+26, r25	; 0x1a
    1dfe:	ab 8f       	std	Y+27, r26	; 0x1b
    1e00:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e02:	69 8d       	ldd	r22, Y+25	; 0x19
    1e04:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e06:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e08:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	53 e4       	ldi	r21, 0x43	; 67
    1e12:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	8d 8b       	std	Y+21, r24	; 0x15
    1e1c:	9e 8b       	std	Y+22, r25	; 0x16
    1e1e:	af 8b       	std	Y+23, r26	; 0x17
    1e20:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e22:	6d 89       	ldd	r22, Y+21	; 0x15
    1e24:	7e 89       	ldd	r23, Y+22	; 0x16
    1e26:	8f 89       	ldd	r24, Y+23	; 0x17
    1e28:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <MC1_setPassword+0x1f8>
		__ticks = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	9c 8b       	std	Y+20, r25	; 0x14
    1e40:	8b 8b       	std	Y+19, r24	; 0x13
    1e42:	3f c0       	rjmp	.+126    	; 0x1ec2 <MC1_setPassword+0x276>
	else if (__tmp > 65535)
    1e44:	6d 89       	ldd	r22, Y+21	; 0x15
    1e46:	7e 89       	ldd	r23, Y+22	; 0x16
    1e48:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	3f ef       	ldi	r19, 0xFF	; 255
    1e50:	4f e7       	ldi	r20, 0x7F	; 127
    1e52:	57 e4       	ldi	r21, 0x47	; 71
    1e54:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1e58:	18 16       	cp	r1, r24
    1e5a:	4c f5       	brge	.+82     	; 0x1eae <MC1_setPassword+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5c:	69 8d       	ldd	r22, Y+25	; 0x19
    1e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e2       	ldi	r20, 0x20	; 32
    1e6a:	51 e4       	ldi	r21, 0x41	; 65
    1e6c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1e70:	dc 01       	movw	r26, r24
    1e72:	cb 01       	movw	r24, r22
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	9c 8b       	std	Y+20, r25	; 0x14
    1e82:	8b 8b       	std	Y+19, r24	; 0x13
    1e84:	0f c0       	rjmp	.+30     	; 0x1ea4 <MC1_setPassword+0x258>
    1e86:	89 e1       	ldi	r24, 0x19	; 25
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9a 8b       	std	Y+18, r25	; 0x12
    1e8c:	89 8b       	std	Y+17, r24	; 0x11
    1e8e:	89 89       	ldd	r24, Y+17	; 0x11
    1e90:	9a 89       	ldd	r25, Y+18	; 0x12
    1e92:	01 97       	sbiw	r24, 0x01	; 1
    1e94:	f1 f7       	brne	.-4      	; 0x1e92 <MC1_setPassword+0x246>
    1e96:	9a 8b       	std	Y+18, r25	; 0x12
    1e98:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	9c 8b       	std	Y+20, r25	; 0x14
    1ea2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <MC1_setPassword+0x23a>
    1eac:	14 c0       	rjmp	.+40     	; 0x1ed6 <MC1_setPassword+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb0:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb2:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb4:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9c 8b       	std	Y+20, r25	; 0x14
    1ec0:	8b 8b       	std	Y+19, r24	; 0x13
    1ec2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec6:	98 8b       	std	Y+16, r25	; 0x10
    1ec8:	8f 87       	std	Y+15, r24	; 0x0f
    1eca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ecc:	98 89       	ldd	r25, Y+16	; 0x10
    1ece:	01 97       	sbiw	r24, 0x01	; 1
    1ed0:	f1 f7       	brne	.-4      	; 0x1ece <MC1_setPassword+0x282>
    1ed2:	98 8b       	std	Y+16, r25	; 0x10
    1ed4:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_displayStringRowColumn(0,0,"Reenter pass: ");
	LCD_moveCursor(1,0);
	/*this for loop takes the password from user for the second time
	 * and print asterisks on the screen then send the entered password
	 * to CONTROL_ECU to match it with the second one*/
	for(uint8 i =0;i<PASS_LENGTH+1;i++)
    1ed6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ed8:	8f 5f       	subi	r24, 0xFF	; 255
    1eda:	8b a7       	std	Y+43, r24	; 0x2b
    1edc:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ede:	86 30       	cpi	r24, 0x06	; 6
    1ee0:	08 f4       	brcc	.+2      	; 0x1ee4 <MC1_setPassword+0x298>
    1ee2:	6f cf       	rjmp	.-290    	; 0x1dc2 <MC1_setPassword+0x176>
			UART_sendByte(g_Password[i]);
		}
		_delay_ms(3000); /* Press time */
	}
	/*receive the current state from micro2 */
	g_displayMessage=UART_recieveByte();
    1ee4:	0e 94 6f 1b 	call	0x36de	; 0x36de <UART_recieveByte>
    1ee8:	80 93 08 02 	sts	0x0208, r24
	/*check if password is right or wrong*/
	if(MATCH==g_displayMessage)
    1eec:	80 91 08 02 	lds	r24, 0x0208
    1ef0:	8c 3c       	cpi	r24, 0xCC	; 204
    1ef2:	09 f0       	breq	.+2      	; 0x1ef6 <MC1_setPassword+0x2aa>
    1ef4:	7c c0       	rjmp	.+248    	; 0x1fee <MC1_setPassword+0x3a2>
	{
		/*if match terminate the function*/
		LCD_clearScreen();
    1ef6:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"Password is set ");
    1efa:	29 eb       	ldi	r18, 0xB9	; 185
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	a9 01       	movw	r20, r18
    1f04:	0e 94 11 1a 	call	0x3422	; 0x3422 <LCD_displayStringRowColumn>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e8       	ldi	r25, 0x80	; 128
    1f0c:	ab e3       	ldi	r26, 0x3B	; 59
    1f0e:	b5 e4       	ldi	r27, 0x45	; 69
    1f10:	8b 87       	std	Y+11, r24	; 0x0b
    1f12:	9c 87       	std	Y+12, r25	; 0x0c
    1f14:	ad 87       	std	Y+13, r26	; 0x0d
    1f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a e7       	ldi	r20, 0x7A	; 122
    1f26:	53 e4       	ldi	r21, 0x43	; 67
    1f28:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	8f 83       	std	Y+7, r24	; 0x07
    1f32:	98 87       	std	Y+8, r25	; 0x08
    1f34:	a9 87       	std	Y+9, r26	; 0x09
    1f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <MC1_setPassword+0x30e>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <MC1_setPassword+0x38c>
	else if (__tmp > 65535)
    1f5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f5c:	78 85       	ldd	r23, Y+8	; 0x08
    1f5e:	89 85       	ldd	r24, Y+9	; 0x09
    1f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <MC1_setPassword+0x378>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9e 83       	std	Y+6, r25	; 0x06
    1f98:	8d 83       	std	Y+5, r24	; 0x05
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <MC1_setPassword+0x36e>
    1f9c:	89 e1       	ldi	r24, 0x19	; 25
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9c 83       	std	Y+4, r25	; 0x04
    1fa2:	8b 83       	std	Y+3, r24	; 0x03
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <MC1_setPassword+0x35c>
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9e 83       	std	Y+6, r25	; 0x06
    1fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <MC1_setPassword+0x350>
    1fc2:	1b c0       	rjmp	.+54     	; 0x1ffa <MC1_setPassword+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc6:	78 85       	ldd	r23, Y+8	; 0x08
    1fc8:	89 85       	ldd	r24, Y+9	; 0x09
    1fca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fcc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fda:	9e 81       	ldd	r25, Y+6	; 0x06
    1fdc:	9a 83       	std	Y+2, r25	; 0x02
    1fde:	89 83       	std	Y+1, r24	; 0x01
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <MC1_setPassword+0x398>
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <MC1_setPassword+0x3ae>
		_delay_ms(3000);
	}
	else if(MISMATCH==g_displayMessage)
    1fee:	80 91 08 02 	lds	r24, 0x0208
    1ff2:	8e 3e       	cpi	r24, 0xEE	; 238
    1ff4:	11 f4       	brne	.+4      	; 0x1ffa <MC1_setPassword+0x3ae>
	{
		/*if mismatch call the same function to try again*/
		MC1_setPassword();
    1ff6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <MC1_setPassword>
	}
}
    1ffa:	ac 96       	adiw	r28, 0x2c	; 44
    1ffc:	0f b6       	in	r0, 0x3f	; 63
    1ffe:	f8 94       	cli
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	cd bf       	out	0x3d, r28	; 61
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	08 95       	ret

00002010 <MC1_mainOptions>:
 * Description: this function takes the chosen action from the user
 * 				and send it to the CONTROL_ECU through the UART
 */

void MC1_mainOptions(void)
{
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	2f 97       	sbiw	r28, 0x0f	; 15
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
	uint8 key;/*variable to save the user choice*/
	LCD_clearScreen();
    2024:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+: Open Door");
    2028:	2a ec       	ldi	r18, 0xCA	; 202
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	0e 94 11 1a 	call	0x3422	; 0x3422 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-: Change Pass");
    2036:	27 ed       	ldi	r18, 0xD7	; 215
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	60 e0       	ldi	r22, 0x00	; 0
    203e:	a9 01       	movw	r20, r18
    2040:	0e 94 11 1a 	call	0x3422	; 0x3422 <LCD_displayStringRowColumn>
	key=KEYPAD_getPressedKey();/*user enter the desired choice*/
    2044:	0e 94 a1 14 	call	0x2942	; 0x2942 <KEYPAD_getPressedKey>
    2048:	8f 87       	std	Y+15, r24	; 0x0f
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e8       	ldi	r25, 0x80	; 128
    204e:	ab e3       	ldi	r26, 0x3B	; 59
    2050:	b5 e4       	ldi	r27, 0x45	; 69
    2052:	8b 87       	std	Y+11, r24	; 0x0b
    2054:	9c 87       	std	Y+12, r25	; 0x0c
    2056:	ad 87       	std	Y+13, r26	; 0x0d
    2058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a e7       	ldi	r20, 0x7A	; 122
    2068:	53 e4       	ldi	r21, 0x43	; 67
    206a:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8f 83       	std	Y+7, r24	; 0x07
    2074:	98 87       	std	Y+8, r25	; 0x08
    2076:	a9 87       	std	Y+9, r26	; 0x09
    2078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    207a:	6f 81       	ldd	r22, Y+7	; 0x07
    207c:	78 85       	ldd	r23, Y+8	; 0x08
    207e:	89 85       	ldd	r24, Y+9	; 0x09
    2080:	9a 85       	ldd	r25, Y+10	; 0x0a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <MC1_mainOptions+0x8c>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9e 83       	std	Y+6, r25	; 0x06
    2098:	8d 83       	std	Y+5, r24	; 0x05
    209a:	3f c0       	rjmp	.+126    	; 0x211a <MC1_mainOptions+0x10a>
	else if (__tmp > 65535)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <MC1_mainOptions+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <MC1_mainOptions+0xec>
    20de:	89 e1       	ldi	r24, 0x19	; 25
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	8b 81       	ldd	r24, Y+3	; 0x03
    20e8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <MC1_mainOptions+0xda>
    20ee:	9c 83       	std	Y+4, r25	; 0x04
    20f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	8d 81       	ldd	r24, Y+5	; 0x05
    20f4:	9e 81       	ldd	r25, Y+6	; 0x06
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9e 83       	std	Y+6, r25	; 0x06
    20fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	8d 81       	ldd	r24, Y+5	; 0x05
    20fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <MC1_mainOptions+0xce>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <MC1_mainOptions+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6f 81       	ldd	r22, Y+7	; 0x07
    2108:	78 85       	ldd	r23, Y+8	; 0x08
    210a:	89 85       	ldd	r24, Y+9	; 0x09
    210c:	9a 85       	ldd	r25, Y+10	; 0x0a
    210e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	8d 81       	ldd	r24, Y+5	; 0x05
    211c:	9e 81       	ldd	r25, Y+6	; 0x06
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <MC1_mainOptions+0x116>
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000); /*delay for press time*/
	/*if condition to check what does the user entered
	 * and send it to CONTROL_ECU to take action*/
	if(!(key=='+'||key=='-'))
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	8b 32       	cpi	r24, 0x2B	; 43
    2132:	31 f0       	breq	.+12     	; 0x2140 <MC1_mainOptions+0x130>
    2134:	8f 85       	ldd	r24, Y+15	; 0x0f
    2136:	8d 32       	cpi	r24, 0x2D	; 45
    2138:	19 f0       	breq	.+6      	; 0x2140 <MC1_mainOptions+0x130>
	{
		/*if the pressed key is not + or - then the user must try again*/
		MC1_mainOptions();
    213a:	0e 94 08 10 	call	0x2010	; 0x2010 <MC1_mainOptions>
    213e:	03 c0       	rjmp	.+6      	; 0x2146 <MC1_mainOptions+0x136>
	}
	else
	{
		/*if the password is correct then send the character to CONTROL_ECU*/
		UART_sendByte(key);
    2140:	8f 85       	ldd	r24, Y+15	; 0x0f
    2142:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <UART_sendByte>
	}
}
    2146:	2f 96       	adiw	r28, 0x0f	; 15
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	08 95       	ret

00002158 <MC1_enterPassword>:
 * Description:	takes password from user and send it to the UART to compare it
 * 				with one saved in the EEPROM
 */

void MC1_enterPassword()
{
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	df 93       	push	r29
    215e:	cf 93       	push	r28
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	2f 97       	sbiw	r28, 0x0f	; 15
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    2170:	0e 94 4d 1a 	call	0x349a	; 0x349a <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter password");
    2174:	26 ee       	ldi	r18, 0xE6	; 230
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	a9 01       	movw	r20, r18
    217e:	0e 94 11 1a 	call	0x3422	; 0x3422 <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0);
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
	/*get the password from the user and save it in an array*/
	for(uint8 i =0;i<PASS_LENGTH;i++)
    218a:	1f 86       	std	Y+15, r1	; 0x0f
    218c:	8d c0       	rjmp	.+282    	; 0x22a8 <MC1_enterPassword+0x150>
	{
		g_Password[i]=KEYPAD_getPressedKey();
    218e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2190:	08 2f       	mov	r16, r24
    2192:	10 e0       	ldi	r17, 0x00	; 0
    2194:	0e 94 a1 14 	call	0x2942	; 0x2942 <KEYPAD_getPressedKey>
    2198:	f8 01       	movw	r30, r16
    219a:	e7 5f       	subi	r30, 0xF7	; 247
    219c:	fd 4f       	sbci	r31, 0xFD	; 253
    219e:	80 83       	st	Z, r24
		if(i<PASS_LENGTH)
    21a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a2:	85 30       	cpi	r24, 0x05	; 5
    21a4:	60 f4       	brcc	.+24     	; 0x21be <MC1_enterPassword+0x66>
		{
			 /*display * for each entered character*/
			LCD_displayCharacter('*');
    21a6:	8a e2       	ldi	r24, 0x2A	; 42
    21a8:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_displayCharacter>
			/*send the first password to CONTROL_ECU*/
			UART_sendByte(g_Password[i]);
    21ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ae:	88 2f       	mov	r24, r24
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	fc 01       	movw	r30, r24
    21b4:	e7 5f       	subi	r30, 0xF7	; 247
    21b6:	fd 4f       	sbci	r31, 0xFD	; 253
    21b8:	80 81       	ld	r24, Z
    21ba:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <UART_sendByte>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e8       	ldi	r25, 0x80	; 128
    21c2:	ab e3       	ldi	r26, 0x3B	; 59
    21c4:	b5 e4       	ldi	r27, 0x45	; 69
    21c6:	8b 87       	std	Y+11, r24	; 0x0b
    21c8:	9c 87       	std	Y+12, r25	; 0x0c
    21ca:	ad 87       	std	Y+13, r26	; 0x0d
    21cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	4a e7       	ldi	r20, 0x7A	; 122
    21dc:	53 e4       	ldi	r21, 0x43	; 67
    21de:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	8f 83       	std	Y+7, r24	; 0x07
    21e8:	98 87       	std	Y+8, r25	; 0x08
    21ea:	a9 87       	std	Y+9, r26	; 0x09
    21ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ee:	6f 81       	ldd	r22, Y+7	; 0x07
    21f0:	78 85       	ldd	r23, Y+8	; 0x08
    21f2:	89 85       	ldd	r24, Y+9	; 0x09
    21f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	2c f4       	brge	.+10     	; 0x2210 <MC1_enterPassword+0xb8>
		__ticks = 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	3f c0       	rjmp	.+126    	; 0x228e <MC1_enterPassword+0x136>
	else if (__tmp > 65535)
    2210:	6f 81       	ldd	r22, Y+7	; 0x07
    2212:	78 85       	ldd	r23, Y+8	; 0x08
    2214:	89 85       	ldd	r24, Y+9	; 0x09
    2216:	9a 85       	ldd	r25, Y+10	; 0x0a
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	3f ef       	ldi	r19, 0xFF	; 255
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	57 e4       	ldi	r21, 0x47	; 71
    2220:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	4c f5       	brge	.+82     	; 0x227a <MC1_enterPassword+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2228:	6b 85       	ldd	r22, Y+11	; 0x0b
    222a:	7c 85       	ldd	r23, Y+12	; 0x0c
    222c:	8d 85       	ldd	r24, Y+13	; 0x0d
    222e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e2       	ldi	r20, 0x20	; 32
    2236:	51 e4       	ldi	r21, 0x41	; 65
    2238:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	bc 01       	movw	r22, r24
    2242:	cd 01       	movw	r24, r26
    2244:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	9e 83       	std	Y+6, r25	; 0x06
    224e:	8d 83       	std	Y+5, r24	; 0x05
    2250:	0f c0       	rjmp	.+30     	; 0x2270 <MC1_enterPassword+0x118>
    2252:	89 e1       	ldi	r24, 0x19	; 25
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	9c 83       	std	Y+4, r25	; 0x04
    2258:	8b 83       	std	Y+3, r24	; 0x03
    225a:	8b 81       	ldd	r24, Y+3	; 0x03
    225c:	9c 81       	ldd	r25, Y+4	; 0x04
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <MC1_enterPassword+0x106>
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	9e 81       	ldd	r25, Y+6	; 0x06
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2270:	8d 81       	ldd	r24, Y+5	; 0x05
    2272:	9e 81       	ldd	r25, Y+6	; 0x06
    2274:	00 97       	sbiw	r24, 0x00	; 0
    2276:	69 f7       	brne	.-38     	; 0x2252 <MC1_enterPassword+0xfa>
    2278:	14 c0       	rjmp	.+40     	; 0x22a2 <MC1_enterPassword+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227a:	6f 81       	ldd	r22, Y+7	; 0x07
    227c:	78 85       	ldd	r23, Y+8	; 0x08
    227e:	89 85       	ldd	r24, Y+9	; 0x09
    2280:	9a 85       	ldd	r25, Y+10	; 0x0a
    2282:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	9e 83       	std	Y+6, r25	; 0x06
    228c:	8d 83       	std	Y+5, r24	; 0x05
    228e:	8d 81       	ldd	r24, Y+5	; 0x05
    2290:	9e 81       	ldd	r25, Y+6	; 0x06
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	89 81       	ldd	r24, Y+1	; 0x01
    2298:	9a 81       	ldd	r25, Y+2	; 0x02
    229a:	01 97       	sbiw	r24, 0x01	; 1
    229c:	f1 f7       	brne	.-4      	; 0x229a <MC1_enterPassword+0x142>
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
{
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter password");
	LCD_moveCursor(1,0);
	/*get the password from the user and save it in an array*/
	for(uint8 i =0;i<PASS_LENGTH;i++)
    22a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	8f 87       	std	Y+15, r24	; 0x0f
    22a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22aa:	85 30       	cpi	r24, 0x05	; 5
    22ac:	08 f4       	brcc	.+2      	; 0x22b0 <MC1_enterPassword+0x158>
    22ae:	6f cf       	rjmp	.-290    	; 0x218e <MC1_enterPassword+0x36>
			/*send the first password to CONTROL_ECU*/
			UART_sendByte(g_Password[i]);
		}
		_delay_ms(3000); /*delay for Press time */
	}
}
    22b0:	2f 96       	adiw	r28, 0x0f	; 15
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	1f 91       	pop	r17
    22c2:	0f 91       	pop	r16
    22c4:	08 95       	ret

000022c6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	00 d0       	rcall	.+0      	; 0x22cc <GPIO_setupPinDirection+0x6>
    22cc:	00 d0       	rcall	.+0      	; 0x22ce <GPIO_setupPinDirection+0x8>
    22ce:	0f 92       	push	r0
    22d0:	cd b7       	in	r28, 0x3d	; 61
    22d2:	de b7       	in	r29, 0x3e	; 62
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	6a 83       	std	Y+2, r22	; 0x02
    22d8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	88 30       	cpi	r24, 0x08	; 8
    22de:	08 f0       	brcs	.+2      	; 0x22e2 <GPIO_setupPinDirection+0x1c>
    22e0:	d5 c0       	rjmp	.+426    	; 0x248c <GPIO_setupPinDirection+0x1c6>
    22e2:	89 81       	ldd	r24, Y+1	; 0x01
    22e4:	84 30       	cpi	r24, 0x04	; 4
    22e6:	08 f0       	brcs	.+2      	; 0x22ea <GPIO_setupPinDirection+0x24>
    22e8:	d1 c0       	rjmp	.+418    	; 0x248c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	28 2f       	mov	r18, r24
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	3d 83       	std	Y+5, r19	; 0x05
    22f2:	2c 83       	std	Y+4, r18	; 0x04
    22f4:	8c 81       	ldd	r24, Y+4	; 0x04
    22f6:	9d 81       	ldd	r25, Y+5	; 0x05
    22f8:	81 30       	cpi	r24, 0x01	; 1
    22fa:	91 05       	cpc	r25, r1
    22fc:	09 f4       	brne	.+2      	; 0x2300 <GPIO_setupPinDirection+0x3a>
    22fe:	43 c0       	rjmp	.+134    	; 0x2386 <GPIO_setupPinDirection+0xc0>
    2300:	2c 81       	ldd	r18, Y+4	; 0x04
    2302:	3d 81       	ldd	r19, Y+5	; 0x05
    2304:	22 30       	cpi	r18, 0x02	; 2
    2306:	31 05       	cpc	r19, r1
    2308:	2c f4       	brge	.+10     	; 0x2314 <GPIO_setupPinDirection+0x4e>
    230a:	8c 81       	ldd	r24, Y+4	; 0x04
    230c:	9d 81       	ldd	r25, Y+5	; 0x05
    230e:	00 97       	sbiw	r24, 0x00	; 0
    2310:	71 f0       	breq	.+28     	; 0x232e <GPIO_setupPinDirection+0x68>
    2312:	bc c0       	rjmp	.+376    	; 0x248c <GPIO_setupPinDirection+0x1c6>
    2314:	2c 81       	ldd	r18, Y+4	; 0x04
    2316:	3d 81       	ldd	r19, Y+5	; 0x05
    2318:	22 30       	cpi	r18, 0x02	; 2
    231a:	31 05       	cpc	r19, r1
    231c:	09 f4       	brne	.+2      	; 0x2320 <GPIO_setupPinDirection+0x5a>
    231e:	5f c0       	rjmp	.+190    	; 0x23de <GPIO_setupPinDirection+0x118>
    2320:	8c 81       	ldd	r24, Y+4	; 0x04
    2322:	9d 81       	ldd	r25, Y+5	; 0x05
    2324:	83 30       	cpi	r24, 0x03	; 3
    2326:	91 05       	cpc	r25, r1
    2328:	09 f4       	brne	.+2      	; 0x232c <GPIO_setupPinDirection+0x66>
    232a:	85 c0       	rjmp	.+266    	; 0x2436 <GPIO_setupPinDirection+0x170>
    232c:	af c0       	rjmp	.+350    	; 0x248c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	81 30       	cpi	r24, 0x01	; 1
    2332:	a1 f4       	brne	.+40     	; 0x235c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    2334:	aa e3       	ldi	r26, 0x3A	; 58
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	ea e3       	ldi	r30, 0x3A	; 58
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	48 2f       	mov	r20, r24
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	02 2e       	mov	r0, r18
    234c:	02 c0       	rjmp	.+4      	; 0x2352 <GPIO_setupPinDirection+0x8c>
    234e:	88 0f       	add	r24, r24
    2350:	99 1f       	adc	r25, r25
    2352:	0a 94       	dec	r0
    2354:	e2 f7       	brpl	.-8      	; 0x234e <GPIO_setupPinDirection+0x88>
    2356:	84 2b       	or	r24, r20
    2358:	8c 93       	st	X, r24
    235a:	98 c0       	rjmp	.+304    	; 0x248c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    235c:	aa e3       	ldi	r26, 0x3A	; 58
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	ea e3       	ldi	r30, 0x3A	; 58
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	48 2f       	mov	r20, r24
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	02 2e       	mov	r0, r18
    2374:	02 c0       	rjmp	.+4      	; 0x237a <GPIO_setupPinDirection+0xb4>
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	0a 94       	dec	r0
    237c:	e2 f7       	brpl	.-8      	; 0x2376 <GPIO_setupPinDirection+0xb0>
    237e:	80 95       	com	r24
    2380:	84 23       	and	r24, r20
    2382:	8c 93       	st	X, r24
    2384:	83 c0       	rjmp	.+262    	; 0x248c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	a1 f4       	brne	.+40     	; 0x23b4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    238c:	a7 e3       	ldi	r26, 0x37	; 55
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e7 e3       	ldi	r30, 0x37	; 55
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	48 2f       	mov	r20, r24
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	02 2e       	mov	r0, r18
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <GPIO_setupPinDirection+0xe4>
    23a6:	88 0f       	add	r24, r24
    23a8:	99 1f       	adc	r25, r25
    23aa:	0a 94       	dec	r0
    23ac:	e2 f7       	brpl	.-8      	; 0x23a6 <GPIO_setupPinDirection+0xe0>
    23ae:	84 2b       	or	r24, r20
    23b0:	8c 93       	st	X, r24
    23b2:	6c c0       	rjmp	.+216    	; 0x248c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    23b4:	a7 e3       	ldi	r26, 0x37	; 55
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e7 e3       	ldi	r30, 0x37	; 55
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <GPIO_setupPinDirection+0x10c>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <GPIO_setupPinDirection+0x108>
    23d6:	80 95       	com	r24
    23d8:	84 23       	and	r24, r20
    23da:	8c 93       	st	X, r24
    23dc:	57 c0       	rjmp	.+174    	; 0x248c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	a1 f4       	brne	.+40     	; 0x240c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    23e4:	a4 e3       	ldi	r26, 0x34	; 52
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e4 e3       	ldi	r30, 0x34	; 52
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	48 2f       	mov	r20, r24
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 2e       	mov	r0, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <GPIO_setupPinDirection+0x13c>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	0a 94       	dec	r0
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <GPIO_setupPinDirection+0x138>
    2406:	84 2b       	or	r24, r20
    2408:	8c 93       	st	X, r24
    240a:	40 c0       	rjmp	.+128    	; 0x248c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    240c:	a4 e3       	ldi	r26, 0x34	; 52
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e4 e3       	ldi	r30, 0x34	; 52
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	48 2f       	mov	r20, r24
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	02 2e       	mov	r0, r18
    2424:	02 c0       	rjmp	.+4      	; 0x242a <GPIO_setupPinDirection+0x164>
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	0a 94       	dec	r0
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <GPIO_setupPinDirection+0x160>
    242e:	80 95       	com	r24
    2430:	84 23       	and	r24, r20
    2432:	8c 93       	st	X, r24
    2434:	2b c0       	rjmp	.+86     	; 0x248c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    2436:	8b 81       	ldd	r24, Y+3	; 0x03
    2438:	81 30       	cpi	r24, 0x01	; 1
    243a:	a1 f4       	brne	.+40     	; 0x2464 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    243c:	a1 e3       	ldi	r26, 0x31	; 49
    243e:	b0 e0       	ldi	r27, 0x00	; 0
    2440:	e1 e3       	ldi	r30, 0x31	; 49
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	80 81       	ld	r24, Z
    2446:	48 2f       	mov	r20, r24
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	02 2e       	mov	r0, r18
    2454:	02 c0       	rjmp	.+4      	; 0x245a <GPIO_setupPinDirection+0x194>
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	0a 94       	dec	r0
    245c:	e2 f7       	brpl	.-8      	; 0x2456 <GPIO_setupPinDirection+0x190>
    245e:	84 2b       	or	r24, r20
    2460:	8c 93       	st	X, r24
    2462:	14 c0       	rjmp	.+40     	; 0x248c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    2464:	a1 e3       	ldi	r26, 0x31	; 49
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e1 e3       	ldi	r30, 0x31	; 49
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	48 2f       	mov	r20, r24
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	02 2e       	mov	r0, r18
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <GPIO_setupPinDirection+0x1bc>
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	0a 94       	dec	r0
    2484:	e2 f7       	brpl	.-8      	; 0x247e <GPIO_setupPinDirection+0x1b8>
    2486:	80 95       	com	r24
    2488:	84 23       	and	r24, r20
    248a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <GPIO_writePin+0x6>
    24a2:	00 d0       	rcall	.+0      	; 0x24a4 <GPIO_writePin+0x8>
    24a4:	0f 92       	push	r0
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	89 83       	std	Y+1, r24	; 0x01
    24ac:	6a 83       	std	Y+2, r22	; 0x02
    24ae:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	88 30       	cpi	r24, 0x08	; 8
    24b4:	08 f0       	brcs	.+2      	; 0x24b8 <GPIO_writePin+0x1c>
    24b6:	d5 c0       	rjmp	.+426    	; 0x2662 <GPIO_writePin+0x1c6>
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	84 30       	cpi	r24, 0x04	; 4
    24bc:	08 f0       	brcs	.+2      	; 0x24c0 <GPIO_writePin+0x24>
    24be:	d1 c0       	rjmp	.+418    	; 0x2662 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	28 2f       	mov	r18, r24
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	3d 83       	std	Y+5, r19	; 0x05
    24c8:	2c 83       	std	Y+4, r18	; 0x04
    24ca:	8c 81       	ldd	r24, Y+4	; 0x04
    24cc:	9d 81       	ldd	r25, Y+5	; 0x05
    24ce:	81 30       	cpi	r24, 0x01	; 1
    24d0:	91 05       	cpc	r25, r1
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <GPIO_writePin+0x3a>
    24d4:	43 c0       	rjmp	.+134    	; 0x255c <GPIO_writePin+0xc0>
    24d6:	2c 81       	ldd	r18, Y+4	; 0x04
    24d8:	3d 81       	ldd	r19, Y+5	; 0x05
    24da:	22 30       	cpi	r18, 0x02	; 2
    24dc:	31 05       	cpc	r19, r1
    24de:	2c f4       	brge	.+10     	; 0x24ea <GPIO_writePin+0x4e>
    24e0:	8c 81       	ldd	r24, Y+4	; 0x04
    24e2:	9d 81       	ldd	r25, Y+5	; 0x05
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	71 f0       	breq	.+28     	; 0x2504 <GPIO_writePin+0x68>
    24e8:	bc c0       	rjmp	.+376    	; 0x2662 <GPIO_writePin+0x1c6>
    24ea:	2c 81       	ldd	r18, Y+4	; 0x04
    24ec:	3d 81       	ldd	r19, Y+5	; 0x05
    24ee:	22 30       	cpi	r18, 0x02	; 2
    24f0:	31 05       	cpc	r19, r1
    24f2:	09 f4       	brne	.+2      	; 0x24f6 <GPIO_writePin+0x5a>
    24f4:	5f c0       	rjmp	.+190    	; 0x25b4 <GPIO_writePin+0x118>
    24f6:	8c 81       	ldd	r24, Y+4	; 0x04
    24f8:	9d 81       	ldd	r25, Y+5	; 0x05
    24fa:	83 30       	cpi	r24, 0x03	; 3
    24fc:	91 05       	cpc	r25, r1
    24fe:	09 f4       	brne	.+2      	; 0x2502 <GPIO_writePin+0x66>
    2500:	85 c0       	rjmp	.+266    	; 0x260c <GPIO_writePin+0x170>
    2502:	af c0       	rjmp	.+350    	; 0x2662 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	81 30       	cpi	r24, 0x01	; 1
    2508:	a1 f4       	brne	.+40     	; 0x2532 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    250a:	ab e3       	ldi	r26, 0x3B	; 59
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	eb e3       	ldi	r30, 0x3B	; 59
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	48 2f       	mov	r20, r24
    2516:	8a 81       	ldd	r24, Y+2	; 0x02
    2518:	28 2f       	mov	r18, r24
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	02 2e       	mov	r0, r18
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <GPIO_writePin+0x8c>
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	0a 94       	dec	r0
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <GPIO_writePin+0x88>
    252c:	84 2b       	or	r24, r20
    252e:	8c 93       	st	X, r24
    2530:	98 c0       	rjmp	.+304    	; 0x2662 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2532:	ab e3       	ldi	r26, 0x3B	; 59
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	eb e3       	ldi	r30, 0x3B	; 59
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	48 2f       	mov	r20, r24
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	02 2e       	mov	r0, r18
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <GPIO_writePin+0xb4>
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	0a 94       	dec	r0
    2552:	e2 f7       	brpl	.-8      	; 0x254c <GPIO_writePin+0xb0>
    2554:	80 95       	com	r24
    2556:	84 23       	and	r24, r20
    2558:	8c 93       	st	X, r24
    255a:	83 c0       	rjmp	.+262    	; 0x2662 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	a1 f4       	brne	.+40     	; 0x258a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2562:	a8 e3       	ldi	r26, 0x38	; 56
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	e8 e3       	ldi	r30, 0x38	; 56
    2568:	f0 e0       	ldi	r31, 0x00	; 0
    256a:	80 81       	ld	r24, Z
    256c:	48 2f       	mov	r20, r24
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	02 2e       	mov	r0, r18
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <GPIO_writePin+0xe4>
    257c:	88 0f       	add	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	0a 94       	dec	r0
    2582:	e2 f7       	brpl	.-8      	; 0x257c <GPIO_writePin+0xe0>
    2584:	84 2b       	or	r24, r20
    2586:	8c 93       	st	X, r24
    2588:	6c c0       	rjmp	.+216    	; 0x2662 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    258a:	a8 e3       	ldi	r26, 0x38	; 56
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e8 e3       	ldi	r30, 0x38	; 56
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	48 2f       	mov	r20, r24
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	02 2e       	mov	r0, r18
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <GPIO_writePin+0x10c>
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	0a 94       	dec	r0
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <GPIO_writePin+0x108>
    25ac:	80 95       	com	r24
    25ae:	84 23       	and	r24, r20
    25b0:	8c 93       	st	X, r24
    25b2:	57 c0       	rjmp	.+174    	; 0x2662 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	81 30       	cpi	r24, 0x01	; 1
    25b8:	a1 f4       	brne	.+40     	; 0x25e2 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    25ba:	a5 e3       	ldi	r26, 0x35	; 53
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e5 e3       	ldi	r30, 0x35	; 53
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	48 2f       	mov	r20, r24
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	28 2f       	mov	r18, r24
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	02 2e       	mov	r0, r18
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <GPIO_writePin+0x13c>
    25d4:	88 0f       	add	r24, r24
    25d6:	99 1f       	adc	r25, r25
    25d8:	0a 94       	dec	r0
    25da:	e2 f7       	brpl	.-8      	; 0x25d4 <GPIO_writePin+0x138>
    25dc:	84 2b       	or	r24, r20
    25de:	8c 93       	st	X, r24
    25e0:	40 c0       	rjmp	.+128    	; 0x2662 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    25e2:	a5 e3       	ldi	r26, 0x35	; 53
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e5 e3       	ldi	r30, 0x35	; 53
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <GPIO_writePin+0x164>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	0a 94       	dec	r0
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <GPIO_writePin+0x160>
    2604:	80 95       	com	r24
    2606:	84 23       	and	r24, r20
    2608:	8c 93       	st	X, r24
    260a:	2b c0       	rjmp	.+86     	; 0x2662 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	81 30       	cpi	r24, 0x01	; 1
    2610:	a1 f4       	brne	.+40     	; 0x263a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2612:	a2 e3       	ldi	r26, 0x32	; 50
    2614:	b0 e0       	ldi	r27, 0x00	; 0
    2616:	e2 e3       	ldi	r30, 0x32	; 50
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	80 81       	ld	r24, Z
    261c:	48 2f       	mov	r20, r24
    261e:	8a 81       	ldd	r24, Y+2	; 0x02
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	02 2e       	mov	r0, r18
    262a:	02 c0       	rjmp	.+4      	; 0x2630 <GPIO_writePin+0x194>
    262c:	88 0f       	add	r24, r24
    262e:	99 1f       	adc	r25, r25
    2630:	0a 94       	dec	r0
    2632:	e2 f7       	brpl	.-8      	; 0x262c <GPIO_writePin+0x190>
    2634:	84 2b       	or	r24, r20
    2636:	8c 93       	st	X, r24
    2638:	14 c0       	rjmp	.+40     	; 0x2662 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    263a:	a2 e3       	ldi	r26, 0x32	; 50
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e2 e3       	ldi	r30, 0x32	; 50
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	48 2f       	mov	r20, r24
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	02 2e       	mov	r0, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <GPIO_writePin+0x1bc>
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	0a 94       	dec	r0
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <GPIO_writePin+0x1b8>
    265c:	80 95       	com	r24
    265e:	84 23       	and	r24, r20
    2660:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2662:	0f 90       	pop	r0
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <GPIO_readPin+0x6>
    2678:	00 d0       	rcall	.+0      	; 0x267a <GPIO_readPin+0x8>
    267a:	0f 92       	push	r0
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	8a 83       	std	Y+2, r24	; 0x02
    2682:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2684:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	88 30       	cpi	r24, 0x08	; 8
    268a:	08 f0       	brcs	.+2      	; 0x268e <GPIO_readPin+0x1c>
    268c:	84 c0       	rjmp	.+264    	; 0x2796 <GPIO_readPin+0x124>
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	84 30       	cpi	r24, 0x04	; 4
    2692:	08 f0       	brcs	.+2      	; 0x2696 <GPIO_readPin+0x24>
    2694:	80 c0       	rjmp	.+256    	; 0x2796 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	3d 83       	std	Y+5, r19	; 0x05
    269e:	2c 83       	std	Y+4, r18	; 0x04
    26a0:	4c 81       	ldd	r20, Y+4	; 0x04
    26a2:	5d 81       	ldd	r21, Y+5	; 0x05
    26a4:	41 30       	cpi	r20, 0x01	; 1
    26a6:	51 05       	cpc	r21, r1
    26a8:	79 f1       	breq	.+94     	; 0x2708 <GPIO_readPin+0x96>
    26aa:	8c 81       	ldd	r24, Y+4	; 0x04
    26ac:	9d 81       	ldd	r25, Y+5	; 0x05
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	91 05       	cpc	r25, r1
    26b2:	34 f4       	brge	.+12     	; 0x26c0 <GPIO_readPin+0x4e>
    26b4:	2c 81       	ldd	r18, Y+4	; 0x04
    26b6:	3d 81       	ldd	r19, Y+5	; 0x05
    26b8:	21 15       	cp	r18, r1
    26ba:	31 05       	cpc	r19, r1
    26bc:	69 f0       	breq	.+26     	; 0x26d8 <GPIO_readPin+0x66>
    26be:	6b c0       	rjmp	.+214    	; 0x2796 <GPIO_readPin+0x124>
    26c0:	4c 81       	ldd	r20, Y+4	; 0x04
    26c2:	5d 81       	ldd	r21, Y+5	; 0x05
    26c4:	42 30       	cpi	r20, 0x02	; 2
    26c6:	51 05       	cpc	r21, r1
    26c8:	b9 f1       	breq	.+110    	; 0x2738 <GPIO_readPin+0xc6>
    26ca:	8c 81       	ldd	r24, Y+4	; 0x04
    26cc:	9d 81       	ldd	r25, Y+5	; 0x05
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	91 05       	cpc	r25, r1
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <GPIO_readPin+0x64>
    26d4:	49 c0       	rjmp	.+146    	; 0x2768 <GPIO_readPin+0xf6>
    26d6:	5f c0       	rjmp	.+190    	; 0x2796 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    26d8:	e9 e3       	ldi	r30, 0x39	; 57
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	28 2f       	mov	r18, r24
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	88 2f       	mov	r24, r24
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	a9 01       	movw	r20, r18
    26ea:	02 c0       	rjmp	.+4      	; 0x26f0 <GPIO_readPin+0x7e>
    26ec:	55 95       	asr	r21
    26ee:	47 95       	ror	r20
    26f0:	8a 95       	dec	r24
    26f2:	e2 f7       	brpl	.-8      	; 0x26ec <GPIO_readPin+0x7a>
    26f4:	ca 01       	movw	r24, r20
    26f6:	81 70       	andi	r24, 0x01	; 1
    26f8:	90 70       	andi	r25, 0x00	; 0
    26fa:	88 23       	and	r24, r24
    26fc:	19 f0       	breq	.+6      	; 0x2704 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	49 c0       	rjmp	.+146    	; 0x2796 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2704:	19 82       	std	Y+1, r1	; 0x01
    2706:	47 c0       	rjmp	.+142    	; 0x2796 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2708:	e6 e3       	ldi	r30, 0x36	; 54
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	a9 01       	movw	r20, r18
    271a:	02 c0       	rjmp	.+4      	; 0x2720 <GPIO_readPin+0xae>
    271c:	55 95       	asr	r21
    271e:	47 95       	ror	r20
    2720:	8a 95       	dec	r24
    2722:	e2 f7       	brpl	.-8      	; 0x271c <GPIO_readPin+0xaa>
    2724:	ca 01       	movw	r24, r20
    2726:	81 70       	andi	r24, 0x01	; 1
    2728:	90 70       	andi	r25, 0x00	; 0
    272a:	88 23       	and	r24, r24
    272c:	19 f0       	breq	.+6      	; 0x2734 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	89 83       	std	Y+1, r24	; 0x01
    2732:	31 c0       	rjmp	.+98     	; 0x2796 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2734:	19 82       	std	Y+1, r1	; 0x01
    2736:	2f c0       	rjmp	.+94     	; 0x2796 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2738:	e3 e3       	ldi	r30, 0x33	; 51
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a9 01       	movw	r20, r18
    274a:	02 c0       	rjmp	.+4      	; 0x2750 <GPIO_readPin+0xde>
    274c:	55 95       	asr	r21
    274e:	47 95       	ror	r20
    2750:	8a 95       	dec	r24
    2752:	e2 f7       	brpl	.-8      	; 0x274c <GPIO_readPin+0xda>
    2754:	ca 01       	movw	r24, r20
    2756:	81 70       	andi	r24, 0x01	; 1
    2758:	90 70       	andi	r25, 0x00	; 0
    275a:	88 23       	and	r24, r24
    275c:	19 f0       	breq	.+6      	; 0x2764 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	19 c0       	rjmp	.+50     	; 0x2796 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2764:	19 82       	std	Y+1, r1	; 0x01
    2766:	17 c0       	rjmp	.+46     	; 0x2796 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2768:	e0 e3       	ldi	r30, 0x30	; 48
    276a:	f0 e0       	ldi	r31, 0x00	; 0
    276c:	80 81       	ld	r24, Z
    276e:	28 2f       	mov	r18, r24
    2770:	30 e0       	ldi	r19, 0x00	; 0
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a9 01       	movw	r20, r18
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <GPIO_readPin+0x10e>
    277c:	55 95       	asr	r21
    277e:	47 95       	ror	r20
    2780:	8a 95       	dec	r24
    2782:	e2 f7       	brpl	.-8      	; 0x277c <GPIO_readPin+0x10a>
    2784:	ca 01       	movw	r24, r20
    2786:	81 70       	andi	r24, 0x01	; 1
    2788:	90 70       	andi	r25, 0x00	; 0
    278a:	88 23       	and	r24, r24
    278c:	19 f0       	breq	.+6      	; 0x2794 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2794:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2796:	89 81       	ldd	r24, Y+1	; 0x01
}
    2798:	0f 90       	pop	r0
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
    279e:	0f 90       	pop	r0
    27a0:	0f 90       	pop	r0
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	00 d0       	rcall	.+0      	; 0x27ae <GPIO_setupPortDirection+0x6>
    27ae:	00 d0       	rcall	.+0      	; 0x27b0 <GPIO_setupPortDirection+0x8>
    27b0:	cd b7       	in	r28, 0x3d	; 61
    27b2:	de b7       	in	r29, 0x3e	; 62
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	84 30       	cpi	r24, 0x04	; 4
    27bc:	90 f5       	brcc	.+100    	; 0x2822 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	28 2f       	mov	r18, r24
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	3c 83       	std	Y+4, r19	; 0x04
    27c6:	2b 83       	std	Y+3, r18	; 0x03
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	81 30       	cpi	r24, 0x01	; 1
    27ce:	91 05       	cpc	r25, r1
    27d0:	d1 f0       	breq	.+52     	; 0x2806 <GPIO_setupPortDirection+0x5e>
    27d2:	2b 81       	ldd	r18, Y+3	; 0x03
    27d4:	3c 81       	ldd	r19, Y+4	; 0x04
    27d6:	22 30       	cpi	r18, 0x02	; 2
    27d8:	31 05       	cpc	r19, r1
    27da:	2c f4       	brge	.+10     	; 0x27e6 <GPIO_setupPortDirection+0x3e>
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	00 97       	sbiw	r24, 0x00	; 0
    27e2:	61 f0       	breq	.+24     	; 0x27fc <GPIO_setupPortDirection+0x54>
    27e4:	1e c0       	rjmp	.+60     	; 0x2822 <GPIO_setupPortDirection+0x7a>
    27e6:	2b 81       	ldd	r18, Y+3	; 0x03
    27e8:	3c 81       	ldd	r19, Y+4	; 0x04
    27ea:	22 30       	cpi	r18, 0x02	; 2
    27ec:	31 05       	cpc	r19, r1
    27ee:	81 f0       	breq	.+32     	; 0x2810 <GPIO_setupPortDirection+0x68>
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	91 05       	cpc	r25, r1
    27f8:	81 f0       	breq	.+32     	; 0x281a <GPIO_setupPortDirection+0x72>
    27fa:	13 c0       	rjmp	.+38     	; 0x2822 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    27fc:	ea e3       	ldi	r30, 0x3A	; 58
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	80 83       	st	Z, r24
    2804:	0e c0       	rjmp	.+28     	; 0x2822 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2806:	e7 e3       	ldi	r30, 0x37	; 55
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	80 83       	st	Z, r24
    280e:	09 c0       	rjmp	.+18     	; 0x2822 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2810:	e4 e3       	ldi	r30, 0x34	; 52
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	8a 81       	ldd	r24, Y+2	; 0x02
    2816:	80 83       	st	Z, r24
    2818:	04 c0       	rjmp	.+8      	; 0x2822 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    281a:	e1 e3       	ldi	r30, 0x31	; 49
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	80 83       	st	Z, r24
			break;
		}
	}
}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <GPIO_writePort+0x6>
    2836:	00 d0       	rcall	.+0      	; 0x2838 <GPIO_writePort+0x8>
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	84 30       	cpi	r24, 0x04	; 4
    2844:	90 f5       	brcc	.+100    	; 0x28aa <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	3c 83       	std	Y+4, r19	; 0x04
    284e:	2b 83       	std	Y+3, r18	; 0x03
    2850:	8b 81       	ldd	r24, Y+3	; 0x03
    2852:	9c 81       	ldd	r25, Y+4	; 0x04
    2854:	81 30       	cpi	r24, 0x01	; 1
    2856:	91 05       	cpc	r25, r1
    2858:	d1 f0       	breq	.+52     	; 0x288e <GPIO_writePort+0x5e>
    285a:	2b 81       	ldd	r18, Y+3	; 0x03
    285c:	3c 81       	ldd	r19, Y+4	; 0x04
    285e:	22 30       	cpi	r18, 0x02	; 2
    2860:	31 05       	cpc	r19, r1
    2862:	2c f4       	brge	.+10     	; 0x286e <GPIO_writePort+0x3e>
    2864:	8b 81       	ldd	r24, Y+3	; 0x03
    2866:	9c 81       	ldd	r25, Y+4	; 0x04
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	61 f0       	breq	.+24     	; 0x2884 <GPIO_writePort+0x54>
    286c:	1e c0       	rjmp	.+60     	; 0x28aa <GPIO_writePort+0x7a>
    286e:	2b 81       	ldd	r18, Y+3	; 0x03
    2870:	3c 81       	ldd	r19, Y+4	; 0x04
    2872:	22 30       	cpi	r18, 0x02	; 2
    2874:	31 05       	cpc	r19, r1
    2876:	81 f0       	breq	.+32     	; 0x2898 <GPIO_writePort+0x68>
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	83 30       	cpi	r24, 0x03	; 3
    287e:	91 05       	cpc	r25, r1
    2880:	81 f0       	breq	.+32     	; 0x28a2 <GPIO_writePort+0x72>
    2882:	13 c0       	rjmp	.+38     	; 0x28aa <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2884:	eb e3       	ldi	r30, 0x3B	; 59
    2886:	f0 e0       	ldi	r31, 0x00	; 0
    2888:	8a 81       	ldd	r24, Y+2	; 0x02
    288a:	80 83       	st	Z, r24
    288c:	0e c0       	rjmp	.+28     	; 0x28aa <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    288e:	e8 e3       	ldi	r30, 0x38	; 56
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	8a 81       	ldd	r24, Y+2	; 0x02
    2894:	80 83       	st	Z, r24
    2896:	09 c0       	rjmp	.+18     	; 0x28aa <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2898:	e5 e3       	ldi	r30, 0x35	; 53
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	8a 81       	ldd	r24, Y+2	; 0x02
    289e:	80 83       	st	Z, r24
    28a0:	04 c0       	rjmp	.+8      	; 0x28aa <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    28a2:	e2 e3       	ldi	r30, 0x32	; 50
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <GPIO_readPort+0x6>
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <GPIO_readPort+0x8>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    28c6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	84 30       	cpi	r24, 0x04	; 4
    28cc:	90 f5       	brcc	.+100    	; 0x2932 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	28 2f       	mov	r18, r24
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	3c 83       	std	Y+4, r19	; 0x04
    28d6:	2b 83       	std	Y+3, r18	; 0x03
    28d8:	8b 81       	ldd	r24, Y+3	; 0x03
    28da:	9c 81       	ldd	r25, Y+4	; 0x04
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	91 05       	cpc	r25, r1
    28e0:	d1 f0       	breq	.+52     	; 0x2916 <GPIO_readPort+0x5e>
    28e2:	2b 81       	ldd	r18, Y+3	; 0x03
    28e4:	3c 81       	ldd	r19, Y+4	; 0x04
    28e6:	22 30       	cpi	r18, 0x02	; 2
    28e8:	31 05       	cpc	r19, r1
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <GPIO_readPort+0x3e>
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	9c 81       	ldd	r25, Y+4	; 0x04
    28f0:	00 97       	sbiw	r24, 0x00	; 0
    28f2:	61 f0       	breq	.+24     	; 0x290c <GPIO_readPort+0x54>
    28f4:	1e c0       	rjmp	.+60     	; 0x2932 <GPIO_readPort+0x7a>
    28f6:	2b 81       	ldd	r18, Y+3	; 0x03
    28f8:	3c 81       	ldd	r19, Y+4	; 0x04
    28fa:	22 30       	cpi	r18, 0x02	; 2
    28fc:	31 05       	cpc	r19, r1
    28fe:	81 f0       	breq	.+32     	; 0x2920 <GPIO_readPort+0x68>
    2900:	8b 81       	ldd	r24, Y+3	; 0x03
    2902:	9c 81       	ldd	r25, Y+4	; 0x04
    2904:	83 30       	cpi	r24, 0x03	; 3
    2906:	91 05       	cpc	r25, r1
    2908:	81 f0       	breq	.+32     	; 0x292a <GPIO_readPort+0x72>
    290a:	13 c0       	rjmp	.+38     	; 0x2932 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    290c:	e9 e3       	ldi	r30, 0x39	; 57
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	89 83       	std	Y+1, r24	; 0x01
    2914:	0e c0       	rjmp	.+28     	; 0x2932 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2916:	e6 e3       	ldi	r30, 0x36	; 54
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	89 83       	std	Y+1, r24	; 0x01
    291e:	09 c0       	rjmp	.+18     	; 0x2932 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2920:	e3 e3       	ldi	r30, 0x33	; 51
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	04 c0       	rjmp	.+8      	; 0x2932 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    292a:	e0 e3       	ldi	r30, 0x30	; 48
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2932:	89 81       	ldd	r24, Y+1	; 0x01
}
    2934:	0f 90       	pop	r0
    2936:	0f 90       	pop	r0
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <KEYPAD_getPressedKey+0x6>
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    294e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2950:	1b 82       	std	Y+3, r1	; 0x03
    2952:	43 c0       	rjmp	.+134    	; 0x29da <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    295c:	8b 81       	ldd	r24, Y+3	; 0x03
    295e:	98 2f       	mov	r25, r24
    2960:	9c 5f       	subi	r25, 0xFC	; 252
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	69 2f       	mov	r22, r25
    2966:	41 e0       	ldi	r20, 0x01	; 1
    2968:	0e 94 63 11 	call	0x22c6	; 0x22c6 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    296c:	8b 81       	ldd	r24, Y+3	; 0x03
    296e:	88 2f       	mov	r24, r24
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	9c 01       	movw	r18, r24
    2974:	2c 5f       	subi	r18, 0xFC	; 252
    2976:	3f 4f       	sbci	r19, 0xFF	; 255
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	02 c0       	rjmp	.+4      	; 0x2982 <KEYPAD_getPressedKey+0x40>
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	2a 95       	dec	r18
    2984:	e2 f7       	brpl	.-8      	; 0x297e <KEYPAD_getPressedKey+0x3c>
    2986:	80 95       	com	r24
    2988:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	69 81       	ldd	r22, Y+1	; 0x01
    298e:	0e 94 18 14 	call	0x2830	; 0x2830 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2992:	1a 82       	std	Y+2, r1	; 0x02
    2994:	1c c0       	rjmp	.+56     	; 0x29ce <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	6a 81       	ldd	r22, Y+2	; 0x02
    299a:	0e 94 39 13 	call	0x2672	; 0x2672 <GPIO_readPin>
    299e:	88 23       	and	r24, r24
    29a0:	99 f4       	brne	.+38     	; 0x29c8 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	88 2f       	mov	r24, r24
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	88 0f       	add	r24, r24
    29ae:	99 1f       	adc	r25, r25
    29b0:	98 2f       	mov	r25, r24
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	89 0f       	add	r24, r25
    29b6:	8f 5f       	subi	r24, 0xFF	; 255
    29b8:	0e 94 f2 14 	call	0x29e4	; 0x29e4 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    29bc:	0f 90       	pop	r0
    29be:	0f 90       	pop	r0
    29c0:	0f 90       	pop	r0
    29c2:	cf 91       	pop	r28
    29c4:	df 91       	pop	r29
    29c6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    29c8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ca:	8f 5f       	subi	r24, 0xFF	; 255
    29cc:	8a 83       	std	Y+2, r24	; 0x02
    29ce:	8a 81       	ldd	r24, Y+2	; 0x02
    29d0:	84 30       	cpi	r24, 0x04	; 4
    29d2:	08 f3       	brcs	.-62     	; 0x2996 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	8f 5f       	subi	r24, 0xFF	; 255
    29d8:	8b 83       	std	Y+3, r24	; 0x03
    29da:	8b 81       	ldd	r24, Y+3	; 0x03
    29dc:	84 30       	cpi	r24, 0x04	; 4
    29de:	08 f4       	brcc	.+2      	; 0x29e2 <KEYPAD_getPressedKey+0xa0>
    29e0:	b9 cf       	rjmp	.-142    	; 0x2954 <KEYPAD_getPressedKey+0x12>
    29e2:	b6 cf       	rjmp	.-148    	; 0x2950 <KEYPAD_getPressedKey+0xe>

000029e4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    29e4:	df 93       	push	r29
    29e6:	cf 93       	push	r28
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <KEYPAD_4x4_adjustKeyNumber+0x6>
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <KEYPAD_4x4_adjustKeyNumber+0x8>
    29ec:	cd b7       	in	r28, 0x3d	; 61
    29ee:	de b7       	in	r29, 0x3e	; 62
    29f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    29f2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	3c 83       	std	Y+4, r19	; 0x04
    29fc:	2b 83       	std	Y+3, r18	; 0x03
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	9c 81       	ldd	r25, Y+4	; 0x04
    2a02:	88 30       	cpi	r24, 0x08	; 8
    2a04:	91 05       	cpc	r25, r1
    2a06:	09 f4       	brne	.+2      	; 0x2a0a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2a08:	70 c0       	rjmp	.+224    	; 0x2aea <KEYPAD_4x4_adjustKeyNumber+0x106>
    2a0a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a0c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a0e:	29 30       	cpi	r18, 0x09	; 9
    2a10:	31 05       	cpc	r19, r1
    2a12:	5c f5       	brge	.+86     	; 0x2a6a <KEYPAD_4x4_adjustKeyNumber+0x86>
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	9c 81       	ldd	r25, Y+4	; 0x04
    2a18:	84 30       	cpi	r24, 0x04	; 4
    2a1a:	91 05       	cpc	r25, r1
    2a1c:	09 f4       	brne	.+2      	; 0x2a20 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2a1e:	59 c0       	rjmp	.+178    	; 0x2ad2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2a20:	2b 81       	ldd	r18, Y+3	; 0x03
    2a22:	3c 81       	ldd	r19, Y+4	; 0x04
    2a24:	25 30       	cpi	r18, 0x05	; 5
    2a26:	31 05       	cpc	r19, r1
    2a28:	9c f4       	brge	.+38     	; 0x2a50 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2e:	82 30       	cpi	r24, 0x02	; 2
    2a30:	91 05       	cpc	r25, r1
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2a34:	48 c0       	rjmp	.+144    	; 0x2ac6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2a36:	2b 81       	ldd	r18, Y+3	; 0x03
    2a38:	3c 81       	ldd	r19, Y+4	; 0x04
    2a3a:	23 30       	cpi	r18, 0x03	; 3
    2a3c:	31 05       	cpc	r19, r1
    2a3e:	0c f0       	brlt	.+2      	; 0x2a42 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2a40:	45 c0       	rjmp	.+138    	; 0x2acc <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	91 05       	cpc	r25, r1
    2a4a:	09 f4       	brne	.+2      	; 0x2a4e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2a4c:	39 c0       	rjmp	.+114    	; 0x2ac0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2a4e:	67 c0       	rjmp	.+206    	; 0x2b1e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2a50:	2b 81       	ldd	r18, Y+3	; 0x03
    2a52:	3c 81       	ldd	r19, Y+4	; 0x04
    2a54:	26 30       	cpi	r18, 0x06	; 6
    2a56:	31 05       	cpc	r19, r1
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <KEYPAD_4x4_adjustKeyNumber+0x78>
    2a5a:	41 c0       	rjmp	.+130    	; 0x2ade <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a60:	87 30       	cpi	r24, 0x07	; 7
    2a62:	91 05       	cpc	r25, r1
    2a64:	0c f0       	brlt	.+2      	; 0x2a68 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2a66:	3e c0       	rjmp	.+124    	; 0x2ae4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    2a68:	37 c0       	rjmp	.+110    	; 0x2ad8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6e:	2c 30       	cpi	r18, 0x0C	; 12
    2a70:	31 05       	cpc	r19, r1
    2a72:	09 f4       	brne	.+2      	; 0x2a76 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2a74:	46 c0       	rjmp	.+140    	; 0x2b02 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7a:	8d 30       	cpi	r24, 0x0D	; 13
    2a7c:	91 05       	cpc	r25, r1
    2a7e:	5c f4       	brge	.+22     	; 0x2a96 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2a80:	2b 81       	ldd	r18, Y+3	; 0x03
    2a82:	3c 81       	ldd	r19, Y+4	; 0x04
    2a84:	2a 30       	cpi	r18, 0x0A	; 10
    2a86:	31 05       	cpc	r19, r1
    2a88:	b1 f1       	breq	.+108    	; 0x2af6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8e:	8b 30       	cpi	r24, 0x0B	; 11
    2a90:	91 05       	cpc	r25, r1
    2a92:	a4 f5       	brge	.+104    	; 0x2afc <KEYPAD_4x4_adjustKeyNumber+0x118>
    2a94:	2d c0       	rjmp	.+90     	; 0x2af0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2a96:	2b 81       	ldd	r18, Y+3	; 0x03
    2a98:	3c 81       	ldd	r19, Y+4	; 0x04
    2a9a:	2e 30       	cpi	r18, 0x0E	; 14
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	b9 f1       	breq	.+110    	; 0x2b0e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2aa4:	8e 30       	cpi	r24, 0x0E	; 14
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	7c f1       	brlt	.+94     	; 0x2b08 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2aaa:	2b 81       	ldd	r18, Y+3	; 0x03
    2aac:	3c 81       	ldd	r19, Y+4	; 0x04
    2aae:	2f 30       	cpi	r18, 0x0F	; 15
    2ab0:	31 05       	cpc	r19, r1
    2ab2:	79 f1       	breq	.+94     	; 0x2b12 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab8:	80 31       	cpi	r24, 0x10	; 16
    2aba:	91 05       	cpc	r25, r1
    2abc:	69 f1       	breq	.+90     	; 0x2b18 <KEYPAD_4x4_adjustKeyNumber+0x134>
    2abe:	2f c0       	rjmp	.+94     	; 0x2b1e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2ac0:	87 e0       	ldi	r24, 0x07	; 7
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	2e c0       	rjmp	.+92     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2ac6:	88 e0       	ldi	r24, 0x08	; 8
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	2b c0       	rjmp	.+86     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    2acc:	89 e0       	ldi	r24, 0x09	; 9
    2ace:	89 83       	std	Y+1, r24	; 0x01
    2ad0:	28 c0       	rjmp	.+80     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2ad2:	85 e2       	ldi	r24, 0x25	; 37
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	25 c0       	rjmp	.+74     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2ad8:	84 e0       	ldi	r24, 0x04	; 4
    2ada:	89 83       	std	Y+1, r24	; 0x01
    2adc:	22 c0       	rjmp	.+68     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2ade:	85 e0       	ldi	r24, 0x05	; 5
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	1f c0       	rjmp	.+62     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2ae4:	86 e0       	ldi	r24, 0x06	; 6
    2ae6:	89 83       	std	Y+1, r24	; 0x01
    2ae8:	1c c0       	rjmp	.+56     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2aea:	8a e2       	ldi	r24, 0x2A	; 42
    2aec:	89 83       	std	Y+1, r24	; 0x01
    2aee:	19 c0       	rjmp	.+50     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	89 83       	std	Y+1, r24	; 0x01
    2af4:	16 c0       	rjmp	.+44     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2af6:	82 e0       	ldi	r24, 0x02	; 2
    2af8:	89 83       	std	Y+1, r24	; 0x01
    2afa:	13 c0       	rjmp	.+38     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2afc:	83 e0       	ldi	r24, 0x03	; 3
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	10 c0       	rjmp	.+32     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2b02:	8d e2       	ldi	r24, 0x2D	; 45
    2b04:	89 83       	std	Y+1, r24	; 0x01
    2b06:	0d c0       	rjmp	.+26     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2b08:	8d e0       	ldi	r24, 0x0D	; 13
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	0a c0       	rjmp	.+20     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2b0e:	19 82       	std	Y+1, r1	; 0x01
    2b10:	08 c0       	rjmp	.+16     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2b12:	8d e3       	ldi	r24, 0x3D	; 61
    2b14:	89 83       	std	Y+1, r24	; 0x01
    2b16:	05 c0       	rjmp	.+10     	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2b18:	8b e2       	ldi	r24, 0x2B	; 43
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	41 e0       	ldi	r20, 0x01	; 1
    2b40:	0e 94 63 11 	call	0x22c6	; 0x22c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	61 e0       	ldi	r22, 0x01	; 1
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	0e 94 63 11 	call	0x22c6	; 0x22c6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	62 e0       	ldi	r22, 0x02	; 2
    2b52:	41 e0       	ldi	r20, 0x01	; 1
    2b54:	0e 94 63 11 	call	0x22c6	; 0x22c6 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2b58:	82 e0       	ldi	r24, 0x02	; 2
    2b5a:	6f ef       	ldi	r22, 0xFF	; 255
    2b5c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    2b60:	88 e3       	ldi	r24, 0x38	; 56
    2b62:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2b66:	8c e0       	ldi	r24, 0x0C	; 12
    2b68:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_sendCommand>
}
    2b72:	cf 91       	pop	r28
    2b74:	df 91       	pop	r29
    2b76:	08 95       	ret

00002b78 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    2b78:	df 93       	push	r29
    2b7a:	cf 93       	push	r28
    2b7c:	cd b7       	in	r28, 0x3d	; 61
    2b7e:	de b7       	in	r29, 0x3e	; 62
    2b80:	ea 97       	sbiw	r28, 0x3a	; 58
    2b82:	0f b6       	in	r0, 0x3f	; 63
    2b84:	f8 94       	cli
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	0f be       	out	0x3f, r0	; 63
    2b8a:	cd bf       	out	0x3d, r28	; 61
    2b8c:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2b8e:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	60 e0       	ldi	r22, 0x00	; 0
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	0e 94 4e 12 	call	0x249c	; 0x249c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	61 e0       	ldi	r22, 0x01	; 1
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	0e 94 4e 12 	call	0x249c	; 0x249c <GPIO_writePin>
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	a0 e8       	ldi	r26, 0x80	; 128
    2baa:	bf e3       	ldi	r27, 0x3F	; 63
    2bac:	8d ab       	std	Y+53, r24	; 0x35
    2bae:	9e ab       	std	Y+54, r25	; 0x36
    2bb0:	af ab       	std	Y+55, r26	; 0x37
    2bb2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb4:	6d a9       	ldd	r22, Y+53	; 0x35
    2bb6:	7e a9       	ldd	r23, Y+54	; 0x36
    2bb8:	8f a9       	ldd	r24, Y+55	; 0x37
    2bba:	98 ad       	ldd	r25, Y+56	; 0x38
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	4a e7       	ldi	r20, 0x7A	; 122
    2bc2:	53 e4       	ldi	r21, 0x43	; 67
    2bc4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	89 ab       	std	Y+49, r24	; 0x31
    2bce:	9a ab       	std	Y+50, r25	; 0x32
    2bd0:	ab ab       	std	Y+51, r26	; 0x33
    2bd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2bd4:	69 a9       	ldd	r22, Y+49	; 0x31
    2bd6:	7a a9       	ldd	r23, Y+50	; 0x32
    2bd8:	8b a9       	ldd	r24, Y+51	; 0x33
    2bda:	9c a9       	ldd	r25, Y+52	; 0x34
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	5f e3       	ldi	r21, 0x3F	; 63
    2be4:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2be8:	88 23       	and	r24, r24
    2bea:	2c f4       	brge	.+10     	; 0x2bf6 <LCD_sendCommand+0x7e>
		__ticks = 1;
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	98 ab       	std	Y+48, r25	; 0x30
    2bf2:	8f a7       	std	Y+47, r24	; 0x2f
    2bf4:	3f c0       	rjmp	.+126    	; 0x2c74 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    2bf6:	69 a9       	ldd	r22, Y+49	; 0x31
    2bf8:	7a a9       	ldd	r23, Y+50	; 0x32
    2bfa:	8b a9       	ldd	r24, Y+51	; 0x33
    2bfc:	9c a9       	ldd	r25, Y+52	; 0x34
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	3f ef       	ldi	r19, 0xFF	; 255
    2c02:	4f e7       	ldi	r20, 0x7F	; 127
    2c04:	57 e4       	ldi	r21, 0x47	; 71
    2c06:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2c0a:	18 16       	cp	r1, r24
    2c0c:	4c f5       	brge	.+82     	; 0x2c60 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c0e:	6d a9       	ldd	r22, Y+53	; 0x35
    2c10:	7e a9       	ldd	r23, Y+54	; 0x36
    2c12:	8f a9       	ldd	r24, Y+55	; 0x37
    2c14:	98 ad       	ldd	r25, Y+56	; 0x38
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e2       	ldi	r20, 0x20	; 32
    2c1c:	51 e4       	ldi	r21, 0x41	; 65
    2c1e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	bc 01       	movw	r22, r24
    2c28:	cd 01       	movw	r24, r26
    2c2a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	98 ab       	std	Y+48, r25	; 0x30
    2c34:	8f a7       	std	Y+47, r24	; 0x2f
    2c36:	0f c0       	rjmp	.+30     	; 0x2c56 <LCD_sendCommand+0xde>
    2c38:	89 e1       	ldi	r24, 0x19	; 25
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	9e a7       	std	Y+46, r25	; 0x2e
    2c3e:	8d a7       	std	Y+45, r24	; 0x2d
    2c40:	8d a5       	ldd	r24, Y+45	; 0x2d
    2c42:	9e a5       	ldd	r25, Y+46	; 0x2e
    2c44:	01 97       	sbiw	r24, 0x01	; 1
    2c46:	f1 f7       	brne	.-4      	; 0x2c44 <LCD_sendCommand+0xcc>
    2c48:	9e a7       	std	Y+46, r25	; 0x2e
    2c4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c4e:	98 a9       	ldd	r25, Y+48	; 0x30
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	98 ab       	std	Y+48, r25	; 0x30
    2c54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c56:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c58:	98 a9       	ldd	r25, Y+48	; 0x30
    2c5a:	00 97       	sbiw	r24, 0x00	; 0
    2c5c:	69 f7       	brne	.-38     	; 0x2c38 <LCD_sendCommand+0xc0>
    2c5e:	14 c0       	rjmp	.+40     	; 0x2c88 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c60:	69 a9       	ldd	r22, Y+49	; 0x31
    2c62:	7a a9       	ldd	r23, Y+50	; 0x32
    2c64:	8b a9       	ldd	r24, Y+51	; 0x33
    2c66:	9c a9       	ldd	r25, Y+52	; 0x34
    2c68:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2c6c:	dc 01       	movw	r26, r24
    2c6e:	cb 01       	movw	r24, r22
    2c70:	98 ab       	std	Y+48, r25	; 0x30
    2c72:	8f a7       	std	Y+47, r24	; 0x2f
    2c74:	8f a5       	ldd	r24, Y+47	; 0x2f
    2c76:	98 a9       	ldd	r25, Y+48	; 0x30
    2c78:	9c a7       	std	Y+44, r25	; 0x2c
    2c7a:	8b a7       	std	Y+43, r24	; 0x2b
    2c7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <LCD_sendCommand+0x108>
    2c84:	9c a7       	std	Y+44, r25	; 0x2c
    2c86:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	62 e0       	ldi	r22, 0x02	; 2
    2c8c:	41 e0       	ldi	r20, 0x01	; 1
    2c8e:	0e 94 4e 12 	call	0x249c	; 0x249c <GPIO_writePin>
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	a0 e8       	ldi	r26, 0x80	; 128
    2c98:	bf e3       	ldi	r27, 0x3F	; 63
    2c9a:	8f a3       	std	Y+39, r24	; 0x27
    2c9c:	98 a7       	std	Y+40, r25	; 0x28
    2c9e:	a9 a7       	std	Y+41, r26	; 0x29
    2ca0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ca2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ca4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ca6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ca8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a e7       	ldi	r20, 0x7A	; 122
    2cb0:	53 e4       	ldi	r21, 0x43	; 67
    2cb2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	8b a3       	std	Y+35, r24	; 0x23
    2cbc:	9c a3       	std	Y+36, r25	; 0x24
    2cbe:	ad a3       	std	Y+37, r26	; 0x25
    2cc0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2cc2:	6b a1       	ldd	r22, Y+35	; 0x23
    2cc4:	7c a1       	ldd	r23, Y+36	; 0x24
    2cc6:	8d a1       	ldd	r24, Y+37	; 0x25
    2cc8:	9e a1       	ldd	r25, Y+38	; 0x26
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <LCD_sendCommand+0x16c>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9a a3       	std	Y+34, r25	; 0x22
    2ce0:	89 a3       	std	Y+33, r24	; 0x21
    2ce2:	3f c0       	rjmp	.+126    	; 0x2d62 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2ce4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ce6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ce8:	8d a1       	ldd	r24, Y+37	; 0x25
    2cea:	9e a1       	ldd	r25, Y+38	; 0x26
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	3f ef       	ldi	r19, 0xFF	; 255
    2cf0:	4f e7       	ldi	r20, 0x7F	; 127
    2cf2:	57 e4       	ldi	r21, 0x47	; 71
    2cf4:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2cf8:	18 16       	cp	r1, r24
    2cfa:	4c f5       	brge	.+82     	; 0x2d4e <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cfc:	6f a1       	ldd	r22, Y+39	; 0x27
    2cfe:	78 a5       	ldd	r23, Y+40	; 0x28
    2d00:	89 a5       	ldd	r24, Y+41	; 0x29
    2d02:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e2       	ldi	r20, 0x20	; 32
    2d0a:	51 e4       	ldi	r21, 0x41	; 65
    2d0c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	bc 01       	movw	r22, r24
    2d16:	cd 01       	movw	r24, r26
    2d18:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9a a3       	std	Y+34, r25	; 0x22
    2d22:	89 a3       	std	Y+33, r24	; 0x21
    2d24:	0f c0       	rjmp	.+30     	; 0x2d44 <LCD_sendCommand+0x1cc>
    2d26:	89 e1       	ldi	r24, 0x19	; 25
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	98 a3       	std	Y+32, r25	; 0x20
    2d2c:	8f 8f       	std	Y+31, r24	; 0x1f
    2d2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d30:	98 a1       	ldd	r25, Y+32	; 0x20
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	f1 f7       	brne	.-4      	; 0x2d32 <LCD_sendCommand+0x1ba>
    2d36:	98 a3       	std	Y+32, r25	; 0x20
    2d38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d3a:	89 a1       	ldd	r24, Y+33	; 0x21
    2d3c:	9a a1       	ldd	r25, Y+34	; 0x22
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	9a a3       	std	Y+34, r25	; 0x22
    2d42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d44:	89 a1       	ldd	r24, Y+33	; 0x21
    2d46:	9a a1       	ldd	r25, Y+34	; 0x22
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	69 f7       	brne	.-38     	; 0x2d26 <LCD_sendCommand+0x1ae>
    2d4c:	14 c0       	rjmp	.+40     	; 0x2d76 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4e:	6b a1       	ldd	r22, Y+35	; 0x23
    2d50:	7c a1       	ldd	r23, Y+36	; 0x24
    2d52:	8d a1       	ldd	r24, Y+37	; 0x25
    2d54:	9e a1       	ldd	r25, Y+38	; 0x26
    2d56:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	9a a3       	std	Y+34, r25	; 0x22
    2d60:	89 a3       	std	Y+33, r24	; 0x21
    2d62:	89 a1       	ldd	r24, Y+33	; 0x21
    2d64:	9a a1       	ldd	r25, Y+34	; 0x22
    2d66:	9e 8f       	std	Y+30, r25	; 0x1e
    2d68:	8d 8f       	std	Y+29, r24	; 0x1d
    2d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	f1 f7       	brne	.-4      	; 0x2d6e <LCD_sendCommand+0x1f6>
    2d72:	9e 8f       	std	Y+30, r25	; 0x1e
    2d74:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2d76:	82 e0       	ldi	r24, 0x02	; 2
    2d78:	6a ad       	ldd	r22, Y+58	; 0x3a
    2d7a:	0e 94 18 14 	call	0x2830	; 0x2830 <GPIO_writePort>
    2d7e:	80 e0       	ldi	r24, 0x00	; 0
    2d80:	90 e0       	ldi	r25, 0x00	; 0
    2d82:	a0 e8       	ldi	r26, 0x80	; 128
    2d84:	bf e3       	ldi	r27, 0x3F	; 63
    2d86:	89 8f       	std	Y+25, r24	; 0x19
    2d88:	9a 8f       	std	Y+26, r25	; 0x1a
    2d8a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d8e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d96:	20 e0       	ldi	r18, 0x00	; 0
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	4a e7       	ldi	r20, 0x7A	; 122
    2d9c:	53 e4       	ldi	r21, 0x43	; 67
    2d9e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2da2:	dc 01       	movw	r26, r24
    2da4:	cb 01       	movw	r24, r22
    2da6:	8d 8b       	std	Y+21, r24	; 0x15
    2da8:	9e 8b       	std	Y+22, r25	; 0x16
    2daa:	af 8b       	std	Y+23, r26	; 0x17
    2dac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dae:	6d 89       	ldd	r22, Y+21	; 0x15
    2db0:	7e 89       	ldd	r23, Y+22	; 0x16
    2db2:	8f 89       	ldd	r24, Y+23	; 0x17
    2db4:	98 8d       	ldd	r25, Y+24	; 0x18
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e8       	ldi	r20, 0x80	; 128
    2dbc:	5f e3       	ldi	r21, 0x3F	; 63
    2dbe:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2dc2:	88 23       	and	r24, r24
    2dc4:	2c f4       	brge	.+10     	; 0x2dd0 <LCD_sendCommand+0x258>
		__ticks = 1;
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	9c 8b       	std	Y+20, r25	; 0x14
    2dcc:	8b 8b       	std	Y+19, r24	; 0x13
    2dce:	3f c0       	rjmp	.+126    	; 0x2e4e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2dd0:	6d 89       	ldd	r22, Y+21	; 0x15
    2dd2:	7e 89       	ldd	r23, Y+22	; 0x16
    2dd4:	8f 89       	ldd	r24, Y+23	; 0x17
    2dd6:	98 8d       	ldd	r25, Y+24	; 0x18
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	3f ef       	ldi	r19, 0xFF	; 255
    2ddc:	4f e7       	ldi	r20, 0x7F	; 127
    2dde:	57 e4       	ldi	r21, 0x47	; 71
    2de0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2de4:	18 16       	cp	r1, r24
    2de6:	4c f5       	brge	.+82     	; 0x2e3a <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2de8:	69 8d       	ldd	r22, Y+25	; 0x19
    2dea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	40 e2       	ldi	r20, 0x20	; 32
    2df6:	51 e4       	ldi	r21, 0x41	; 65
    2df8:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	bc 01       	movw	r22, r24
    2e02:	cd 01       	movw	r24, r26
    2e04:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2e08:	dc 01       	movw	r26, r24
    2e0a:	cb 01       	movw	r24, r22
    2e0c:	9c 8b       	std	Y+20, r25	; 0x14
    2e0e:	8b 8b       	std	Y+19, r24	; 0x13
    2e10:	0f c0       	rjmp	.+30     	; 0x2e30 <LCD_sendCommand+0x2b8>
    2e12:	89 e1       	ldi	r24, 0x19	; 25
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9a 8b       	std	Y+18, r25	; 0x12
    2e18:	89 8b       	std	Y+17, r24	; 0x11
    2e1a:	89 89       	ldd	r24, Y+17	; 0x11
    2e1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <LCD_sendCommand+0x2a6>
    2e22:	9a 8b       	std	Y+18, r25	; 0x12
    2e24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e26:	8b 89       	ldd	r24, Y+19	; 0x13
    2e28:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2a:	01 97       	sbiw	r24, 0x01	; 1
    2e2c:	9c 8b       	std	Y+20, r25	; 0x14
    2e2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e30:	8b 89       	ldd	r24, Y+19	; 0x13
    2e32:	9c 89       	ldd	r25, Y+20	; 0x14
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	69 f7       	brne	.-38     	; 0x2e12 <LCD_sendCommand+0x29a>
    2e38:	14 c0       	rjmp	.+40     	; 0x2e62 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e3a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e3c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e3e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e40:	98 8d       	ldd	r25, Y+24	; 0x18
    2e42:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	9c 8b       	std	Y+20, r25	; 0x14
    2e4c:	8b 8b       	std	Y+19, r24	; 0x13
    2e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e50:	9c 89       	ldd	r25, Y+20	; 0x14
    2e52:	98 8b       	std	Y+16, r25	; 0x10
    2e54:	8f 87       	std	Y+15, r24	; 0x0f
    2e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e58:	98 89       	ldd	r25, Y+16	; 0x10
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <LCD_sendCommand+0x2e2>
    2e5e:	98 8b       	std	Y+16, r25	; 0x10
    2e60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	62 e0       	ldi	r22, 0x02	; 2
    2e66:	40 e0       	ldi	r20, 0x00	; 0
    2e68:	0e 94 4e 12 	call	0x249c	; 0x249c <GPIO_writePin>
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	a0 e8       	ldi	r26, 0x80	; 128
    2e72:	bf e3       	ldi	r27, 0x3F	; 63
    2e74:	8b 87       	std	Y+11, r24	; 0x0b
    2e76:	9c 87       	std	Y+12, r25	; 0x0c
    2e78:	ad 87       	std	Y+13, r26	; 0x0d
    2e7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4a e7       	ldi	r20, 0x7A	; 122
    2e8a:	53 e4       	ldi	r21, 0x43	; 67
    2e8c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22
    2e94:	8f 83       	std	Y+7, r24	; 0x07
    2e96:	98 87       	std	Y+8, r25	; 0x08
    2e98:	a9 87       	std	Y+9, r26	; 0x09
    2e9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ea0:	89 85       	ldd	r24, Y+9	; 0x09
    2ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e8       	ldi	r20, 0x80	; 128
    2eaa:	5f e3       	ldi	r21, 0x3F	; 63
    2eac:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2eb0:	88 23       	and	r24, r24
    2eb2:	2c f4       	brge	.+10     	; 0x2ebe <LCD_sendCommand+0x346>
		__ticks = 1;
    2eb4:	81 e0       	ldi	r24, 0x01	; 1
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9e 83       	std	Y+6, r25	; 0x06
    2eba:	8d 83       	std	Y+5, r24	; 0x05
    2ebc:	3f c0       	rjmp	.+126    	; 0x2f3c <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    2ebe:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec0:	78 85       	ldd	r23, Y+8	; 0x08
    2ec2:	89 85       	ldd	r24, Y+9	; 0x09
    2ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ec6:	20 e0       	ldi	r18, 0x00	; 0
    2ec8:	3f ef       	ldi	r19, 0xFF	; 255
    2eca:	4f e7       	ldi	r20, 0x7F	; 127
    2ecc:	57 e4       	ldi	r21, 0x47	; 71
    2ece:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2ed2:	18 16       	cp	r1, r24
    2ed4:	4c f5       	brge	.+82     	; 0x2f28 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e2       	ldi	r20, 0x20	; 32
    2ee4:	51 e4       	ldi	r21, 0x41	; 65
    2ee6:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2eea:	dc 01       	movw	r26, r24
    2eec:	cb 01       	movw	r24, r22
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9e 83       	std	Y+6, r25	; 0x06
    2efc:	8d 83       	std	Y+5, r24	; 0x05
    2efe:	0f c0       	rjmp	.+30     	; 0x2f1e <LCD_sendCommand+0x3a6>
    2f00:	89 e1       	ldi	r24, 0x19	; 25
    2f02:	90 e0       	ldi	r25, 0x00	; 0
    2f04:	9c 83       	std	Y+4, r25	; 0x04
    2f06:	8b 83       	std	Y+3, r24	; 0x03
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <LCD_sendCommand+0x394>
    2f10:	9c 83       	std	Y+4, r25	; 0x04
    2f12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f14:	8d 81       	ldd	r24, Y+5	; 0x05
    2f16:	9e 81       	ldd	r25, Y+6	; 0x06
    2f18:	01 97       	sbiw	r24, 0x01	; 1
    2f1a:	9e 83       	std	Y+6, r25	; 0x06
    2f1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f1e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f20:	9e 81       	ldd	r25, Y+6	; 0x06
    2f22:	00 97       	sbiw	r24, 0x00	; 0
    2f24:	69 f7       	brne	.-38     	; 0x2f00 <LCD_sendCommand+0x388>
    2f26:	14 c0       	rjmp	.+40     	; 0x2f50 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f28:	6f 81       	ldd	r22, Y+7	; 0x07
    2f2a:	78 85       	ldd	r23, Y+8	; 0x08
    2f2c:	89 85       	ldd	r24, Y+9	; 0x09
    2f2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f30:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	9e 83       	std	Y+6, r25	; 0x06
    2f3a:	8d 83       	std	Y+5, r24	; 0x05
    2f3c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f3e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f40:	9a 83       	std	Y+2, r25	; 0x02
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	9a 81       	ldd	r25, Y+2	; 0x02
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <LCD_sendCommand+0x3d0>
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f50:	ea 96       	adiw	r28, 0x3a	; 58
    2f52:	0f b6       	in	r0, 0x3f	; 63
    2f54:	f8 94       	cli
    2f56:	de bf       	out	0x3e, r29	; 62
    2f58:	0f be       	out	0x3f, r0	; 63
    2f5a:	cd bf       	out	0x3d, r28	; 61
    2f5c:	cf 91       	pop	r28
    2f5e:	df 91       	pop	r29
    2f60:	08 95       	ret

00002f62 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2f62:	df 93       	push	r29
    2f64:	cf 93       	push	r28
    2f66:	cd b7       	in	r28, 0x3d	; 61
    2f68:	de b7       	in	r29, 0x3e	; 62
    2f6a:	ea 97       	sbiw	r28, 0x3a	; 58
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2f78:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	0e 94 4e 12 	call	0x249c	; 0x249c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2f84:	81 e0       	ldi	r24, 0x01	; 1
    2f86:	61 e0       	ldi	r22, 0x01	; 1
    2f88:	40 e0       	ldi	r20, 0x00	; 0
    2f8a:	0e 94 4e 12 	call	0x249c	; 0x249c <GPIO_writePin>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	a0 e8       	ldi	r26, 0x80	; 128
    2f94:	bf e3       	ldi	r27, 0x3F	; 63
    2f96:	8d ab       	std	Y+53, r24	; 0x35
    2f98:	9e ab       	std	Y+54, r25	; 0x36
    2f9a:	af ab       	std	Y+55, r26	; 0x37
    2f9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9e:	6d a9       	ldd	r22, Y+53	; 0x35
    2fa0:	7e a9       	ldd	r23, Y+54	; 0x36
    2fa2:	8f a9       	ldd	r24, Y+55	; 0x37
    2fa4:	98 ad       	ldd	r25, Y+56	; 0x38
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	4a e7       	ldi	r20, 0x7A	; 122
    2fac:	53 e4       	ldi	r21, 0x43	; 67
    2fae:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	89 ab       	std	Y+49, r24	; 0x31
    2fb8:	9a ab       	std	Y+50, r25	; 0x32
    2fba:	ab ab       	std	Y+51, r26	; 0x33
    2fbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2fc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2fc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2fc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e8       	ldi	r20, 0x80	; 128
    2fcc:	5f e3       	ldi	r21, 0x3F	; 63
    2fce:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    2fd2:	88 23       	and	r24, r24
    2fd4:	2c f4       	brge	.+10     	; 0x2fe0 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	98 ab       	std	Y+48, r25	; 0x30
    2fdc:	8f a7       	std	Y+47, r24	; 0x2f
    2fde:	3f c0       	rjmp	.+126    	; 0x305e <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2fe0:	69 a9       	ldd	r22, Y+49	; 0x31
    2fe2:	7a a9       	ldd	r23, Y+50	; 0x32
    2fe4:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe6:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	3f ef       	ldi	r19, 0xFF	; 255
    2fec:	4f e7       	ldi	r20, 0x7F	; 127
    2fee:	57 e4       	ldi	r21, 0x47	; 71
    2ff0:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    2ff4:	18 16       	cp	r1, r24
    2ff6:	4c f5       	brge	.+82     	; 0x304a <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff8:	6d a9       	ldd	r22, Y+53	; 0x35
    2ffa:	7e a9       	ldd	r23, Y+54	; 0x36
    2ffc:	8f a9       	ldd	r24, Y+55	; 0x37
    2ffe:	98 ad       	ldd	r25, Y+56	; 0x38
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e2       	ldi	r20, 0x20	; 32
    3006:	51 e4       	ldi	r21, 0x41	; 65
    3008:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	98 ab       	std	Y+48, r25	; 0x30
    301e:	8f a7       	std	Y+47, r24	; 0x2f
    3020:	0f c0       	rjmp	.+30     	; 0x3040 <LCD_displayCharacter+0xde>
    3022:	89 e1       	ldi	r24, 0x19	; 25
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	9e a7       	std	Y+46, r25	; 0x2e
    3028:	8d a7       	std	Y+45, r24	; 0x2d
    302a:	8d a5       	ldd	r24, Y+45	; 0x2d
    302c:	9e a5       	ldd	r25, Y+46	; 0x2e
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <LCD_displayCharacter+0xcc>
    3032:	9e a7       	std	Y+46, r25	; 0x2e
    3034:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3036:	8f a5       	ldd	r24, Y+47	; 0x2f
    3038:	98 a9       	ldd	r25, Y+48	; 0x30
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	98 ab       	std	Y+48, r25	; 0x30
    303e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3040:	8f a5       	ldd	r24, Y+47	; 0x2f
    3042:	98 a9       	ldd	r25, Y+48	; 0x30
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	69 f7       	brne	.-38     	; 0x3022 <LCD_displayCharacter+0xc0>
    3048:	14 c0       	rjmp	.+40     	; 0x3072 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304a:	69 a9       	ldd	r22, Y+49	; 0x31
    304c:	7a a9       	ldd	r23, Y+50	; 0x32
    304e:	8b a9       	ldd	r24, Y+51	; 0x33
    3050:	9c a9       	ldd	r25, Y+52	; 0x34
    3052:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	98 ab       	std	Y+48, r25	; 0x30
    305c:	8f a7       	std	Y+47, r24	; 0x2f
    305e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3060:	98 a9       	ldd	r25, Y+48	; 0x30
    3062:	9c a7       	std	Y+44, r25	; 0x2c
    3064:	8b a7       	std	Y+43, r24	; 0x2b
    3066:	8b a5       	ldd	r24, Y+43	; 0x2b
    3068:	9c a5       	ldd	r25, Y+44	; 0x2c
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <LCD_displayCharacter+0x108>
    306e:	9c a7       	std	Y+44, r25	; 0x2c
    3070:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	62 e0       	ldi	r22, 0x02	; 2
    3076:	41 e0       	ldi	r20, 0x01	; 1
    3078:	0e 94 4e 12 	call	0x249c	; 0x249c <GPIO_writePin>
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	a0 e8       	ldi	r26, 0x80	; 128
    3082:	bf e3       	ldi	r27, 0x3F	; 63
    3084:	8f a3       	std	Y+39, r24	; 0x27
    3086:	98 a7       	std	Y+40, r25	; 0x28
    3088:	a9 a7       	std	Y+41, r26	; 0x29
    308a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    308c:	6f a1       	ldd	r22, Y+39	; 0x27
    308e:	78 a5       	ldd	r23, Y+40	; 0x28
    3090:	89 a5       	ldd	r24, Y+41	; 0x29
    3092:	9a a5       	ldd	r25, Y+42	; 0x2a
    3094:	20 e0       	ldi	r18, 0x00	; 0
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	4a e7       	ldi	r20, 0x7A	; 122
    309a:	53 e4       	ldi	r21, 0x43	; 67
    309c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	8b a3       	std	Y+35, r24	; 0x23
    30a6:	9c a3       	std	Y+36, r25	; 0x24
    30a8:	ad a3       	std	Y+37, r26	; 0x25
    30aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30ac:	6b a1       	ldd	r22, Y+35	; 0x23
    30ae:	7c a1       	ldd	r23, Y+36	; 0x24
    30b0:	8d a1       	ldd	r24, Y+37	; 0x25
    30b2:	9e a1       	ldd	r25, Y+38	; 0x26
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e8       	ldi	r20, 0x80	; 128
    30ba:	5f e3       	ldi	r21, 0x3F	; 63
    30bc:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    30c0:	88 23       	and	r24, r24
    30c2:	2c f4       	brge	.+10     	; 0x30ce <LCD_displayCharacter+0x16c>
		__ticks = 1;
    30c4:	81 e0       	ldi	r24, 0x01	; 1
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	9a a3       	std	Y+34, r25	; 0x22
    30ca:	89 a3       	std	Y+33, r24	; 0x21
    30cc:	3f c0       	rjmp	.+126    	; 0x314c <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    30ce:	6b a1       	ldd	r22, Y+35	; 0x23
    30d0:	7c a1       	ldd	r23, Y+36	; 0x24
    30d2:	8d a1       	ldd	r24, Y+37	; 0x25
    30d4:	9e a1       	ldd	r25, Y+38	; 0x26
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	3f ef       	ldi	r19, 0xFF	; 255
    30da:	4f e7       	ldi	r20, 0x7F	; 127
    30dc:	57 e4       	ldi	r21, 0x47	; 71
    30de:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    30e2:	18 16       	cp	r1, r24
    30e4:	4c f5       	brge	.+82     	; 0x3138 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e6:	6f a1       	ldd	r22, Y+39	; 0x27
    30e8:	78 a5       	ldd	r23, Y+40	; 0x28
    30ea:	89 a5       	ldd	r24, Y+41	; 0x29
    30ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	40 e2       	ldi	r20, 0x20	; 32
    30f4:	51 e4       	ldi	r21, 0x41	; 65
    30f6:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9a a3       	std	Y+34, r25	; 0x22
    310c:	89 a3       	std	Y+33, r24	; 0x21
    310e:	0f c0       	rjmp	.+30     	; 0x312e <LCD_displayCharacter+0x1cc>
    3110:	89 e1       	ldi	r24, 0x19	; 25
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	98 a3       	std	Y+32, r25	; 0x20
    3116:	8f 8f       	std	Y+31, r24	; 0x1f
    3118:	8f 8d       	ldd	r24, Y+31	; 0x1f
    311a:	98 a1       	ldd	r25, Y+32	; 0x20
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <LCD_displayCharacter+0x1ba>
    3120:	98 a3       	std	Y+32, r25	; 0x20
    3122:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3124:	89 a1       	ldd	r24, Y+33	; 0x21
    3126:	9a a1       	ldd	r25, Y+34	; 0x22
    3128:	01 97       	sbiw	r24, 0x01	; 1
    312a:	9a a3       	std	Y+34, r25	; 0x22
    312c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    312e:	89 a1       	ldd	r24, Y+33	; 0x21
    3130:	9a a1       	ldd	r25, Y+34	; 0x22
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	69 f7       	brne	.-38     	; 0x3110 <LCD_displayCharacter+0x1ae>
    3136:	14 c0       	rjmp	.+40     	; 0x3160 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3138:	6b a1       	ldd	r22, Y+35	; 0x23
    313a:	7c a1       	ldd	r23, Y+36	; 0x24
    313c:	8d a1       	ldd	r24, Y+37	; 0x25
    313e:	9e a1       	ldd	r25, Y+38	; 0x26
    3140:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	9a a3       	std	Y+34, r25	; 0x22
    314a:	89 a3       	std	Y+33, r24	; 0x21
    314c:	89 a1       	ldd	r24, Y+33	; 0x21
    314e:	9a a1       	ldd	r25, Y+34	; 0x22
    3150:	9e 8f       	std	Y+30, r25	; 0x1e
    3152:	8d 8f       	std	Y+29, r24	; 0x1d
    3154:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3156:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3158:	01 97       	sbiw	r24, 0x01	; 1
    315a:	f1 f7       	brne	.-4      	; 0x3158 <LCD_displayCharacter+0x1f6>
    315c:	9e 8f       	std	Y+30, r25	; 0x1e
    315e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    3160:	82 e0       	ldi	r24, 0x02	; 2
    3162:	6a ad       	ldd	r22, Y+58	; 0x3a
    3164:	0e 94 18 14 	call	0x2830	; 0x2830 <GPIO_writePort>
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	a0 e8       	ldi	r26, 0x80	; 128
    316e:	bf e3       	ldi	r27, 0x3F	; 63
    3170:	89 8f       	std	Y+25, r24	; 0x19
    3172:	9a 8f       	std	Y+26, r25	; 0x1a
    3174:	ab 8f       	std	Y+27, r26	; 0x1b
    3176:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3178:	69 8d       	ldd	r22, Y+25	; 0x19
    317a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    317c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    317e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3180:	20 e0       	ldi	r18, 0x00	; 0
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	4a e7       	ldi	r20, 0x7A	; 122
    3186:	53 e4       	ldi	r21, 0x43	; 67
    3188:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	8d 8b       	std	Y+21, r24	; 0x15
    3192:	9e 8b       	std	Y+22, r25	; 0x16
    3194:	af 8b       	std	Y+23, r26	; 0x17
    3196:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3198:	6d 89       	ldd	r22, Y+21	; 0x15
    319a:	7e 89       	ldd	r23, Y+22	; 0x16
    319c:	8f 89       	ldd	r24, Y+23	; 0x17
    319e:	98 8d       	ldd	r25, Y+24	; 0x18
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e8       	ldi	r20, 0x80	; 128
    31a6:	5f e3       	ldi	r21, 0x3F	; 63
    31a8:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    31ac:	88 23       	and	r24, r24
    31ae:	2c f4       	brge	.+10     	; 0x31ba <LCD_displayCharacter+0x258>
		__ticks = 1;
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	9c 8b       	std	Y+20, r25	; 0x14
    31b6:	8b 8b       	std	Y+19, r24	; 0x13
    31b8:	3f c0       	rjmp	.+126    	; 0x3238 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    31ba:	6d 89       	ldd	r22, Y+21	; 0x15
    31bc:	7e 89       	ldd	r23, Y+22	; 0x16
    31be:	8f 89       	ldd	r24, Y+23	; 0x17
    31c0:	98 8d       	ldd	r25, Y+24	; 0x18
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	4f e7       	ldi	r20, 0x7F	; 127
    31c8:	57 e4       	ldi	r21, 0x47	; 71
    31ca:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    31ce:	18 16       	cp	r1, r24
    31d0:	4c f5       	brge	.+82     	; 0x3224 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31d2:	69 8d       	ldd	r22, Y+25	; 0x19
    31d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 e2       	ldi	r20, 0x20	; 32
    31e0:	51 e4       	ldi	r21, 0x41	; 65
    31e2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	bc 01       	movw	r22, r24
    31ec:	cd 01       	movw	r24, r26
    31ee:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	9c 8b       	std	Y+20, r25	; 0x14
    31f8:	8b 8b       	std	Y+19, r24	; 0x13
    31fa:	0f c0       	rjmp	.+30     	; 0x321a <LCD_displayCharacter+0x2b8>
    31fc:	89 e1       	ldi	r24, 0x19	; 25
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	9a 8b       	std	Y+18, r25	; 0x12
    3202:	89 8b       	std	Y+17, r24	; 0x11
    3204:	89 89       	ldd	r24, Y+17	; 0x11
    3206:	9a 89       	ldd	r25, Y+18	; 0x12
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	f1 f7       	brne	.-4      	; 0x3208 <LCD_displayCharacter+0x2a6>
    320c:	9a 8b       	std	Y+18, r25	; 0x12
    320e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3210:	8b 89       	ldd	r24, Y+19	; 0x13
    3212:	9c 89       	ldd	r25, Y+20	; 0x14
    3214:	01 97       	sbiw	r24, 0x01	; 1
    3216:	9c 8b       	std	Y+20, r25	; 0x14
    3218:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    321a:	8b 89       	ldd	r24, Y+19	; 0x13
    321c:	9c 89       	ldd	r25, Y+20	; 0x14
    321e:	00 97       	sbiw	r24, 0x00	; 0
    3220:	69 f7       	brne	.-38     	; 0x31fc <LCD_displayCharacter+0x29a>
    3222:	14 c0       	rjmp	.+40     	; 0x324c <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3224:	6d 89       	ldd	r22, Y+21	; 0x15
    3226:	7e 89       	ldd	r23, Y+22	; 0x16
    3228:	8f 89       	ldd	r24, Y+23	; 0x17
    322a:	98 8d       	ldd	r25, Y+24	; 0x18
    322c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	9c 8b       	std	Y+20, r25	; 0x14
    3236:	8b 8b       	std	Y+19, r24	; 0x13
    3238:	8b 89       	ldd	r24, Y+19	; 0x13
    323a:	9c 89       	ldd	r25, Y+20	; 0x14
    323c:	98 8b       	std	Y+16, r25	; 0x10
    323e:	8f 87       	std	Y+15, r24	; 0x0f
    3240:	8f 85       	ldd	r24, Y+15	; 0x0f
    3242:	98 89       	ldd	r25, Y+16	; 0x10
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <LCD_displayCharacter+0x2e2>
    3248:	98 8b       	std	Y+16, r25	; 0x10
    324a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	62 e0       	ldi	r22, 0x02	; 2
    3250:	40 e0       	ldi	r20, 0x00	; 0
    3252:	0e 94 4e 12 	call	0x249c	; 0x249c <GPIO_writePin>
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	a0 e8       	ldi	r26, 0x80	; 128
    325c:	bf e3       	ldi	r27, 0x3F	; 63
    325e:	8b 87       	std	Y+11, r24	; 0x0b
    3260:	9c 87       	std	Y+12, r25	; 0x0c
    3262:	ad 87       	std	Y+13, r26	; 0x0d
    3264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3266:	6b 85       	ldd	r22, Y+11	; 0x0b
    3268:	7c 85       	ldd	r23, Y+12	; 0x0c
    326a:	8d 85       	ldd	r24, Y+13	; 0x0d
    326c:	9e 85       	ldd	r25, Y+14	; 0x0e
    326e:	20 e0       	ldi	r18, 0x00	; 0
    3270:	30 e0       	ldi	r19, 0x00	; 0
    3272:	4a e7       	ldi	r20, 0x7A	; 122
    3274:	53 e4       	ldi	r21, 0x43	; 67
    3276:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	8f 83       	std	Y+7, r24	; 0x07
    3280:	98 87       	std	Y+8, r25	; 0x08
    3282:	a9 87       	std	Y+9, r26	; 0x09
    3284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3286:	6f 81       	ldd	r22, Y+7	; 0x07
    3288:	78 85       	ldd	r23, Y+8	; 0x08
    328a:	89 85       	ldd	r24, Y+9	; 0x09
    328c:	9a 85       	ldd	r25, Y+10	; 0x0a
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e8       	ldi	r20, 0x80	; 128
    3294:	5f e3       	ldi	r21, 0x3F	; 63
    3296:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    329a:	88 23       	and	r24, r24
    329c:	2c f4       	brge	.+10     	; 0x32a8 <LCD_displayCharacter+0x346>
		__ticks = 1;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	9e 83       	std	Y+6, r25	; 0x06
    32a4:	8d 83       	std	Y+5, r24	; 0x05
    32a6:	3f c0       	rjmp	.+126    	; 0x3326 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    32a8:	6f 81       	ldd	r22, Y+7	; 0x07
    32aa:	78 85       	ldd	r23, Y+8	; 0x08
    32ac:	89 85       	ldd	r24, Y+9	; 0x09
    32ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	3f ef       	ldi	r19, 0xFF	; 255
    32b4:	4f e7       	ldi	r20, 0x7F	; 127
    32b6:	57 e4       	ldi	r21, 0x47	; 71
    32b8:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    32bc:	18 16       	cp	r1, r24
    32be:	4c f5       	brge	.+82     	; 0x3312 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32c8:	20 e0       	ldi	r18, 0x00	; 0
    32ca:	30 e0       	ldi	r19, 0x00	; 0
    32cc:	40 e2       	ldi	r20, 0x20	; 32
    32ce:	51 e4       	ldi	r21, 0x41	; 65
    32d0:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	bc 01       	movw	r22, r24
    32da:	cd 01       	movw	r24, r26
    32dc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    32e0:	dc 01       	movw	r26, r24
    32e2:	cb 01       	movw	r24, r22
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
    32e8:	0f c0       	rjmp	.+30     	; 0x3308 <LCD_displayCharacter+0x3a6>
    32ea:	89 e1       	ldi	r24, 0x19	; 25
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	9c 83       	std	Y+4, r25	; 0x04
    32f0:	8b 83       	std	Y+3, r24	; 0x03
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	9c 81       	ldd	r25, Y+4	; 0x04
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <LCD_displayCharacter+0x394>
    32fa:	9c 83       	std	Y+4, r25	; 0x04
    32fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	9e 81       	ldd	r25, Y+6	; 0x06
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	9e 83       	std	Y+6, r25	; 0x06
    3306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3308:	8d 81       	ldd	r24, Y+5	; 0x05
    330a:	9e 81       	ldd	r25, Y+6	; 0x06
    330c:	00 97       	sbiw	r24, 0x00	; 0
    330e:	69 f7       	brne	.-38     	; 0x32ea <LCD_displayCharacter+0x388>
    3310:	14 c0       	rjmp	.+40     	; 0x333a <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3312:	6f 81       	ldd	r22, Y+7	; 0x07
    3314:	78 85       	ldd	r23, Y+8	; 0x08
    3316:	89 85       	ldd	r24, Y+9	; 0x09
    3318:	9a 85       	ldd	r25, Y+10	; 0x0a
    331a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	9e 83       	std	Y+6, r25	; 0x06
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	8d 81       	ldd	r24, Y+5	; 0x05
    3328:	9e 81       	ldd	r25, Y+6	; 0x06
    332a:	9a 83       	std	Y+2, r25	; 0x02
    332c:	89 83       	std	Y+1, r24	; 0x01
    332e:	89 81       	ldd	r24, Y+1	; 0x01
    3330:	9a 81       	ldd	r25, Y+2	; 0x02
    3332:	01 97       	sbiw	r24, 0x01	; 1
    3334:	f1 f7       	brne	.-4      	; 0x3332 <LCD_displayCharacter+0x3d0>
    3336:	9a 83       	std	Y+2, r25	; 0x02
    3338:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    333a:	ea 96       	adiw	r28, 0x3a	; 58
    333c:	0f b6       	in	r0, 0x3f	; 63
    333e:	f8 94       	cli
    3340:	de bf       	out	0x3e, r29	; 62
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	cd bf       	out	0x3d, r28	; 61
    3346:	cf 91       	pop	r28
    3348:	df 91       	pop	r29
    334a:	08 95       	ret

0000334c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    334c:	df 93       	push	r29
    334e:	cf 93       	push	r28
    3350:	00 d0       	rcall	.+0      	; 0x3352 <LCD_displayString+0x6>
    3352:	0f 92       	push	r0
    3354:	cd b7       	in	r28, 0x3d	; 61
    3356:	de b7       	in	r29, 0x3e	; 62
    3358:	9b 83       	std	Y+3, r25	; 0x03
    335a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    335c:	19 82       	std	Y+1, r1	; 0x01
    335e:	0e c0       	rjmp	.+28     	; 0x337c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3360:	89 81       	ldd	r24, Y+1	; 0x01
    3362:	28 2f       	mov	r18, r24
    3364:	30 e0       	ldi	r19, 0x00	; 0
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	9b 81       	ldd	r25, Y+3	; 0x03
    336a:	fc 01       	movw	r30, r24
    336c:	e2 0f       	add	r30, r18
    336e:	f3 1f       	adc	r31, r19
    3370:	80 81       	ld	r24, Z
    3372:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <LCD_displayCharacter>
		i++;
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    337c:	89 81       	ldd	r24, Y+1	; 0x01
    337e:	28 2f       	mov	r18, r24
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	fc 01       	movw	r30, r24
    3388:	e2 0f       	add	r30, r18
    338a:	f3 1f       	adc	r31, r19
    338c:	80 81       	ld	r24, Z
    338e:	88 23       	and	r24, r24
    3390:	39 f7       	brne	.-50     	; 0x3360 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <LCD_moveCursor+0x6>
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <LCD_moveCursor+0x8>
    33a6:	0f 92       	push	r0
    33a8:	cd b7       	in	r28, 0x3d	; 61
    33aa:	de b7       	in	r29, 0x3e	; 62
    33ac:	8a 83       	std	Y+2, r24	; 0x02
    33ae:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    33b0:	8a 81       	ldd	r24, Y+2	; 0x02
    33b2:	28 2f       	mov	r18, r24
    33b4:	30 e0       	ldi	r19, 0x00	; 0
    33b6:	3d 83       	std	Y+5, r19	; 0x05
    33b8:	2c 83       	std	Y+4, r18	; 0x04
    33ba:	8c 81       	ldd	r24, Y+4	; 0x04
    33bc:	9d 81       	ldd	r25, Y+5	; 0x05
    33be:	81 30       	cpi	r24, 0x01	; 1
    33c0:	91 05       	cpc	r25, r1
    33c2:	c1 f0       	breq	.+48     	; 0x33f4 <LCD_moveCursor+0x56>
    33c4:	2c 81       	ldd	r18, Y+4	; 0x04
    33c6:	3d 81       	ldd	r19, Y+5	; 0x05
    33c8:	22 30       	cpi	r18, 0x02	; 2
    33ca:	31 05       	cpc	r19, r1
    33cc:	2c f4       	brge	.+10     	; 0x33d8 <LCD_moveCursor+0x3a>
    33ce:	8c 81       	ldd	r24, Y+4	; 0x04
    33d0:	9d 81       	ldd	r25, Y+5	; 0x05
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	61 f0       	breq	.+24     	; 0x33ee <LCD_moveCursor+0x50>
    33d6:	19 c0       	rjmp	.+50     	; 0x340a <LCD_moveCursor+0x6c>
    33d8:	2c 81       	ldd	r18, Y+4	; 0x04
    33da:	3d 81       	ldd	r19, Y+5	; 0x05
    33dc:	22 30       	cpi	r18, 0x02	; 2
    33de:	31 05       	cpc	r19, r1
    33e0:	69 f0       	breq	.+26     	; 0x33fc <LCD_moveCursor+0x5e>
    33e2:	8c 81       	ldd	r24, Y+4	; 0x04
    33e4:	9d 81       	ldd	r25, Y+5	; 0x05
    33e6:	83 30       	cpi	r24, 0x03	; 3
    33e8:	91 05       	cpc	r25, r1
    33ea:	61 f0       	breq	.+24     	; 0x3404 <LCD_moveCursor+0x66>
    33ec:	0e c0       	rjmp	.+28     	; 0x340a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    33ee:	8b 81       	ldd	r24, Y+3	; 0x03
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	0b c0       	rjmp	.+22     	; 0x340a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    33f4:	8b 81       	ldd	r24, Y+3	; 0x03
    33f6:	80 5c       	subi	r24, 0xC0	; 192
    33f8:	89 83       	std	Y+1, r24	; 0x01
    33fa:	07 c0       	rjmp	.+14     	; 0x340a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    33fc:	8b 81       	ldd	r24, Y+3	; 0x03
    33fe:	80 5f       	subi	r24, 0xF0	; 240
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	03 c0       	rjmp	.+6      	; 0x340a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3404:	8b 81       	ldd	r24, Y+3	; 0x03
    3406:	80 5b       	subi	r24, 0xB0	; 176
    3408:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	80 68       	ori	r24, 0x80	; 128
    340e:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_sendCommand>
}
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	cf 91       	pop	r28
    341e:	df 91       	pop	r29
    3420:	08 95       	ret

00003422 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	00 d0       	rcall	.+0      	; 0x3428 <LCD_displayStringRowColumn+0x6>
    3428:	00 d0       	rcall	.+0      	; 0x342a <LCD_displayStringRowColumn+0x8>
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	6a 83       	std	Y+2, r22	; 0x02
    3432:	5c 83       	std	Y+4, r21	; 0x04
    3434:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	6a 81       	ldd	r22, Y+2	; 0x02
    343a:	0e 94 cf 19 	call	0x339e	; 0x339e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
}
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	cd b7       	in	r28, 0x3d	; 61
    345a:	de b7       	in	r29, 0x3e	; 62
    345c:	62 97       	sbiw	r28, 0x12	; 18
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	f8 94       	cli
    3462:	de bf       	out	0x3e, r29	; 62
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	cd bf       	out	0x3d, r28	; 61
    3468:	9a 8b       	std	Y+18, r25	; 0x12
    346a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    346c:	89 89       	ldd	r24, Y+17	; 0x11
    346e:	9a 89       	ldd	r25, Y+18	; 0x12
    3470:	9e 01       	movw	r18, r28
    3472:	2f 5f       	subi	r18, 0xFF	; 255
    3474:	3f 4f       	sbci	r19, 0xFF	; 255
    3476:	b9 01       	movw	r22, r18
    3478:	4a e0       	ldi	r20, 0x0A	; 10
    347a:	50 e0       	ldi	r21, 0x00	; 0
    347c:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <itoa>
   LCD_displayString(buff); /* Display the string */
    3480:	ce 01       	movw	r24, r28
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	0e 94 a6 19 	call	0x334c	; 0x334c <LCD_displayString>
}
    3488:	62 96       	adiw	r28, 0x12	; 18
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	08 95       	ret

0000349a <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	0e 94 bc 15 	call	0x2b78	; 0x2b78 <LCD_sendCommand>
}
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	08 95       	ret

000034ae <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    34ae:	2f 92       	push	r2
    34b0:	3f 92       	push	r3
    34b2:	4f 92       	push	r4
    34b4:	5f 92       	push	r5
    34b6:	6f 92       	push	r6
    34b8:	7f 92       	push	r7
    34ba:	8f 92       	push	r8
    34bc:	9f 92       	push	r9
    34be:	af 92       	push	r10
    34c0:	bf 92       	push	r11
    34c2:	cf 92       	push	r12
    34c4:	df 92       	push	r13
    34c6:	ef 92       	push	r14
    34c8:	ff 92       	push	r15
    34ca:	0f 93       	push	r16
    34cc:	1f 93       	push	r17
    34ce:	df 93       	push	r29
    34d0:	cf 93       	push	r28
    34d2:	00 d0       	rcall	.+0      	; 0x34d4 <UART_init+0x26>
    34d4:	00 d0       	rcall	.+0      	; 0x34d6 <UART_init+0x28>
    34d6:	cd b7       	in	r28, 0x3d	; 61
    34d8:	de b7       	in	r29, 0x3e	; 62
    34da:	9c 83       	std	Y+4, r25	; 0x04
    34dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    34de:	1a 82       	std	Y+2, r1	; 0x02
    34e0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    34e2:	eb e2       	ldi	r30, 0x2B	; 43
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	82 e0       	ldi	r24, 0x02	; 2
    34e8:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    34ea:	ea e2       	ldi	r30, 0x2A	; 42
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	88 e1       	ldi	r24, 0x18	; 24
    34f0:	80 83       	st	Z, r24
	
	if(_9_BITS==(Config_Ptr->parityMode))
    34f2:	eb 81       	ldd	r30, Y+3	; 0x03
    34f4:	fc 81       	ldd	r31, Y+4	; 0x04
    34f6:	82 81       	ldd	r24, Z+2	; 0x02
    34f8:	87 30       	cpi	r24, 0x07	; 7
    34fa:	39 f4       	brne	.+14     	; 0x350a <UART_init+0x5c>
	{/*RXB8 & TXB8  used for 9-bit data mode*/
		UCSRB |=(1<<RXB8) |(1<<TXB8);
    34fc:	aa e2       	ldi	r26, 0x2A	; 42
    34fe:	b0 e0       	ldi	r27, 0x00	; 0
    3500:	ea e2       	ldi	r30, 0x2A	; 42
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	83 60       	ori	r24, 0x03	; 3
    3508:	8c 93       	st	X, r24
	 * UCPOL   = 0 Used with the Synchronous operation only
	 * inserting the parity mode bits in register UCSRC according to the dynamic configuration
	 * inserting the number of stop bits in register UCSRC according to the dynamic configuration
	 * inserting the character size bits in both registers UCSRC & UCSRB according to the dynamic configuration
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    350a:	e0 e4       	ldi	r30, 0x40	; 64
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 e8       	ldi	r24, 0x80	; 128
    3510:	80 83       	st	Z, r24
	UCSRC|=(UCSRC & 0xCF)|((Config_Ptr->parityMode)<<4);
    3512:	a0 e4       	ldi	r26, 0x40	; 64
    3514:	b0 e0       	ldi	r27, 0x00	; 0
    3516:	e0 e4       	ldi	r30, 0x40	; 64
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	80 81       	ld	r24, Z
    351c:	38 2f       	mov	r19, r24
    351e:	e0 e4       	ldi	r30, 0x40	; 64
    3520:	f0 e0       	ldi	r31, 0x00	; 0
    3522:	80 81       	ld	r24, Z
    3524:	28 2f       	mov	r18, r24
    3526:	2f 7c       	andi	r18, 0xCF	; 207
    3528:	eb 81       	ldd	r30, Y+3	; 0x03
    352a:	fc 81       	ldd	r31, Y+4	; 0x04
    352c:	82 81       	ldd	r24, Z+2	; 0x02
    352e:	88 2f       	mov	r24, r24
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	82 95       	swap	r24
    3534:	92 95       	swap	r25
    3536:	90 7f       	andi	r25, 0xF0	; 240
    3538:	98 27       	eor	r25, r24
    353a:	80 7f       	andi	r24, 0xF0	; 240
    353c:	98 27       	eor	r25, r24
    353e:	82 2b       	or	r24, r18
    3540:	83 2b       	or	r24, r19
    3542:	8c 93       	st	X, r24
	UCSRC|=(UCSRC & 0xF7)|((Config_Ptr->stopBit)<<3);
    3544:	a0 e4       	ldi	r26, 0x40	; 64
    3546:	b0 e0       	ldi	r27, 0x00	; 0
    3548:	e0 e4       	ldi	r30, 0x40	; 64
    354a:	f0 e0       	ldi	r31, 0x00	; 0
    354c:	80 81       	ld	r24, Z
    354e:	38 2f       	mov	r19, r24
    3550:	e0 e4       	ldi	r30, 0x40	; 64
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	80 81       	ld	r24, Z
    3556:	28 2f       	mov	r18, r24
    3558:	27 7f       	andi	r18, 0xF7	; 247
    355a:	eb 81       	ldd	r30, Y+3	; 0x03
    355c:	fc 81       	ldd	r31, Y+4	; 0x04
    355e:	81 81       	ldd	r24, Z+1	; 0x01
    3560:	88 2f       	mov	r24, r24
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	88 0f       	add	r24, r24
    3566:	99 1f       	adc	r25, r25
    3568:	88 0f       	add	r24, r24
    356a:	99 1f       	adc	r25, r25
    356c:	88 0f       	add	r24, r24
    356e:	99 1f       	adc	r25, r25
    3570:	82 2b       	or	r24, r18
    3572:	83 2b       	or	r24, r19
    3574:	8c 93       	st	X, r24
	UCSRC|=(UCSRC & 0xF9)|(((Config_Ptr->characterSize) & 0x03)<<1);
    3576:	a0 e4       	ldi	r26, 0x40	; 64
    3578:	b0 e0       	ldi	r27, 0x00	; 0
    357a:	e0 e4       	ldi	r30, 0x40	; 64
    357c:	f0 e0       	ldi	r31, 0x00	; 0
    357e:	80 81       	ld	r24, Z
    3580:	38 2f       	mov	r19, r24
    3582:	e0 e4       	ldi	r30, 0x40	; 64
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	28 2f       	mov	r18, r24
    358a:	29 7f       	andi	r18, 0xF9	; 249
    358c:	eb 81       	ldd	r30, Y+3	; 0x03
    358e:	fc 81       	ldd	r31, Y+4	; 0x04
    3590:	80 81       	ld	r24, Z
    3592:	88 2f       	mov	r24, r24
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	83 70       	andi	r24, 0x03	; 3
    3598:	90 70       	andi	r25, 0x00	; 0
    359a:	88 0f       	add	r24, r24
    359c:	99 1f       	adc	r25, r25
    359e:	82 2b       	or	r24, r18
    35a0:	83 2b       	or	r24, r19
    35a2:	8c 93       	st	X, r24
	UCSRB|=(UCSRB & 0xFB)|(((Config_Ptr->characterSize) & 0x04)<<2);
    35a4:	aa e2       	ldi	r26, 0x2A	; 42
    35a6:	b0 e0       	ldi	r27, 0x00	; 0
    35a8:	ea e2       	ldi	r30, 0x2A	; 42
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	38 2f       	mov	r19, r24
    35b0:	ea e2       	ldi	r30, 0x2A	; 42
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	28 2f       	mov	r18, r24
    35b8:	2b 7f       	andi	r18, 0xFB	; 251
    35ba:	eb 81       	ldd	r30, Y+3	; 0x03
    35bc:	fc 81       	ldd	r31, Y+4	; 0x04
    35be:	80 81       	ld	r24, Z
    35c0:	88 2f       	mov	r24, r24
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	84 70       	andi	r24, 0x04	; 4
    35c6:	90 70       	andi	r25, 0x00	; 0
    35c8:	88 0f       	add	r24, r24
    35ca:	99 1f       	adc	r25, r25
    35cc:	88 0f       	add	r24, r24
    35ce:	99 1f       	adc	r25, r25
    35d0:	82 2b       	or	r24, r18
    35d2:	83 2b       	or	r24, r19
    35d4:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudRate * 8UL))) - 1);
    35d6:	eb 81       	ldd	r30, Y+3	; 0x03
    35d8:	fc 81       	ldd	r31, Y+4	; 0x04
    35da:	a3 80       	ldd	r10, Z+3	; 0x03
    35dc:	b4 80       	ldd	r11, Z+4	; 0x04
    35de:	c5 80       	ldd	r12, Z+5	; 0x05
    35e0:	d6 80       	ldd	r13, Z+6	; 0x06
    35e2:	e7 80       	ldd	r14, Z+7	; 0x07
    35e4:	f0 84       	ldd	r15, Z+8	; 0x08
    35e6:	01 85       	ldd	r16, Z+9	; 0x09
    35e8:	12 85       	ldd	r17, Z+10	; 0x0a
    35ea:	2a 2d       	mov	r18, r10
    35ec:	3b 2d       	mov	r19, r11
    35ee:	4c 2d       	mov	r20, r12
    35f0:	5d 2d       	mov	r21, r13
    35f2:	6e 2d       	mov	r22, r14
    35f4:	7f 2d       	mov	r23, r15
    35f6:	80 2f       	mov	r24, r16
    35f8:	91 2f       	mov	r25, r17
    35fa:	03 e0       	ldi	r16, 0x03	; 3
    35fc:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3600:	a2 2e       	mov	r10, r18
    3602:	b3 2e       	mov	r11, r19
    3604:	c4 2e       	mov	r12, r20
    3606:	d5 2e       	mov	r13, r21
    3608:	e6 2e       	mov	r14, r22
    360a:	f7 2e       	mov	r15, r23
    360c:	08 2f       	mov	r16, r24
    360e:	19 2f       	mov	r17, r25
    3610:	2a 2c       	mov	r2, r10
    3612:	3b 2c       	mov	r3, r11
    3614:	4c 2c       	mov	r4, r12
    3616:	5d 2c       	mov	r5, r13
    3618:	6e 2c       	mov	r6, r14
    361a:	7f 2c       	mov	r7, r15
    361c:	80 2e       	mov	r8, r16
    361e:	91 2e       	mov	r9, r17
    3620:	20 e4       	ldi	r18, 0x40	; 64
    3622:	32 e4       	ldi	r19, 0x42	; 66
    3624:	4f e0       	ldi	r20, 0x0F	; 15
    3626:	50 e0       	ldi	r21, 0x00	; 0
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	a2 2c       	mov	r10, r2
    3632:	b3 2c       	mov	r11, r3
    3634:	c4 2c       	mov	r12, r4
    3636:	d5 2c       	mov	r13, r5
    3638:	e6 2c       	mov	r14, r6
    363a:	f7 2c       	mov	r15, r7
    363c:	08 2d       	mov	r16, r8
    363e:	19 2d       	mov	r17, r9
    3640:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    3644:	a2 2e       	mov	r10, r18
    3646:	b3 2e       	mov	r11, r19
    3648:	c4 2e       	mov	r12, r20
    364a:	d5 2e       	mov	r13, r21
    364c:	e6 2e       	mov	r14, r22
    364e:	f7 2e       	mov	r15, r23
    3650:	08 2f       	mov	r16, r24
    3652:	19 2f       	mov	r17, r25
    3654:	2a 2d       	mov	r18, r10
    3656:	3b 2d       	mov	r19, r11
    3658:	4c 2d       	mov	r20, r12
    365a:	5d 2d       	mov	r21, r13
    365c:	6e 2d       	mov	r22, r14
    365e:	7f 2d       	mov	r23, r15
    3660:	80 2f       	mov	r24, r16
    3662:	91 2f       	mov	r25, r17
    3664:	c9 01       	movw	r24, r18
    3666:	01 97       	sbiw	r24, 0x01	; 1
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    366c:	e0 e4       	ldi	r30, 0x40	; 64
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	9a 81       	ldd	r25, Y+2	; 0x02
    3674:	89 2f       	mov	r24, r25
    3676:	99 27       	eor	r25, r25
    3678:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    367a:	e9 e2       	ldi	r30, 0x29	; 41
    367c:	f0 e0       	ldi	r31, 0x00	; 0
    367e:	89 81       	ldd	r24, Y+1	; 0x01
    3680:	80 83       	st	Z, r24
}
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	cf 91       	pop	r28
    368c:	df 91       	pop	r29
    368e:	1f 91       	pop	r17
    3690:	0f 91       	pop	r16
    3692:	ff 90       	pop	r15
    3694:	ef 90       	pop	r14
    3696:	df 90       	pop	r13
    3698:	cf 90       	pop	r12
    369a:	bf 90       	pop	r11
    369c:	af 90       	pop	r10
    369e:	9f 90       	pop	r9
    36a0:	8f 90       	pop	r8
    36a2:	7f 90       	pop	r7
    36a4:	6f 90       	pop	r6
    36a6:	5f 90       	pop	r5
    36a8:	4f 90       	pop	r4
    36aa:	3f 90       	pop	r3
    36ac:	2f 90       	pop	r2
    36ae:	08 95       	ret

000036b0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    36b0:	df 93       	push	r29
    36b2:	cf 93       	push	r28
    36b4:	0f 92       	push	r0
    36b6:	cd b7       	in	r28, 0x3d	; 61
    36b8:	de b7       	in	r29, 0x3e	; 62
    36ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    36bc:	eb e2       	ldi	r30, 0x2B	; 43
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	80 81       	ld	r24, Z
    36c2:	88 2f       	mov	r24, r24
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	80 72       	andi	r24, 0x20	; 32
    36c8:	90 70       	andi	r25, 0x00	; 0
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	b9 f3       	breq	.-18     	; 0x36bc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    36ce:	ec e2       	ldi	r30, 0x2C	; 44
    36d0:	f0 e0       	ldi	r31, 0x00	; 0
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    36d6:	0f 90       	pop	r0
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	08 95       	ret

000036de <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	cd b7       	in	r28, 0x3d	; 61
    36e4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    36e6:	eb e2       	ldi	r30, 0x2B	; 43
    36e8:	f0 e0       	ldi	r31, 0x00	; 0
    36ea:	80 81       	ld	r24, Z
    36ec:	88 23       	and	r24, r24
    36ee:	dc f7       	brge	.-10     	; 0x36e6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    36f0:	ec e2       	ldi	r30, 0x2C	; 44
    36f2:	f0 e0       	ldi	r31, 0x00	; 0
    36f4:	80 81       	ld	r24, Z
}
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	00 d0       	rcall	.+0      	; 0x3702 <UART_sendString+0x6>
    3702:	0f 92       	push	r0
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	9b 83       	std	Y+3, r25	; 0x03
    370a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    370c:	19 82       	std	Y+1, r1	; 0x01
    370e:	0e c0       	rjmp	.+28     	; 0x372c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	28 2f       	mov	r18, r24
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	8a 81       	ldd	r24, Y+2	; 0x02
    3718:	9b 81       	ldd	r25, Y+3	; 0x03
    371a:	fc 01       	movw	r30, r24
    371c:	e2 0f       	add	r30, r18
    371e:	f3 1f       	adc	r31, r19
    3720:	80 81       	ld	r24, Z
    3722:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <UART_sendByte>
		i++;
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	8f 5f       	subi	r24, 0xFF	; 255
    372a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	28 2f       	mov	r18, r24
    3730:	30 e0       	ldi	r19, 0x00	; 0
    3732:	8a 81       	ldd	r24, Y+2	; 0x02
    3734:	9b 81       	ldd	r25, Y+3	; 0x03
    3736:	fc 01       	movw	r30, r24
    3738:	e2 0f       	add	r30, r18
    373a:	f3 1f       	adc	r31, r19
    373c:	80 81       	ld	r24, Z
    373e:	88 23       	and	r24, r24
    3740:	39 f7       	brne	.-50     	; 0x3710 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	cf 91       	pop	r28
    374a:	df 91       	pop	r29
    374c:	08 95       	ret

0000374e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    374e:	0f 93       	push	r16
    3750:	1f 93       	push	r17
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	00 d0       	rcall	.+0      	; 0x3758 <UART_receiveString+0xa>
    3758:	0f 92       	push	r0
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	9b 83       	std	Y+3, r25	; 0x03
    3760:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3762:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3764:	89 81       	ldd	r24, Y+1	; 0x01
    3766:	28 2f       	mov	r18, r24
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
    376c:	9b 81       	ldd	r25, Y+3	; 0x03
    376e:	8c 01       	movw	r16, r24
    3770:	02 0f       	add	r16, r18
    3772:	13 1f       	adc	r17, r19
    3774:	0e 94 6f 1b 	call	0x36de	; 0x36de <UART_recieveByte>
    3778:	f8 01       	movw	r30, r16
    377a:	80 83       	st	Z, r24
    377c:	0f c0       	rjmp	.+30     	; 0x379c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)/*the on off button*/
	{
		i++;
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	8f 5f       	subi	r24, 0xFF	; 255
    3782:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3784:	89 81       	ldd	r24, Y+1	; 0x01
    3786:	28 2f       	mov	r18, r24
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	8a 81       	ldd	r24, Y+2	; 0x02
    378c:	9b 81       	ldd	r25, Y+3	; 0x03
    378e:	8c 01       	movw	r16, r24
    3790:	02 0f       	add	r16, r18
    3792:	13 1f       	adc	r17, r19
    3794:	0e 94 6f 1b 	call	0x36de	; 0x36de <UART_recieveByte>
    3798:	f8 01       	movw	r30, r16
    379a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)/*the on off button*/
    379c:	89 81       	ldd	r24, Y+1	; 0x01
    379e:	28 2f       	mov	r18, r24
    37a0:	30 e0       	ldi	r19, 0x00	; 0
    37a2:	8a 81       	ldd	r24, Y+2	; 0x02
    37a4:	9b 81       	ldd	r25, Y+3	; 0x03
    37a6:	fc 01       	movw	r30, r24
    37a8:	e2 0f       	add	r30, r18
    37aa:	f3 1f       	adc	r31, r19
    37ac:	80 81       	ld	r24, Z
    37ae:	8d 30       	cpi	r24, 0x0D	; 13
    37b0:	31 f7       	brne	.-52     	; 0x377e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	28 2f       	mov	r18, r24
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ba:	9b 81       	ldd	r25, Y+3	; 0x03
    37bc:	fc 01       	movw	r30, r24
    37be:	e2 0f       	add	r30, r18
    37c0:	f3 1f       	adc	r31, r19
    37c2:	10 82       	st	Z, r1
}
    37c4:	0f 90       	pop	r0
    37c6:	0f 90       	pop	r0
    37c8:	0f 90       	pop	r0
    37ca:	cf 91       	pop	r28
    37cc:	df 91       	pop	r29
    37ce:	1f 91       	pop	r17
    37d0:	0f 91       	pop	r16
    37d2:	08 95       	ret

000037d4 <__mulsi3>:
    37d4:	62 9f       	mul	r22, r18
    37d6:	d0 01       	movw	r26, r0
    37d8:	73 9f       	mul	r23, r19
    37da:	f0 01       	movw	r30, r0
    37dc:	82 9f       	mul	r24, r18
    37de:	e0 0d       	add	r30, r0
    37e0:	f1 1d       	adc	r31, r1
    37e2:	64 9f       	mul	r22, r20
    37e4:	e0 0d       	add	r30, r0
    37e6:	f1 1d       	adc	r31, r1
    37e8:	92 9f       	mul	r25, r18
    37ea:	f0 0d       	add	r31, r0
    37ec:	83 9f       	mul	r24, r19
    37ee:	f0 0d       	add	r31, r0
    37f0:	74 9f       	mul	r23, r20
    37f2:	f0 0d       	add	r31, r0
    37f4:	65 9f       	mul	r22, r21
    37f6:	f0 0d       	add	r31, r0
    37f8:	99 27       	eor	r25, r25
    37fa:	72 9f       	mul	r23, r18
    37fc:	b0 0d       	add	r27, r0
    37fe:	e1 1d       	adc	r30, r1
    3800:	f9 1f       	adc	r31, r25
    3802:	63 9f       	mul	r22, r19
    3804:	b0 0d       	add	r27, r0
    3806:	e1 1d       	adc	r30, r1
    3808:	f9 1f       	adc	r31, r25
    380a:	bd 01       	movw	r22, r26
    380c:	cf 01       	movw	r24, r30
    380e:	11 24       	eor	r1, r1
    3810:	08 95       	ret

00003812 <__udivmodsi4>:
    3812:	a1 e2       	ldi	r26, 0x21	; 33
    3814:	1a 2e       	mov	r1, r26
    3816:	aa 1b       	sub	r26, r26
    3818:	bb 1b       	sub	r27, r27
    381a:	fd 01       	movw	r30, r26
    381c:	0d c0       	rjmp	.+26     	; 0x3838 <__udivmodsi4_ep>

0000381e <__udivmodsi4_loop>:
    381e:	aa 1f       	adc	r26, r26
    3820:	bb 1f       	adc	r27, r27
    3822:	ee 1f       	adc	r30, r30
    3824:	ff 1f       	adc	r31, r31
    3826:	a2 17       	cp	r26, r18
    3828:	b3 07       	cpc	r27, r19
    382a:	e4 07       	cpc	r30, r20
    382c:	f5 07       	cpc	r31, r21
    382e:	20 f0       	brcs	.+8      	; 0x3838 <__udivmodsi4_ep>
    3830:	a2 1b       	sub	r26, r18
    3832:	b3 0b       	sbc	r27, r19
    3834:	e4 0b       	sbc	r30, r20
    3836:	f5 0b       	sbc	r31, r21

00003838 <__udivmodsi4_ep>:
    3838:	66 1f       	adc	r22, r22
    383a:	77 1f       	adc	r23, r23
    383c:	88 1f       	adc	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	1a 94       	dec	r1
    3842:	69 f7       	brne	.-38     	; 0x381e <__udivmodsi4_loop>
    3844:	60 95       	com	r22
    3846:	70 95       	com	r23
    3848:	80 95       	com	r24
    384a:	90 95       	com	r25
    384c:	9b 01       	movw	r18, r22
    384e:	ac 01       	movw	r20, r24
    3850:	bd 01       	movw	r22, r26
    3852:	cf 01       	movw	r24, r30
    3854:	08 95       	ret

00003856 <__prologue_saves__>:
    3856:	2f 92       	push	r2
    3858:	3f 92       	push	r3
    385a:	4f 92       	push	r4
    385c:	5f 92       	push	r5
    385e:	6f 92       	push	r6
    3860:	7f 92       	push	r7
    3862:	8f 92       	push	r8
    3864:	9f 92       	push	r9
    3866:	af 92       	push	r10
    3868:	bf 92       	push	r11
    386a:	cf 92       	push	r12
    386c:	df 92       	push	r13
    386e:	ef 92       	push	r14
    3870:	ff 92       	push	r15
    3872:	0f 93       	push	r16
    3874:	1f 93       	push	r17
    3876:	cf 93       	push	r28
    3878:	df 93       	push	r29
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
    387e:	ca 1b       	sub	r28, r26
    3880:	db 0b       	sbc	r29, r27
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	09 94       	ijmp

0000388e <__epilogue_restores__>:
    388e:	2a 88       	ldd	r2, Y+18	; 0x12
    3890:	39 88       	ldd	r3, Y+17	; 0x11
    3892:	48 88       	ldd	r4, Y+16	; 0x10
    3894:	5f 84       	ldd	r5, Y+15	; 0x0f
    3896:	6e 84       	ldd	r6, Y+14	; 0x0e
    3898:	7d 84       	ldd	r7, Y+13	; 0x0d
    389a:	8c 84       	ldd	r8, Y+12	; 0x0c
    389c:	9b 84       	ldd	r9, Y+11	; 0x0b
    389e:	aa 84       	ldd	r10, Y+10	; 0x0a
    38a0:	b9 84       	ldd	r11, Y+9	; 0x09
    38a2:	c8 84       	ldd	r12, Y+8	; 0x08
    38a4:	df 80       	ldd	r13, Y+7	; 0x07
    38a6:	ee 80       	ldd	r14, Y+6	; 0x06
    38a8:	fd 80       	ldd	r15, Y+5	; 0x05
    38aa:	0c 81       	ldd	r16, Y+4	; 0x04
    38ac:	1b 81       	ldd	r17, Y+3	; 0x03
    38ae:	aa 81       	ldd	r26, Y+2	; 0x02
    38b0:	b9 81       	ldd	r27, Y+1	; 0x01
    38b2:	ce 0f       	add	r28, r30
    38b4:	d1 1d       	adc	r29, r1
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	ed 01       	movw	r28, r26
    38c2:	08 95       	ret

000038c4 <itoa>:
    38c4:	fb 01       	movw	r30, r22
    38c6:	9f 01       	movw	r18, r30
    38c8:	e8 94       	clt
    38ca:	42 30       	cpi	r20, 0x02	; 2
    38cc:	c4 f0       	brlt	.+48     	; 0x38fe <itoa+0x3a>
    38ce:	45 32       	cpi	r20, 0x25	; 37
    38d0:	b4 f4       	brge	.+44     	; 0x38fe <itoa+0x3a>
    38d2:	4a 30       	cpi	r20, 0x0A	; 10
    38d4:	29 f4       	brne	.+10     	; 0x38e0 <itoa+0x1c>
    38d6:	97 fb       	bst	r25, 7
    38d8:	1e f4       	brtc	.+6      	; 0x38e0 <itoa+0x1c>
    38da:	90 95       	com	r25
    38dc:	81 95       	neg	r24
    38de:	9f 4f       	sbci	r25, 0xFF	; 255
    38e0:	64 2f       	mov	r22, r20
    38e2:	77 27       	eor	r23, r23
    38e4:	0e 94 93 1c 	call	0x3926	; 0x3926 <__udivmodhi4>
    38e8:	80 5d       	subi	r24, 0xD0	; 208
    38ea:	8a 33       	cpi	r24, 0x3A	; 58
    38ec:	0c f0       	brlt	.+2      	; 0x38f0 <itoa+0x2c>
    38ee:	89 5d       	subi	r24, 0xD9	; 217
    38f0:	81 93       	st	Z+, r24
    38f2:	cb 01       	movw	r24, r22
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	a1 f7       	brne	.-24     	; 0x38e0 <itoa+0x1c>
    38f8:	16 f4       	brtc	.+4      	; 0x38fe <itoa+0x3a>
    38fa:	5d e2       	ldi	r21, 0x2D	; 45
    38fc:	51 93       	st	Z+, r21
    38fe:	10 82       	st	Z, r1
    3900:	c9 01       	movw	r24, r18
    3902:	0c 94 83 1c 	jmp	0x3906	; 0x3906 <strrev>

00003906 <strrev>:
    3906:	dc 01       	movw	r26, r24
    3908:	fc 01       	movw	r30, r24
    390a:	67 2f       	mov	r22, r23
    390c:	71 91       	ld	r23, Z+
    390e:	77 23       	and	r23, r23
    3910:	e1 f7       	brne	.-8      	; 0x390a <strrev+0x4>
    3912:	32 97       	sbiw	r30, 0x02	; 2
    3914:	04 c0       	rjmp	.+8      	; 0x391e <strrev+0x18>
    3916:	7c 91       	ld	r23, X
    3918:	6d 93       	st	X+, r22
    391a:	70 83       	st	Z, r23
    391c:	62 91       	ld	r22, -Z
    391e:	ae 17       	cp	r26, r30
    3920:	bf 07       	cpc	r27, r31
    3922:	c8 f3       	brcs	.-14     	; 0x3916 <strrev+0x10>
    3924:	08 95       	ret

00003926 <__udivmodhi4>:
    3926:	aa 1b       	sub	r26, r26
    3928:	bb 1b       	sub	r27, r27
    392a:	51 e1       	ldi	r21, 0x11	; 17
    392c:	07 c0       	rjmp	.+14     	; 0x393c <__udivmodhi4_ep>

0000392e <__udivmodhi4_loop>:
    392e:	aa 1f       	adc	r26, r26
    3930:	bb 1f       	adc	r27, r27
    3932:	a6 17       	cp	r26, r22
    3934:	b7 07       	cpc	r27, r23
    3936:	10 f0       	brcs	.+4      	; 0x393c <__udivmodhi4_ep>
    3938:	a6 1b       	sub	r26, r22
    393a:	b7 0b       	sbc	r27, r23

0000393c <__udivmodhi4_ep>:
    393c:	88 1f       	adc	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	5a 95       	dec	r21
    3942:	a9 f7       	brne	.-22     	; 0x392e <__udivmodhi4_loop>
    3944:	80 95       	com	r24
    3946:	90 95       	com	r25
    3948:	bc 01       	movw	r22, r24
    394a:	cd 01       	movw	r24, r26
    394c:	08 95       	ret

0000394e <_exit>:
    394e:	f8 94       	cli

00003950 <__stop_program>:
    3950:	ff cf       	rjmp	.-2      	; 0x3950 <__stop_program>
