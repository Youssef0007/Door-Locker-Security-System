
MC_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  000034f2  00003586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800186  00800186  000036ac  2**0
                  ALLOC
  3 .stab         00002880  00000000  00000000  000036ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016b2  00000000  00000000  00005f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000075de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d0  00000000  00000000  0000775e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000258f  00000000  00000000  0000792e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011c4  00000000  00000000  00009ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000010d8  00000000  00000000  0000b081  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c15c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000336  00000000  00000000  0000c2fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000173a  00000000  00000000  0000c632  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  0000dd6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 54 15 	jmp	0x2aa8	; 0x2aa8 <__vector_3>
      10:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 bb 14 	jmp	0x2976	; 0x2976 <__vector_8>
      24:	0c 94 55 14 	jmp	0x28aa	; 0x28aa <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 39       	cpi	r26, 0x9F	; 159
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 97 0c 	call	0x192e	; 0x192e <main>
      8a:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 3d 0a 	call	0x147a	; 0x147a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
     1bc:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 9d 0a 	call	0x153a	; 0x153a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x56f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__stack+0x8f>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	88 59       	subi	r24, 0x98	; 152
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__stack+0x73>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__stack+0x73>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__stack+0x73>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0xa2d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__stack+0xb5>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__stack+0xe9>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__stack+0xdf>
     532:	28 f0       	brcs	.+10     	; 0x53e <__stack+0xdf>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__stack+0x10d>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__stack+0x10d>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__stack+0x105>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__stack+0x10d>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__stack+0x11d>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__stack+0x115>
     580:	88 59       	subi	r24, 0x98	; 152
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__stack+0x167>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__stack+0x3a3>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__stack+0x179>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__stack+0x171>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__stack+0x191>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__stack+0x189>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__stack+0x1a9>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__stack+0x1a1>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__stack+0x1c1>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__stack+0x1b9>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__stack+0x2b9>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__stack+0x2b9>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__stack+0x2b9>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__stack+0x35d>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__stack+0x35d>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__stack+0x35d>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__stack+0x375>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__stack+0x36d>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x49f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x49f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x49f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x547>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x547>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x547>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0xa33>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x57b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0xa1d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x5af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x5a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x5a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x5d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x5d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x5cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x5d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x5e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x5db>
     a46:	88 59       	subi	r24, 0x98	; 152
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x637>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x621>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0xa05>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x635>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0xa05>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0xa1d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x649>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x641>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x661>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x659>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x68d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x685>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x6a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x6a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x6c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x6b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x6d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x6cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x7b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x7b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x7b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 1e 1a 	call	0x343c	; 0x343c <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x863>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x863>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x863>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 ff 19 	call	0x33fe	; 0x33fe <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x977>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x9eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x9a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0xa2d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x9dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x9d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0xa2d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0xa2d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0xa33>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0xa33>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0xa3b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__>

00000ed2 <_fpadd_parts>:
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__>
     ede:	dc 01       	movw	r26, r24
     ee0:	2b 01       	movw	r4, r22
     ee2:	fa 01       	movw	r30, r20
     ee4:	9c 91       	ld	r25, X
     ee6:	92 30       	cpi	r25, 0x02	; 2
     ee8:	08 f4       	brcc	.+2      	; 0xeec <_fpadd_parts+0x1a>
     eea:	39 c1       	rjmp	.+626    	; 0x115e <_fpadd_parts+0x28c>
     eec:	eb 01       	movw	r28, r22
     eee:	88 81       	ld	r24, Y
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <_fpadd_parts+0x24>
     ef4:	33 c1       	rjmp	.+614    	; 0x115c <_fpadd_parts+0x28a>
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	69 f4       	brne	.+26     	; 0xf14 <_fpadd_parts+0x42>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f0       	breq	.+2      	; 0xf00 <_fpadd_parts+0x2e>
     efe:	2f c1       	rjmp	.+606    	; 0x115e <_fpadd_parts+0x28c>
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	98 17       	cp	r25, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <_fpadd_parts+0x3c>
     f0c:	28 c1       	rjmp	.+592    	; 0x115e <_fpadd_parts+0x28c>
     f0e:	a0 e6       	ldi	r26, 0x60	; 96
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	25 c1       	rjmp	.+586    	; 0x115e <_fpadd_parts+0x28c>
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	09 f4       	brne	.+2      	; 0xf1a <_fpadd_parts+0x48>
     f18:	21 c1       	rjmp	.+578    	; 0x115c <_fpadd_parts+0x28a>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <_fpadd_parts+0x76>
     f1e:	92 30       	cpi	r25, 0x02	; 2
     f20:	09 f0       	breq	.+2      	; 0xf24 <_fpadd_parts+0x52>
     f22:	1d c1       	rjmp	.+570    	; 0x115e <_fpadd_parts+0x28c>
     f24:	9a 01       	movw	r18, r20
     f26:	ad 01       	movw	r20, r26
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	ea 01       	movw	r28, r20
     f2c:	09 90       	ld	r0, Y+
     f2e:	ae 01       	movw	r20, r28
     f30:	e9 01       	movw	r28, r18
     f32:	09 92       	st	Y+, r0
     f34:	9e 01       	movw	r18, r28
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	c1 f7       	brne	.-16     	; 0xf2a <_fpadd_parts+0x58>
     f3a:	e2 01       	movw	r28, r4
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	9c 91       	ld	r25, X
     f42:	89 23       	and	r24, r25
     f44:	81 83       	std	Z+1, r24	; 0x01
     f46:	08 c1       	rjmp	.+528    	; 0x1158 <_fpadd_parts+0x286>
     f48:	92 30       	cpi	r25, 0x02	; 2
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_fpadd_parts+0x7c>
     f4c:	07 c1       	rjmp	.+526    	; 0x115c <_fpadd_parts+0x28a>
     f4e:	12 96       	adiw	r26, 0x02	; 2
     f50:	2d 90       	ld	r2, X+
     f52:	3c 90       	ld	r3, X
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	eb 01       	movw	r28, r22
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	ad 90       	ld	r10, X+
     f60:	bd 90       	ld	r11, X+
     f62:	cd 90       	ld	r12, X+
     f64:	dc 90       	ld	r13, X
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	ec 80       	ldd	r14, Y+4	; 0x04
     f6a:	fd 80       	ldd	r15, Y+5	; 0x05
     f6c:	0e 81       	ldd	r16, Y+6	; 0x06
     f6e:	1f 81       	ldd	r17, Y+7	; 0x07
     f70:	91 01       	movw	r18, r2
     f72:	28 1b       	sub	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	b9 01       	movw	r22, r18
     f78:	37 ff       	sbrs	r19, 7
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <_fpadd_parts+0xb2>
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	60 32       	cpi	r22, 0x20	; 32
     f86:	71 05       	cpc	r23, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <_fpadd_parts+0xba>
     f8a:	61 c0       	rjmp	.+194    	; 0x104e <_fpadd_parts+0x17c>
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	6c f5       	brge	.+90     	; 0xfec <_fpadd_parts+0x11a>
     f92:	37 01       	movw	r6, r14
     f94:	48 01       	movw	r8, r16
     f96:	06 2e       	mov	r0, r22
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_fpadd_parts+0xd0>
     f9a:	96 94       	lsr	r9
     f9c:	87 94       	ror	r8
     f9e:	77 94       	ror	r7
     fa0:	67 94       	ror	r6
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <_fpadd_parts+0xc8>
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <_fpadd_parts+0xe6>
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	44 1f       	adc	r20, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	6a 95       	dec	r22
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <_fpadd_parts+0xde>
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	40 40       	sbci	r20, 0x00	; 0
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	2e 21       	and	r18, r14
     fc6:	3f 21       	and	r19, r15
     fc8:	40 23       	and	r20, r16
     fca:	51 23       	and	r21, r17
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	41 05       	cpc	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	21 f0       	breq	.+8      	; 0xfde <_fpadd_parts+0x10c>
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	79 01       	movw	r14, r18
     fe0:	8a 01       	movw	r16, r20
     fe2:	e6 28       	or	r14, r6
     fe4:	f7 28       	or	r15, r7
     fe6:	08 29       	or	r16, r8
     fe8:	19 29       	or	r17, r9
     fea:	3c c0       	rjmp	.+120    	; 0x1064 <_fpadd_parts+0x192>
     fec:	23 2b       	or	r18, r19
     fee:	d1 f1       	breq	.+116    	; 0x1064 <_fpadd_parts+0x192>
     ff0:	26 0e       	add	r2, r22
     ff2:	37 1e       	adc	r3, r23
     ff4:	35 01       	movw	r6, r10
     ff6:	46 01       	movw	r8, r12
     ff8:	06 2e       	mov	r0, r22
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <_fpadd_parts+0x132>
     ffc:	96 94       	lsr	r9
     ffe:	87 94       	ror	r8
    1000:	77 94       	ror	r7
    1002:	67 94       	ror	r6
    1004:	0a 94       	dec	r0
    1006:	d2 f7       	brpl	.-12     	; 0xffc <_fpadd_parts+0x12a>
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <_fpadd_parts+0x148>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	44 1f       	adc	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	6a 95       	dec	r22
    101c:	d2 f7       	brpl	.-12     	; 0x1012 <_fpadd_parts+0x140>
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	40 40       	sbci	r20, 0x00	; 0
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	2a 21       	and	r18, r10
    1028:	3b 21       	and	r19, r11
    102a:	4c 21       	and	r20, r12
    102c:	5d 21       	and	r21, r13
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 05       	cpc	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	21 f0       	breq	.+8      	; 0x1040 <_fpadd_parts+0x16e>
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	59 01       	movw	r10, r18
    1042:	6a 01       	movw	r12, r20
    1044:	a6 28       	or	r10, r6
    1046:	b7 28       	or	r11, r7
    1048:	c8 28       	or	r12, r8
    104a:	d9 28       	or	r13, r9
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <_fpadd_parts+0x192>
    104e:	82 15       	cp	r24, r2
    1050:	93 05       	cpc	r25, r3
    1052:	2c f0       	brlt	.+10     	; 0x105e <_fpadd_parts+0x18c>
    1054:	1c 01       	movw	r2, r24
    1056:	aa 24       	eor	r10, r10
    1058:	bb 24       	eor	r11, r11
    105a:	65 01       	movw	r12, r10
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <_fpadd_parts+0x192>
    105e:	ee 24       	eor	r14, r14
    1060:	ff 24       	eor	r15, r15
    1062:	87 01       	movw	r16, r14
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	9c 91       	ld	r25, X
    1068:	d2 01       	movw	r26, r4
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	8c 91       	ld	r24, X
    106e:	98 17       	cp	r25, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <_fpadd_parts+0x1a2>
    1072:	45 c0       	rjmp	.+138    	; 0x10fe <_fpadd_parts+0x22c>
    1074:	99 23       	and	r25, r25
    1076:	39 f0       	breq	.+14     	; 0x1086 <_fpadd_parts+0x1b4>
    1078:	a8 01       	movw	r20, r16
    107a:	97 01       	movw	r18, r14
    107c:	2a 19       	sub	r18, r10
    107e:	3b 09       	sbc	r19, r11
    1080:	4c 09       	sbc	r20, r12
    1082:	5d 09       	sbc	r21, r13
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <_fpadd_parts+0x1c0>
    1086:	a6 01       	movw	r20, r12
    1088:	95 01       	movw	r18, r10
    108a:	2e 19       	sub	r18, r14
    108c:	3f 09       	sbc	r19, r15
    108e:	40 0b       	sbc	r20, r16
    1090:	51 0b       	sbc	r21, r17
    1092:	57 fd       	sbrc	r21, 7
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <_fpadd_parts+0x1d4>
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	33 82       	std	Z+3, r3	; 0x03
    109a:	22 82       	std	Z+2, r2	; 0x02
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
    10a0:	46 83       	std	Z+6, r20	; 0x06
    10a2:	57 83       	std	Z+7, r21	; 0x07
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <_fpadd_parts+0x20e>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	81 83       	std	Z+1, r24	; 0x01
    10aa:	33 82       	std	Z+3, r3	; 0x03
    10ac:	22 82       	std	Z+2, r2	; 0x02
    10ae:	88 27       	eor	r24, r24
    10b0:	99 27       	eor	r25, r25
    10b2:	dc 01       	movw	r26, r24
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	a4 0b       	sbc	r26, r20
    10ba:	b5 0b       	sbc	r27, r21
    10bc:	84 83       	std	Z+4, r24	; 0x04
    10be:	95 83       	std	Z+5, r25	; 0x05
    10c0:	a6 83       	std	Z+6, r26	; 0x06
    10c2:	b7 83       	std	Z+7, r27	; 0x07
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <_fpadd_parts+0x20e>
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	24 83       	std	Z+4, r18	; 0x04
    10d0:	35 83       	std	Z+5, r19	; 0x05
    10d2:	46 83       	std	Z+6, r20	; 0x06
    10d4:	57 83       	std	Z+7, r21	; 0x07
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	24 81       	ldd	r18, Z+4	; 0x04
    10e2:	35 81       	ldd	r19, Z+5	; 0x05
    10e4:	46 81       	ldd	r20, Z+6	; 0x06
    10e6:	57 81       	ldd	r21, Z+7	; 0x07
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 09       	sbc	r26, r1
    10f0:	b1 09       	sbc	r27, r1
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	af 4f       	sbci	r26, 0xFF	; 255
    10f8:	bf 43       	sbci	r27, 0x3F	; 63
    10fa:	28 f3       	brcs	.-54     	; 0x10c6 <_fpadd_parts+0x1f4>
    10fc:	0b c0       	rjmp	.+22     	; 0x1114 <_fpadd_parts+0x242>
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	33 82       	std	Z+3, r3	; 0x03
    1102:	22 82       	std	Z+2, r2	; 0x02
    1104:	ea 0c       	add	r14, r10
    1106:	fb 1c       	adc	r15, r11
    1108:	0c 1d       	adc	r16, r12
    110a:	1d 1d       	adc	r17, r13
    110c:	e4 82       	std	Z+4, r14	; 0x04
    110e:	f5 82       	std	Z+5, r15	; 0x05
    1110:	06 83       	std	Z+6, r16	; 0x06
    1112:	17 83       	std	Z+7, r17	; 0x07
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	80 83       	st	Z, r24
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	57 ff       	sbrs	r21, 7
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <_fpadd_parts+0x286>
    1124:	c9 01       	movw	r24, r18
    1126:	aa 27       	eor	r26, r26
    1128:	97 fd       	sbrc	r25, 7
    112a:	a0 95       	com	r26
    112c:	ba 2f       	mov	r27, r26
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	a0 70       	andi	r26, 0x00	; 0
    1134:	b0 70       	andi	r27, 0x00	; 0
    1136:	56 95       	lsr	r21
    1138:	47 95       	ror	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	82 2b       	or	r24, r18
    1140:	93 2b       	or	r25, r19
    1142:	a4 2b       	or	r26, r20
    1144:	b5 2b       	or	r27, r21
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	95 83       	std	Z+5, r25	; 0x05
    114a:	a6 83       	std	Z+6, r26	; 0x06
    114c:	b7 83       	std	Z+7, r27	; 0x07
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	df 01       	movw	r26, r30
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_fpadd_parts+0x28c>
    115c:	d2 01       	movw	r26, r4
    115e:	cd 01       	movw	r24, r26
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	e2 e1       	ldi	r30, 0x12	; 18
    1166:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__>

0000116a <__subsf3>:
    116a:	a0 e2       	ldi	r26, 0x20	; 32
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	3e 83       	std	Y+6, r19	; 0x06
    1182:	4f 83       	std	Y+7, r20	; 0x07
    1184:	58 87       	std	Y+8, r21	; 0x08
    1186:	e9 e0       	ldi	r30, 0x09	; 9
    1188:	ee 2e       	mov	r14, r30
    118a:	f1 2c       	mov	r15, r1
    118c:	ec 0e       	add	r14, r28
    118e:	fd 1e       	adc	r15, r29
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5e       	subi	r16, 0xEF	; 239
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	b8 01       	movw	r22, r16
    11a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11aa:	8a 89       	ldd	r24, Y+18	; 0x12
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	89 27       	eor	r24, r25
    11b0:	8a 8b       	std	Y+18, r24	; 0x12
    11b2:	c7 01       	movw	r24, r14
    11b4:	b8 01       	movw	r22, r16
    11b6:	ae 01       	movw	r20, r28
    11b8:	47 5e       	subi	r20, 0xE7	; 231
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    11c0:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    11c4:	a0 96       	adiw	r28, 0x20	; 32
    11c6:	e6 e0       	ldi	r30, 0x06	; 6
    11c8:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

000011cc <__addsf3>:
    11cc:	a0 e2       	ldi	r26, 0x20	; 32
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
    11d8:	69 83       	std	Y+1, r22	; 0x01
    11da:	7a 83       	std	Y+2, r23	; 0x02
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	3e 83       	std	Y+6, r19	; 0x06
    11e4:	4f 83       	std	Y+7, r20	; 0x07
    11e6:	58 87       	std	Y+8, r21	; 0x08
    11e8:	f9 e0       	ldi	r31, 0x09	; 9
    11ea:	ef 2e       	mov	r14, r31
    11ec:	f1 2c       	mov	r15, r1
    11ee:	ec 0e       	add	r14, r28
    11f0:	fd 1e       	adc	r15, r29
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	b7 01       	movw	r22, r14
    11f8:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5e       	subi	r16, 0xEF	; 239
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	05 96       	adiw	r24, 0x05	; 5
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    120c:	c7 01       	movw	r24, r14
    120e:	b8 01       	movw	r22, r16
    1210:	ae 01       	movw	r20, r28
    1212:	47 5e       	subi	r20, 0xE7	; 231
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    121a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    121e:	a0 96       	adiw	r28, 0x20	; 32
    1220:	e6 e0       	ldi	r30, 0x06	; 6
    1222:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

00001226 <__mulsf3>:
    1226:	a0 e2       	ldi	r26, 0x20	; 32
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e1       	ldi	r30, 0x19	; 25
    122c:	f9 e0       	ldi	r31, 0x09	; 9
    122e:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__>
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	2d 83       	std	Y+5, r18	; 0x05
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	4f 83       	std	Y+7, r20	; 0x07
    1240:	58 87       	std	Y+8, r21	; 0x08
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	be 01       	movw	r22, r28
    1248:	67 5f       	subi	r22, 0xF7	; 247
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    1250:	ce 01       	movw	r24, r28
    1252:	05 96       	adiw	r24, 0x05	; 5
    1254:	be 01       	movw	r22, r28
    1256:	6f 5e       	subi	r22, 0xEF	; 239
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    125e:	99 85       	ldd	r25, Y+9	; 0x09
    1260:	92 30       	cpi	r25, 0x02	; 2
    1262:	88 f0       	brcs	.+34     	; 0x1286 <__mulsf3+0x60>
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	c8 f0       	brcs	.+50     	; 0x129c <__mulsf3+0x76>
    126a:	94 30       	cpi	r25, 0x04	; 4
    126c:	19 f4       	brne	.+6      	; 0x1274 <__mulsf3+0x4e>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	51 f4       	brne	.+20     	; 0x1286 <__mulsf3+0x60>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__mulsf3+0x56>
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	29 f4       	brne	.+10     	; 0x1282 <__mulsf3+0x5c>
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	81 f4       	brne	.+32     	; 0x129c <__mulsf3+0x76>
    127c:	80 e6       	ldi	r24, 0x60	; 96
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	c6 c0       	rjmp	.+396    	; 0x140e <__mulsf3+0x1e8>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	49 f4       	brne	.+18     	; 0x1298 <__mulsf3+0x72>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	8a 89       	ldd	r24, Y+18	; 0x12
    128c:	98 13       	cpse	r25, r24
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	2a 87       	std	Y+10, r18	; 0x0a
    1292:	ce 01       	movw	r24, r28
    1294:	09 96       	adiw	r24, 0x09	; 9
    1296:	bb c0       	rjmp	.+374    	; 0x140e <__mulsf3+0x1e8>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	49 f4       	brne	.+18     	; 0x12ae <__mulsf3+0x88>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	8a 89       	ldd	r24, Y+18	; 0x12
    12a2:	98 13       	cpse	r25, r24
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	2a 8b       	std	Y+18, r18	; 0x12
    12a8:	ce 01       	movw	r24, r28
    12aa:	41 96       	adiw	r24, 0x11	; 17
    12ac:	b0 c0       	rjmp	.+352    	; 0x140e <__mulsf3+0x1e8>
    12ae:	2d 84       	ldd	r2, Y+13	; 0x0d
    12b0:	3e 84       	ldd	r3, Y+14	; 0x0e
    12b2:	4f 84       	ldd	r4, Y+15	; 0x0f
    12b4:	58 88       	ldd	r5, Y+16	; 0x10
    12b6:	6d 88       	ldd	r6, Y+21	; 0x15
    12b8:	7e 88       	ldd	r7, Y+22	; 0x16
    12ba:	8f 88       	ldd	r8, Y+23	; 0x17
    12bc:	98 8c       	ldd	r9, Y+24	; 0x18
    12be:	ee 24       	eor	r14, r14
    12c0:	ff 24       	eor	r15, r15
    12c2:	87 01       	movw	r16, r14
    12c4:	aa 24       	eor	r10, r10
    12c6:	bb 24       	eor	r11, r11
    12c8:	65 01       	movw	r12, r10
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	c1 01       	movw	r24, r2
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	89 2b       	or	r24, r25
    12de:	e9 f0       	breq	.+58     	; 0x131a <__mulsf3+0xf4>
    12e0:	e6 0c       	add	r14, r6
    12e2:	f7 1c       	adc	r15, r7
    12e4:	08 1d       	adc	r16, r8
    12e6:	19 1d       	adc	r17, r9
    12e8:	9a 01       	movw	r18, r20
    12ea:	ab 01       	movw	r20, r22
    12ec:	2a 0d       	add	r18, r10
    12ee:	3b 1d       	adc	r19, r11
    12f0:	4c 1d       	adc	r20, r12
    12f2:	5d 1d       	adc	r21, r13
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 14       	cp	r14, r6
    12fe:	f7 04       	cpc	r15, r7
    1300:	08 05       	cpc	r16, r8
    1302:	19 05       	cpc	r17, r9
    1304:	20 f4       	brcc	.+8      	; 0x130e <__mulsf3+0xe8>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ba 01       	movw	r22, r20
    1310:	a9 01       	movw	r20, r18
    1312:	48 0f       	add	r20, r24
    1314:	59 1f       	adc	r21, r25
    1316:	6a 1f       	adc	r22, r26
    1318:	7b 1f       	adc	r23, r27
    131a:	aa 0c       	add	r10, r10
    131c:	bb 1c       	adc	r11, r11
    131e:	cc 1c       	adc	r12, r12
    1320:	dd 1c       	adc	r13, r13
    1322:	97 fe       	sbrs	r9, 7
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <__mulsf3+0x110>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	a8 2a       	or	r10, r24
    1330:	b9 2a       	or	r11, r25
    1332:	ca 2a       	or	r12, r26
    1334:	db 2a       	or	r13, r27
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	e0 32       	cpi	r30, 0x20	; 32
    133a:	f1 05       	cpc	r31, r1
    133c:	49 f0       	breq	.+18     	; 0x1350 <__mulsf3+0x12a>
    133e:	66 0c       	add	r6, r6
    1340:	77 1c       	adc	r7, r7
    1342:	88 1c       	adc	r8, r8
    1344:	99 1c       	adc	r9, r9
    1346:	56 94       	lsr	r5
    1348:	47 94       	ror	r4
    134a:	37 94       	ror	r3
    134c:	27 94       	ror	r2
    134e:	c3 cf       	rjmp	.-122    	; 0x12d6 <__mulsf3+0xb0>
    1350:	fa 85       	ldd	r31, Y+10	; 0x0a
    1352:	ea 89       	ldd	r30, Y+18	; 0x12
    1354:	2b 89       	ldd	r18, Y+19	; 0x13
    1356:	3c 89       	ldd	r19, Y+20	; 0x14
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	28 0f       	add	r18, r24
    135e:	39 1f       	adc	r19, r25
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	17 c0       	rjmp	.+46     	; 0x1394 <__mulsf3+0x16e>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	89 2b       	or	r24, r25
    136e:	61 f0       	breq	.+24     	; 0x1388 <__mulsf3+0x162>
    1370:	16 95       	lsr	r17
    1372:	07 95       	ror	r16
    1374:	f7 94       	ror	r15
    1376:	e7 94       	ror	r14
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e8       	ldi	r27, 0x80	; 128
    1380:	e8 2a       	or	r14, r24
    1382:	f9 2a       	or	r15, r25
    1384:	0a 2b       	or	r16, r26
    1386:	1b 2b       	or	r17, r27
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	77 fd       	sbrc	r23, 7
    1396:	e7 cf       	rjmp	.-50     	; 0x1366 <__mulsf3+0x140>
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <__mulsf3+0x18c>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	17 fd       	sbrc	r17, 7
    13a4:	41 60       	ori	r20, 0x01	; 1
    13a6:	ee 0c       	add	r14, r14
    13a8:	ff 1c       	adc	r15, r15
    13aa:	00 1f       	adc	r16, r16
    13ac:	11 1f       	adc	r17, r17
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	30 40       	sbci	r19, 0x00	; 0
    13b2:	40 30       	cpi	r20, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	59 07       	cpc	r21, r25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	69 07       	cpc	r22, r25
    13bc:	90 e4       	ldi	r25, 0x40	; 64
    13be:	79 07       	cpc	r23, r25
    13c0:	60 f3       	brcs	.-40     	; 0x139a <__mulsf3+0x174>
    13c2:	2b 8f       	std	Y+27, r18	; 0x1b
    13c4:	3c 8f       	std	Y+28, r19	; 0x1c
    13c6:	db 01       	movw	r26, r22
    13c8:	ca 01       	movw	r24, r20
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	a0 70       	andi	r26, 0x00	; 0
    13d0:	b0 70       	andi	r27, 0x00	; 0
    13d2:	80 34       	cpi	r24, 0x40	; 64
    13d4:	91 05       	cpc	r25, r1
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	61 f4       	brne	.+24     	; 0x13f4 <__mulsf3+0x1ce>
    13dc:	47 fd       	sbrc	r20, 7
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <__mulsf3+0x1ce>
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	01 05       	cpc	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__mulsf3+0x1ce>
    13ea:	40 5c       	subi	r20, 0xC0	; 192
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	6f 4f       	sbci	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	40 78       	andi	r20, 0x80	; 128
    13f4:	1a 8e       	std	Y+26, r1	; 0x1a
    13f6:	fe 17       	cp	r31, r30
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__mulsf3+0x1d8>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8a 8f       	std	Y+26, r24	; 0x1a
    13fe:	4d 8f       	std	Y+29, r20	; 0x1d
    1400:	5e 8f       	std	Y+30, r21	; 0x1e
    1402:	6f 8f       	std	Y+31, r22	; 0x1f
    1404:	78 a3       	std	Y+32, r23	; 0x20
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	89 8f       	std	Y+25, r24	; 0x19
    140a:	ce 01       	movw	r24, r28
    140c:	49 96       	adiw	r24, 0x19	; 25
    140e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__pack_f>
    1412:	a0 96       	adiw	r28, 0x20	; 32
    1414:	e2 e1       	ldi	r30, 0x12	; 18
    1416:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__>

0000141a <__gtsf2>:
    141a:	a8 e1       	ldi	r26, 0x18	; 24
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	4f 83       	std	Y+7, r20	; 0x07
    1434:	58 87       	std	Y+8, r21	; 0x08
    1436:	89 e0       	ldi	r24, 0x09	; 9
    1438:	e8 2e       	mov	r14, r24
    143a:	f1 2c       	mov	r15, r1
    143c:	ec 0e       	add	r14, r28
    143e:	fd 1e       	adc	r15, r29
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	b7 01       	movw	r22, r14
    1446:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    144a:	8e 01       	movw	r16, r28
    144c:	0f 5e       	subi	r16, 0xEF	; 239
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	05 96       	adiw	r24, 0x05	; 5
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	82 30       	cpi	r24, 0x02	; 2
    145e:	40 f0       	brcs	.+16     	; 0x1470 <__gtsf2+0x56>
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	82 30       	cpi	r24, 0x02	; 2
    1464:	28 f0       	brcs	.+10     	; 0x1470 <__gtsf2+0x56>
    1466:	c7 01       	movw	r24, r14
    1468:	b8 01       	movw	r22, r16
    146a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <__gtsf2+0x58>
    1470:	8f ef       	ldi	r24, 0xFF	; 255
    1472:	68 96       	adiw	r28, 0x18	; 24
    1474:	e6 e0       	ldi	r30, 0x06	; 6
    1476:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

0000147a <__gesf2>:
    147a:	a8 e1       	ldi	r26, 0x18	; 24
    147c:	b0 e0       	ldi	r27, 0x00	; 0
    147e:	e3 e4       	ldi	r30, 0x43	; 67
    1480:	fa e0       	ldi	r31, 0x0A	; 10
    1482:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
    1486:	69 83       	std	Y+1, r22	; 0x01
    1488:	7a 83       	std	Y+2, r23	; 0x02
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	9c 83       	std	Y+4, r25	; 0x04
    148e:	2d 83       	std	Y+5, r18	; 0x05
    1490:	3e 83       	std	Y+6, r19	; 0x06
    1492:	4f 83       	std	Y+7, r20	; 0x07
    1494:	58 87       	std	Y+8, r21	; 0x08
    1496:	89 e0       	ldi	r24, 0x09	; 9
    1498:	e8 2e       	mov	r14, r24
    149a:	f1 2c       	mov	r15, r1
    149c:	ec 0e       	add	r14, r28
    149e:	fd 1e       	adc	r15, r29
    14a0:	ce 01       	movw	r24, r28
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	b7 01       	movw	r22, r14
    14a6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14aa:	8e 01       	movw	r16, r28
    14ac:	0f 5e       	subi	r16, 0xEF	; 239
    14ae:	1f 4f       	sbci	r17, 0xFF	; 255
    14b0:	ce 01       	movw	r24, r28
    14b2:	05 96       	adiw	r24, 0x05	; 5
    14b4:	b8 01       	movw	r22, r16
    14b6:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	82 30       	cpi	r24, 0x02	; 2
    14be:	40 f0       	brcs	.+16     	; 0x14d0 <__gesf2+0x56>
    14c0:	89 89       	ldd	r24, Y+17	; 0x11
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	28 f0       	brcs	.+10     	; 0x14d0 <__gesf2+0x56>
    14c6:	c7 01       	movw	r24, r14
    14c8:	b8 01       	movw	r22, r16
    14ca:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <__gesf2+0x58>
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	68 96       	adiw	r28, 0x18	; 24
    14d4:	e6 e0       	ldi	r30, 0x06	; 6
    14d6:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

000014da <__ltsf2>:
    14da:	a8 e1       	ldi	r26, 0x18	; 24
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e3 e7       	ldi	r30, 0x73	; 115
    14e0:	fa e0       	ldi	r31, 0x0A	; 10
    14e2:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x18>
    14e6:	69 83       	std	Y+1, r22	; 0x01
    14e8:	7a 83       	std	Y+2, r23	; 0x02
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	2d 83       	std	Y+5, r18	; 0x05
    14f0:	3e 83       	std	Y+6, r19	; 0x06
    14f2:	4f 83       	std	Y+7, r20	; 0x07
    14f4:	58 87       	std	Y+8, r21	; 0x08
    14f6:	89 e0       	ldi	r24, 0x09	; 9
    14f8:	e8 2e       	mov	r14, r24
    14fa:	f1 2c       	mov	r15, r1
    14fc:	ec 0e       	add	r14, r28
    14fe:	fd 1e       	adc	r15, r29
    1500:	ce 01       	movw	r24, r28
    1502:	01 96       	adiw	r24, 0x01	; 1
    1504:	b7 01       	movw	r22, r14
    1506:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    150a:	8e 01       	movw	r16, r28
    150c:	0f 5e       	subi	r16, 0xEF	; 239
    150e:	1f 4f       	sbci	r17, 0xFF	; 255
    1510:	ce 01       	movw	r24, r28
    1512:	05 96       	adiw	r24, 0x05	; 5
    1514:	b8 01       	movw	r22, r16
    1516:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	40 f0       	brcs	.+16     	; 0x1530 <__ltsf2+0x56>
    1520:	89 89       	ldd	r24, Y+17	; 0x11
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	28 f0       	brcs	.+10     	; 0x1530 <__ltsf2+0x56>
    1526:	c7 01       	movw	r24, r14
    1528:	b8 01       	movw	r22, r16
    152a:	0e 94 3e 0c 	call	0x187c	; 0x187c <__fpcmp_parts_f>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <__ltsf2+0x58>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	68 96       	adiw	r28, 0x18	; 24
    1534:	e6 e0       	ldi	r30, 0x06	; 6
    1536:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x18>

0000153a <__fixsfsi>:
    153a:	ac e0       	ldi	r26, 0x0C	; 12
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e3 ea       	ldi	r30, 0xA3	; 163
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__prologue_saves__+0x20>
    1546:	69 83       	std	Y+1, r22	; 0x01
    1548:	7a 83       	std	Y+2, r23	; 0x02
    154a:	8b 83       	std	Y+3, r24	; 0x03
    154c:	9c 83       	std	Y+4, r25	; 0x04
    154e:	ce 01       	movw	r24, r28
    1550:	01 96       	adiw	r24, 0x01	; 1
    1552:	be 01       	movw	r22, r28
    1554:	6b 5f       	subi	r22, 0xFB	; 251
    1556:	7f 4f       	sbci	r23, 0xFF	; 255
    1558:	0e 94 c6 0b 	call	0x178c	; 0x178c <__unpack_f>
    155c:	8d 81       	ldd	r24, Y+5	; 0x05
    155e:	82 30       	cpi	r24, 0x02	; 2
    1560:	61 f1       	breq	.+88     	; 0x15ba <__fixsfsi+0x80>
    1562:	82 30       	cpi	r24, 0x02	; 2
    1564:	50 f1       	brcs	.+84     	; 0x15ba <__fixsfsi+0x80>
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	21 f4       	brne	.+8      	; 0x1572 <__fixsfsi+0x38>
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	88 23       	and	r24, r24
    156e:	51 f1       	breq	.+84     	; 0x15c4 <__fixsfsi+0x8a>
    1570:	2e c0       	rjmp	.+92     	; 0x15ce <__fixsfsi+0x94>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	37 fd       	sbrc	r19, 7
    1578:	20 c0       	rjmp	.+64     	; 0x15ba <__fixsfsi+0x80>
    157a:	6e 81       	ldd	r22, Y+6	; 0x06
    157c:	2f 31       	cpi	r18, 0x1F	; 31
    157e:	31 05       	cpc	r19, r1
    1580:	1c f0       	brlt	.+6      	; 0x1588 <__fixsfsi+0x4e>
    1582:	66 23       	and	r22, r22
    1584:	f9 f0       	breq	.+62     	; 0x15c4 <__fixsfsi+0x8a>
    1586:	23 c0       	rjmp	.+70     	; 0x15ce <__fixsfsi+0x94>
    1588:	8e e1       	ldi	r24, 0x1E	; 30
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	82 1b       	sub	r24, r18
    158e:	93 0b       	sbc	r25, r19
    1590:	29 85       	ldd	r18, Y+9	; 0x09
    1592:	3a 85       	ldd	r19, Y+10	; 0x0a
    1594:	4b 85       	ldd	r20, Y+11	; 0x0b
    1596:	5c 85       	ldd	r21, Y+12	; 0x0c
    1598:	04 c0       	rjmp	.+8      	; 0x15a2 <__fixsfsi+0x68>
    159a:	56 95       	lsr	r21
    159c:	47 95       	ror	r20
    159e:	37 95       	ror	r19
    15a0:	27 95       	ror	r18
    15a2:	8a 95       	dec	r24
    15a4:	d2 f7       	brpl	.-12     	; 0x159a <__fixsfsi+0x60>
    15a6:	66 23       	and	r22, r22
    15a8:	b1 f0       	breq	.+44     	; 0x15d6 <__fixsfsi+0x9c>
    15aa:	50 95       	com	r21
    15ac:	40 95       	com	r20
    15ae:	30 95       	com	r19
    15b0:	21 95       	neg	r18
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	4f 4f       	sbci	r20, 0xFF	; 255
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	0e c0       	rjmp	.+28     	; 0x15d6 <__fixsfsi+0x9c>
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	09 c0       	rjmp	.+18     	; 0x15d6 <__fixsfsi+0x9c>
    15c4:	2f ef       	ldi	r18, 0xFF	; 255
    15c6:	3f ef       	ldi	r19, 0xFF	; 255
    15c8:	4f ef       	ldi	r20, 0xFF	; 255
    15ca:	5f e7       	ldi	r21, 0x7F	; 127
    15cc:	04 c0       	rjmp	.+8      	; 0x15d6 <__fixsfsi+0x9c>
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	50 e8       	ldi	r21, 0x80	; 128
    15d6:	b9 01       	movw	r22, r18
    15d8:	ca 01       	movw	r24, r20
    15da:	2c 96       	adiw	r28, 0x0c	; 12
    15dc:	e2 e0       	ldi	r30, 0x02	; 2
    15de:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__epilogue_restores__+0x20>

000015e2 <__pack_f>:
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	fc 01       	movw	r30, r24
    15ee:	e4 80       	ldd	r14, Z+4	; 0x04
    15f0:	f5 80       	ldd	r15, Z+5	; 0x05
    15f2:	06 81       	ldd	r16, Z+6	; 0x06
    15f4:	17 81       	ldd	r17, Z+7	; 0x07
    15f6:	d1 80       	ldd	r13, Z+1	; 0x01
    15f8:	80 81       	ld	r24, Z
    15fa:	82 30       	cpi	r24, 0x02	; 2
    15fc:	48 f4       	brcc	.+18     	; 0x1610 <__pack_f+0x2e>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e1       	ldi	r26, 0x10	; 16
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 2a       	or	r14, r24
    1608:	f9 2a       	or	r15, r25
    160a:	0a 2b       	or	r16, r26
    160c:	1b 2b       	or	r17, r27
    160e:	a5 c0       	rjmp	.+330    	; 0x175a <__pack_f+0x178>
    1610:	84 30       	cpi	r24, 0x04	; 4
    1612:	09 f4       	brne	.+2      	; 0x1616 <__pack_f+0x34>
    1614:	9f c0       	rjmp	.+318    	; 0x1754 <__pack_f+0x172>
    1616:	82 30       	cpi	r24, 0x02	; 2
    1618:	21 f4       	brne	.+8      	; 0x1622 <__pack_f+0x40>
    161a:	ee 24       	eor	r14, r14
    161c:	ff 24       	eor	r15, r15
    161e:	87 01       	movw	r16, r14
    1620:	05 c0       	rjmp	.+10     	; 0x162c <__pack_f+0x4a>
    1622:	e1 14       	cp	r14, r1
    1624:	f1 04       	cpc	r15, r1
    1626:	01 05       	cpc	r16, r1
    1628:	11 05       	cpc	r17, r1
    162a:	19 f4       	brne	.+6      	; 0x1632 <__pack_f+0x50>
    162c:	e0 e0       	ldi	r30, 0x00	; 0
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	96 c0       	rjmp	.+300    	; 0x175e <__pack_f+0x17c>
    1632:	62 81       	ldd	r22, Z+2	; 0x02
    1634:	73 81       	ldd	r23, Z+3	; 0x03
    1636:	9f ef       	ldi	r25, 0xFF	; 255
    1638:	62 38       	cpi	r22, 0x82	; 130
    163a:	79 07       	cpc	r23, r25
    163c:	0c f0       	brlt	.+2      	; 0x1640 <__pack_f+0x5e>
    163e:	5b c0       	rjmp	.+182    	; 0x16f6 <__pack_f+0x114>
    1640:	22 e8       	ldi	r18, 0x82	; 130
    1642:	3f ef       	ldi	r19, 0xFF	; 255
    1644:	26 1b       	sub	r18, r22
    1646:	37 0b       	sbc	r19, r23
    1648:	2a 31       	cpi	r18, 0x1A	; 26
    164a:	31 05       	cpc	r19, r1
    164c:	2c f0       	brlt	.+10     	; 0x1658 <__pack_f+0x76>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	2a c0       	rjmp	.+84     	; 0x16ac <__pack_f+0xca>
    1658:	b8 01       	movw	r22, r16
    165a:	a7 01       	movw	r20, r14
    165c:	02 2e       	mov	r0, r18
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <__pack_f+0x86>
    1660:	76 95       	lsr	r23
    1662:	67 95       	ror	r22
    1664:	57 95       	ror	r21
    1666:	47 95       	ror	r20
    1668:	0a 94       	dec	r0
    166a:	d2 f7       	brpl	.-12     	; 0x1660 <__pack_f+0x7e>
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	04 c0       	rjmp	.+8      	; 0x167e <__pack_f+0x9c>
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	aa 1f       	adc	r26, r26
    167c:	bb 1f       	adc	r27, r27
    167e:	2a 95       	dec	r18
    1680:	d2 f7       	brpl	.-12     	; 0x1676 <__pack_f+0x94>
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	a1 09       	sbc	r26, r1
    1686:	b1 09       	sbc	r27, r1
    1688:	8e 21       	and	r24, r14
    168a:	9f 21       	and	r25, r15
    168c:	a0 23       	and	r26, r16
    168e:	b1 23       	and	r27, r17
    1690:	00 97       	sbiw	r24, 0x00	; 0
    1692:	a1 05       	cpc	r26, r1
    1694:	b1 05       	cpc	r27, r1
    1696:	21 f0       	breq	.+8      	; 0x16a0 <__pack_f+0xbe>
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	9a 01       	movw	r18, r20
    16a2:	ab 01       	movw	r20, r22
    16a4:	28 2b       	or	r18, r24
    16a6:	39 2b       	or	r19, r25
    16a8:	4a 2b       	or	r20, r26
    16aa:	5b 2b       	or	r21, r27
    16ac:	da 01       	movw	r26, r20
    16ae:	c9 01       	movw	r24, r18
    16b0:	8f 77       	andi	r24, 0x7F	; 127
    16b2:	90 70       	andi	r25, 0x00	; 0
    16b4:	a0 70       	andi	r26, 0x00	; 0
    16b6:	b0 70       	andi	r27, 0x00	; 0
    16b8:	80 34       	cpi	r24, 0x40	; 64
    16ba:	91 05       	cpc	r25, r1
    16bc:	a1 05       	cpc	r26, r1
    16be:	b1 05       	cpc	r27, r1
    16c0:	39 f4       	brne	.+14     	; 0x16d0 <__pack_f+0xee>
    16c2:	27 ff       	sbrs	r18, 7
    16c4:	09 c0       	rjmp	.+18     	; 0x16d8 <__pack_f+0xf6>
    16c6:	20 5c       	subi	r18, 0xC0	; 192
    16c8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ca:	4f 4f       	sbci	r20, 0xFF	; 255
    16cc:	5f 4f       	sbci	r21, 0xFF	; 255
    16ce:	04 c0       	rjmp	.+8      	; 0x16d8 <__pack_f+0xf6>
    16d0:	21 5c       	subi	r18, 0xC1	; 193
    16d2:	3f 4f       	sbci	r19, 0xFF	; 255
    16d4:	4f 4f       	sbci	r20, 0xFF	; 255
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	20 30       	cpi	r18, 0x00	; 0
    16de:	a0 e0       	ldi	r26, 0x00	; 0
    16e0:	3a 07       	cpc	r19, r26
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	4a 07       	cpc	r20, r26
    16e6:	a0 e4       	ldi	r26, 0x40	; 64
    16e8:	5a 07       	cpc	r21, r26
    16ea:	10 f0       	brcs	.+4      	; 0x16f0 <__pack_f+0x10e>
    16ec:	e1 e0       	ldi	r30, 0x01	; 1
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	79 01       	movw	r14, r18
    16f2:	8a 01       	movw	r16, r20
    16f4:	27 c0       	rjmp	.+78     	; 0x1744 <__pack_f+0x162>
    16f6:	60 38       	cpi	r22, 0x80	; 128
    16f8:	71 05       	cpc	r23, r1
    16fa:	64 f5       	brge	.+88     	; 0x1754 <__pack_f+0x172>
    16fc:	fb 01       	movw	r30, r22
    16fe:	e1 58       	subi	r30, 0x81	; 129
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	d8 01       	movw	r26, r16
    1704:	c7 01       	movw	r24, r14
    1706:	8f 77       	andi	r24, 0x7F	; 127
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	a0 70       	andi	r26, 0x00	; 0
    170c:	b0 70       	andi	r27, 0x00	; 0
    170e:	80 34       	cpi	r24, 0x40	; 64
    1710:	91 05       	cpc	r25, r1
    1712:	a1 05       	cpc	r26, r1
    1714:	b1 05       	cpc	r27, r1
    1716:	39 f4       	brne	.+14     	; 0x1726 <__pack_f+0x144>
    1718:	e7 fe       	sbrs	r14, 7
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <__pack_f+0x154>
    171c:	80 e4       	ldi	r24, 0x40	; 64
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	a0 e0       	ldi	r26, 0x00	; 0
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__pack_f+0x14c>
    1726:	8f e3       	ldi	r24, 0x3F	; 63
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	a0 e0       	ldi	r26, 0x00	; 0
    172c:	b0 e0       	ldi	r27, 0x00	; 0
    172e:	e8 0e       	add	r14, r24
    1730:	f9 1e       	adc	r15, r25
    1732:	0a 1f       	adc	r16, r26
    1734:	1b 1f       	adc	r17, r27
    1736:	17 ff       	sbrs	r17, 7
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <__pack_f+0x162>
    173a:	16 95       	lsr	r17
    173c:	07 95       	ror	r16
    173e:	f7 94       	ror	r15
    1740:	e7 94       	ror	r14
    1742:	31 96       	adiw	r30, 0x01	; 1
    1744:	87 e0       	ldi	r24, 0x07	; 7
    1746:	16 95       	lsr	r17
    1748:	07 95       	ror	r16
    174a:	f7 94       	ror	r15
    174c:	e7 94       	ror	r14
    174e:	8a 95       	dec	r24
    1750:	d1 f7       	brne	.-12     	; 0x1746 <__pack_f+0x164>
    1752:	05 c0       	rjmp	.+10     	; 0x175e <__pack_f+0x17c>
    1754:	ee 24       	eor	r14, r14
    1756:	ff 24       	eor	r15, r15
    1758:	87 01       	movw	r16, r14
    175a:	ef ef       	ldi	r30, 0xFF	; 255
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	6e 2f       	mov	r22, r30
    1760:	67 95       	ror	r22
    1762:	66 27       	eor	r22, r22
    1764:	67 95       	ror	r22
    1766:	90 2f       	mov	r25, r16
    1768:	9f 77       	andi	r25, 0x7F	; 127
    176a:	d7 94       	ror	r13
    176c:	dd 24       	eor	r13, r13
    176e:	d7 94       	ror	r13
    1770:	8e 2f       	mov	r24, r30
    1772:	86 95       	lsr	r24
    1774:	49 2f       	mov	r20, r25
    1776:	46 2b       	or	r20, r22
    1778:	58 2f       	mov	r21, r24
    177a:	5d 29       	or	r21, r13
    177c:	b7 01       	movw	r22, r14
    177e:	ca 01       	movw	r24, r20
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	08 95       	ret

0000178c <__unpack_f>:
    178c:	fc 01       	movw	r30, r24
    178e:	db 01       	movw	r26, r22
    1790:	40 81       	ld	r20, Z
    1792:	51 81       	ldd	r21, Z+1	; 0x01
    1794:	22 81       	ldd	r18, Z+2	; 0x02
    1796:	62 2f       	mov	r22, r18
    1798:	6f 77       	andi	r22, 0x7F	; 127
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	22 1f       	adc	r18, r18
    179e:	22 27       	eor	r18, r18
    17a0:	22 1f       	adc	r18, r18
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	89 2f       	mov	r24, r25
    17a6:	88 0f       	add	r24, r24
    17a8:	82 2b       	or	r24, r18
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	99 1f       	adc	r25, r25
    17b0:	99 27       	eor	r25, r25
    17b2:	99 1f       	adc	r25, r25
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	9c 93       	st	X, r25
    17b8:	11 97       	sbiw	r26, 0x01	; 1
    17ba:	21 15       	cp	r18, r1
    17bc:	31 05       	cpc	r19, r1
    17be:	a9 f5       	brne	.+106    	; 0x182a <__unpack_f+0x9e>
    17c0:	41 15       	cp	r20, r1
    17c2:	51 05       	cpc	r21, r1
    17c4:	61 05       	cpc	r22, r1
    17c6:	71 05       	cpc	r23, r1
    17c8:	11 f4       	brne	.+4      	; 0x17ce <__unpack_f+0x42>
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	37 c0       	rjmp	.+110    	; 0x183c <__unpack_f+0xb0>
    17ce:	82 e8       	ldi	r24, 0x82	; 130
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	13 96       	adiw	r26, 0x03	; 3
    17d4:	9c 93       	st	X, r25
    17d6:	8e 93       	st	-X, r24
    17d8:	12 97       	sbiw	r26, 0x02	; 2
    17da:	9a 01       	movw	r18, r20
    17dc:	ab 01       	movw	r20, r22
    17de:	67 e0       	ldi	r22, 0x07	; 7
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	44 1f       	adc	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	6a 95       	dec	r22
    17ea:	d1 f7       	brne	.-12     	; 0x17e0 <__unpack_f+0x54>
    17ec:	83 e0       	ldi	r24, 0x03	; 3
    17ee:	8c 93       	st	X, r24
    17f0:	0d c0       	rjmp	.+26     	; 0x180c <__unpack_f+0x80>
    17f2:	22 0f       	add	r18, r18
    17f4:	33 1f       	adc	r19, r19
    17f6:	44 1f       	adc	r20, r20
    17f8:	55 1f       	adc	r21, r21
    17fa:	12 96       	adiw	r26, 0x02	; 2
    17fc:	8d 91       	ld	r24, X+
    17fe:	9c 91       	ld	r25, X
    1800:	13 97       	sbiw	r26, 0x03	; 3
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	13 96       	adiw	r26, 0x03	; 3
    1806:	9c 93       	st	X, r25
    1808:	8e 93       	st	-X, r24
    180a:	12 97       	sbiw	r26, 0x02	; 2
    180c:	20 30       	cpi	r18, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	38 07       	cpc	r19, r24
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	48 07       	cpc	r20, r24
    1816:	80 e4       	ldi	r24, 0x40	; 64
    1818:	58 07       	cpc	r21, r24
    181a:	58 f3       	brcs	.-42     	; 0x17f2 <__unpack_f+0x66>
    181c:	14 96       	adiw	r26, 0x04	; 4
    181e:	2d 93       	st	X+, r18
    1820:	3d 93       	st	X+, r19
    1822:	4d 93       	st	X+, r20
    1824:	5c 93       	st	X, r21
    1826:	17 97       	sbiw	r26, 0x07	; 7
    1828:	08 95       	ret
    182a:	2f 3f       	cpi	r18, 0xFF	; 255
    182c:	31 05       	cpc	r19, r1
    182e:	79 f4       	brne	.+30     	; 0x184e <__unpack_f+0xc2>
    1830:	41 15       	cp	r20, r1
    1832:	51 05       	cpc	r21, r1
    1834:	61 05       	cpc	r22, r1
    1836:	71 05       	cpc	r23, r1
    1838:	19 f4       	brne	.+6      	; 0x1840 <__unpack_f+0xb4>
    183a:	84 e0       	ldi	r24, 0x04	; 4
    183c:	8c 93       	st	X, r24
    183e:	08 95       	ret
    1840:	64 ff       	sbrs	r22, 4
    1842:	03 c0       	rjmp	.+6      	; 0x184a <__unpack_f+0xbe>
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	8c 93       	st	X, r24
    1848:	12 c0       	rjmp	.+36     	; 0x186e <__unpack_f+0xe2>
    184a:	1c 92       	st	X, r1
    184c:	10 c0       	rjmp	.+32     	; 0x186e <__unpack_f+0xe2>
    184e:	2f 57       	subi	r18, 0x7F	; 127
    1850:	30 40       	sbci	r19, 0x00	; 0
    1852:	13 96       	adiw	r26, 0x03	; 3
    1854:	3c 93       	st	X, r19
    1856:	2e 93       	st	-X, r18
    1858:	12 97       	sbiw	r26, 0x02	; 2
    185a:	83 e0       	ldi	r24, 0x03	; 3
    185c:	8c 93       	st	X, r24
    185e:	87 e0       	ldi	r24, 0x07	; 7
    1860:	44 0f       	add	r20, r20
    1862:	55 1f       	adc	r21, r21
    1864:	66 1f       	adc	r22, r22
    1866:	77 1f       	adc	r23, r23
    1868:	8a 95       	dec	r24
    186a:	d1 f7       	brne	.-12     	; 0x1860 <__unpack_f+0xd4>
    186c:	70 64       	ori	r23, 0x40	; 64
    186e:	14 96       	adiw	r26, 0x04	; 4
    1870:	4d 93       	st	X+, r20
    1872:	5d 93       	st	X+, r21
    1874:	6d 93       	st	X+, r22
    1876:	7c 93       	st	X, r23
    1878:	17 97       	sbiw	r26, 0x07	; 7
    187a:	08 95       	ret

0000187c <__fpcmp_parts_f>:
    187c:	1f 93       	push	r17
    187e:	dc 01       	movw	r26, r24
    1880:	fb 01       	movw	r30, r22
    1882:	9c 91       	ld	r25, X
    1884:	92 30       	cpi	r25, 0x02	; 2
    1886:	08 f4       	brcc	.+2      	; 0x188a <__fpcmp_parts_f+0xe>
    1888:	47 c0       	rjmp	.+142    	; 0x1918 <__fpcmp_parts_f+0x9c>
    188a:	80 81       	ld	r24, Z
    188c:	82 30       	cpi	r24, 0x02	; 2
    188e:	08 f4       	brcc	.+2      	; 0x1892 <__fpcmp_parts_f+0x16>
    1890:	43 c0       	rjmp	.+134    	; 0x1918 <__fpcmp_parts_f+0x9c>
    1892:	94 30       	cpi	r25, 0x04	; 4
    1894:	51 f4       	brne	.+20     	; 0x18aa <__fpcmp_parts_f+0x2e>
    1896:	11 96       	adiw	r26, 0x01	; 1
    1898:	1c 91       	ld	r17, X
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	99 f5       	brne	.+102    	; 0x1904 <__fpcmp_parts_f+0x88>
    189e:	81 81       	ldd	r24, Z+1	; 0x01
    18a0:	68 2f       	mov	r22, r24
    18a2:	70 e0       	ldi	r23, 0x00	; 0
    18a4:	61 1b       	sub	r22, r17
    18a6:	71 09       	sbc	r23, r1
    18a8:	3f c0       	rjmp	.+126    	; 0x1928 <__fpcmp_parts_f+0xac>
    18aa:	84 30       	cpi	r24, 0x04	; 4
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <__fpcmp_parts_f+0x3a>
    18ae:	92 30       	cpi	r25, 0x02	; 2
    18b0:	31 f4       	brne	.+12     	; 0x18be <__fpcmp_parts_f+0x42>
    18b2:	82 30       	cpi	r24, 0x02	; 2
    18b4:	b9 f1       	breq	.+110    	; 0x1924 <__fpcmp_parts_f+0xa8>
    18b6:	81 81       	ldd	r24, Z+1	; 0x01
    18b8:	88 23       	and	r24, r24
    18ba:	89 f1       	breq	.+98     	; 0x191e <__fpcmp_parts_f+0xa2>
    18bc:	2d c0       	rjmp	.+90     	; 0x1918 <__fpcmp_parts_f+0x9c>
    18be:	11 96       	adiw	r26, 0x01	; 1
    18c0:	1c 91       	ld	r17, X
    18c2:	11 97       	sbiw	r26, 0x01	; 1
    18c4:	82 30       	cpi	r24, 0x02	; 2
    18c6:	f1 f0       	breq	.+60     	; 0x1904 <__fpcmp_parts_f+0x88>
    18c8:	81 81       	ldd	r24, Z+1	; 0x01
    18ca:	18 17       	cp	r17, r24
    18cc:	d9 f4       	brne	.+54     	; 0x1904 <__fpcmp_parts_f+0x88>
    18ce:	12 96       	adiw	r26, 0x02	; 2
    18d0:	2d 91       	ld	r18, X+
    18d2:	3c 91       	ld	r19, X
    18d4:	13 97       	sbiw	r26, 0x03	; 3
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	82 17       	cp	r24, r18
    18dc:	93 07       	cpc	r25, r19
    18de:	94 f0       	brlt	.+36     	; 0x1904 <__fpcmp_parts_f+0x88>
    18e0:	28 17       	cp	r18, r24
    18e2:	39 07       	cpc	r19, r25
    18e4:	bc f0       	brlt	.+46     	; 0x1914 <__fpcmp_parts_f+0x98>
    18e6:	14 96       	adiw	r26, 0x04	; 4
    18e8:	8d 91       	ld	r24, X+
    18ea:	9d 91       	ld	r25, X+
    18ec:	0d 90       	ld	r0, X+
    18ee:	bc 91       	ld	r27, X
    18f0:	a0 2d       	mov	r26, r0
    18f2:	24 81       	ldd	r18, Z+4	; 0x04
    18f4:	35 81       	ldd	r19, Z+5	; 0x05
    18f6:	46 81       	ldd	r20, Z+6	; 0x06
    18f8:	57 81       	ldd	r21, Z+7	; 0x07
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	4a 07       	cpc	r20, r26
    1900:	5b 07       	cpc	r21, r27
    1902:	18 f4       	brcc	.+6      	; 0x190a <__fpcmp_parts_f+0x8e>
    1904:	11 23       	and	r17, r17
    1906:	41 f0       	breq	.+16     	; 0x1918 <__fpcmp_parts_f+0x9c>
    1908:	0a c0       	rjmp	.+20     	; 0x191e <__fpcmp_parts_f+0xa2>
    190a:	82 17       	cp	r24, r18
    190c:	93 07       	cpc	r25, r19
    190e:	a4 07       	cpc	r26, r20
    1910:	b5 07       	cpc	r27, r21
    1912:	40 f4       	brcc	.+16     	; 0x1924 <__fpcmp_parts_f+0xa8>
    1914:	11 23       	and	r17, r17
    1916:	19 f0       	breq	.+6      	; 0x191e <__fpcmp_parts_f+0xa2>
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	05 c0       	rjmp	.+10     	; 0x1928 <__fpcmp_parts_f+0xac>
    191e:	6f ef       	ldi	r22, 0xFF	; 255
    1920:	7f ef       	ldi	r23, 0xFF	; 255
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <__fpcmp_parts_f+0xac>
    1924:	60 e0       	ldi	r22, 0x00	; 0
    1926:	70 e0       	ldi	r23, 0x00	; 0
    1928:	cb 01       	movw	r24, r22
    192a:	1f 91       	pop	r17
    192c:	08 95       	ret

0000192e <main>:
Twi_ConfigType  g_Twi={BITRATE_2,TWI_PRESCALER_1,TWI_SLAVE_ADDRESS};
/******************************************************************************
 *								Main                                          *
 *******************************************************************************/
int main()
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <main+0x6>
    1934:	cd b7       	in	r28, 0x3d	; 61
    1936:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);/*enable the global interrupt bit*/
    1938:	af e5       	ldi	r26, 0x5F	; 95
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	ef e5       	ldi	r30, 0x5F	; 95
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	80 68       	ori	r24, 0x80	; 128
    1944:	8c 93       	st	X, r24
	TWI_init(&g_Twi);/*initiate the i2c driver*/
    1946:	82 e8       	ldi	r24, 0x82	; 130
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <TWI_init>
	UART_init(&g_UartMc2);/*initiate the UART driver of CONTROL_ECU*/
    194e:	87 e7       	ldi	r24, 0x77	; 119
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <UART_init>
	BUZZER_init();/*initiate the buzzer driver*/
    1956:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <BUZZER_init>
	DcMotor_Init();/*initiate the DC motor driver*/
    195a:	0e 94 10 10 	call	0x2020	; 0x2020 <DcMotor_Init>
	TIMER1_setCallBack(MC2_timer_Handler);/*set the call-back function to handle the interrupt*/
    195e:	8b ea       	ldi	r24, 0xAB	; 171
    1960:	9f e0       	ldi	r25, 0x0F	; 15
    1962:	0e 94 7d 17 	call	0x2efa	; 0x2efa <TIMER1_setCallBack>
	while(UART_recieveByte() != MC2_READY){}/*receive the byte and insure the synchronization*/
    1966:	0e 94 84 19 	call	0x3308	; 0x3308 <UART_recieveByte>
    196a:	81 30       	cpi	r24, 0x01	; 1
    196c:	e1 f7       	brne	.-8      	; 0x1966 <main+0x38>
	MC2_checkNewPassword();/*check the send password from HMI_ECU*/
    196e:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MC2_checkNewPassword>
	 * in state ERROR_STATE -->>call MC2_alarm function to enable buzzer for 1 minute
	 * in case of three consecutive mismatches
	 * */
	while(1)
	{
		switch (g_state)
    1972:	80 91 9e 01 	lds	r24, 0x019E
    1976:	28 2f       	mov	r18, r24
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	3a 83       	std	Y+2, r19	; 0x02
    197c:	29 83       	std	Y+1, r18	; 0x01
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	8a 3f       	cpi	r24, 0xFA	; 250
    1984:	91 05       	cpc	r25, r1
    1986:	89 f1       	breq	.+98     	; 0x19ea <main+0xbc>
    1988:	29 81       	ldd	r18, Y+1	; 0x01
    198a:	3a 81       	ldd	r19, Y+2	; 0x02
    198c:	2b 3f       	cpi	r18, 0xFB	; 251
    198e:	31 05       	cpc	r19, r1
    1990:	84 f4       	brge	.+32     	; 0x19b2 <main+0x84>
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	8e 3e       	cpi	r24, 0xEE	; 238
    1998:	91 05       	cpc	r25, r1
    199a:	21 f1       	breq	.+72     	; 0x19e4 <main+0xb6>
    199c:	29 81       	ldd	r18, Y+1	; 0x01
    199e:	3a 81       	ldd	r19, Y+2	; 0x02
    19a0:	27 3f       	cpi	r18, 0xF7	; 247
    19a2:	31 05       	cpc	r19, r1
    19a4:	41 f1       	breq	.+80     	; 0x19f6 <main+0xc8>
    19a6:	89 81       	ldd	r24, Y+1	; 0x01
    19a8:	9a 81       	ldd	r25, Y+2	; 0x02
    19aa:	8c 3c       	cpi	r24, 0xCC	; 204
    19ac:	91 05       	cpc	r25, r1
    19ae:	b9 f0       	breq	.+46     	; 0x19de <main+0xb0>
    19b0:	e0 cf       	rjmp	.-64     	; 0x1972 <main+0x44>
    19b2:	29 81       	ldd	r18, Y+1	; 0x01
    19b4:	3a 81       	ldd	r19, Y+2	; 0x02
    19b6:	2d 3f       	cpi	r18, 0xFD	; 253
    19b8:	31 05       	cpc	r19, r1
    19ba:	59 f0       	breq	.+22     	; 0x19d2 <main+0xa4>
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	8e 3f       	cpi	r24, 0xFE	; 254
    19c2:	91 05       	cpc	r25, r1
    19c4:	a9 f0       	breq	.+42     	; 0x19f0 <main+0xc2>
    19c6:	29 81       	ldd	r18, Y+1	; 0x01
    19c8:	3a 81       	ldd	r19, Y+2	; 0x02
    19ca:	2b 3f       	cpi	r18, 0xFB	; 251
    19cc:	31 05       	cpc	r19, r1
    19ce:	21 f0       	breq	.+8      	; 0x19d8 <main+0xaa>
    19d0:	d0 cf       	rjmp	.-96     	; 0x1972 <main+0x44>
		{
		case MAIN_OPTIONS:
			MC2_receiveOption();
    19d2:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <MC2_receiveOption>
    19d6:	cd cf       	rjmp	.-102    	; 0x1972 <main+0x44>
			break;
		case ENTER_YOUR_PASSWORD:
			MC2_checkPassword();
    19d8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <MC2_checkPassword>
    19dc:	ca cf       	rjmp	.-108    	; 0x1972 <main+0x44>
			break;
		case MATCH:
			MC2_selectedOptions();
    19de:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <MC2_selectedOptions>
    19e2:	c7 cf       	rjmp	.-114    	; 0x1972 <main+0x44>
			break;
		case MISMATCH:
			MC2_checkPassword();
    19e4:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <MC2_checkPassword>
    19e8:	c4 cf       	rjmp	.-120    	; 0x1972 <main+0x44>
			break;
		case OPENING:
			MC2_DoorHandler();
    19ea:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <MC2_DoorHandler>
    19ee:	c1 cf       	rjmp	.-126    	; 0x1972 <main+0x44>
			break;
		case ENTER_NEW_PASSWORD:
			MC2_checkNewPassword();
    19f0:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MC2_checkNewPassword>
    19f4:	be cf       	rjmp	.-132    	; 0x1972 <main+0x44>
			break;
		case ERROR_STATE:
			MC2_alarm();
    19f6:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <MC2_alarm>
    19fa:	bb cf       	rjmp	.-138    	; 0x1972 <main+0x44>

000019fc <MC2_receiveOption>:
 * 				and then change the current state flag and send it back
 * 				to HMI_ECU through the UART
 */

void    MC2_receiveOption()
{
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	/*save the send choice from HMI_ECU*/
	g_receivedChoice=UART_recieveByte();
    1a04:	0e 94 84 19 	call	0x3308	; 0x3308 <UART_recieveByte>
    1a08:	80 93 9d 01 	sts	0x019D, r24
	/*change the current state to ENTER_YOUR_PASSWORD to get the password
	 * from user and check if it's correct to execute the desired option*/
	g_state=ENTER_YOUR_PASSWORD;
    1a0c:	8b ef       	ldi	r24, 0xFB	; 251
    1a0e:	80 93 9e 01 	sts	0x019E, r24
	/*send the current state to the HMI_ECU*/
	UART_sendByte(g_state);
    1a12:	80 91 9e 01 	lds	r24, 0x019E
    1a16:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>
}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <MC2_selectedOptions>:
 * Description:switch case over the received key then change the current state
 * 				and send it back through the UART
 */

void  MC2_selectedOptions(void)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <MC2_selectedOptions+0x6>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	 * in case the choice is '-'
	 * change the the current state to ENTER_NEW_PASSWORD so allow the
	 * user to enter the new password and change the old one
	 * then send the current state to HMI_ECU
	 * */
	switch(g_receivedChoice)
    1a2a:	80 91 9d 01 	lds	r24, 0x019D
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	3a 83       	std	Y+2, r19	; 0x02
    1a34:	29 83       	std	Y+1, r18	; 0x01
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	8b 32       	cpi	r24, 0x2B	; 43
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	31 f0       	breq	.+12     	; 0x1a4c <MC2_selectedOptions+0x2c>
    1a40:	29 81       	ldd	r18, Y+1	; 0x01
    1a42:	3a 81       	ldd	r19, Y+2	; 0x02
    1a44:	2d 32       	cpi	r18, 0x2D	; 45
    1a46:	31 05       	cpc	r19, r1
    1a48:	49 f0       	breq	.+18     	; 0x1a5c <MC2_selectedOptions+0x3c>
    1a4a:	10 c0       	rjmp	.+32     	; 0x1a6c <MC2_selectedOptions+0x4c>
	{
	case '+':
		/*change the the current state to OPENING*/
		g_state=OPENING;
    1a4c:	8a ef       	ldi	r24, 0xFA	; 250
    1a4e:	80 93 9e 01 	sts	0x019E, r24
		/*send the match flag to MC1_mainOptions*/
		UART_sendByte(g_state);
    1a52:	80 91 9e 01 	lds	r24, 0x019E
    1a56:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>
    1a5a:	0f c0       	rjmp	.+30     	; 0x1a7a <MC2_selectedOptions+0x5a>
		break;
	case'-':
		/*change the the current state to ENTER_NEW_PASSWORD*/
		g_state=ENTER_NEW_PASSWORD;
    1a5c:	8e ef       	ldi	r24, 0xFE	; 254
    1a5e:	80 93 9e 01 	sts	0x019E, r24
		/*send the match flag to MC1_mainOptions*/
		UART_sendByte(g_state);
    1a62:	80 91 9e 01 	lds	r24, 0x019E
    1a66:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>
    1a6a:	07 c0       	rjmp	.+14     	; 0x1a7a <MC2_selectedOptions+0x5a>
		break;
	default:
		/*if input is false try again change the current state to MAIN_OPTIONS*/
		g_state=MAIN_OPTIONS;
    1a6c:	8d ef       	ldi	r24, 0xFD	; 253
    1a6e:	80 93 9e 01 	sts	0x019E, r24
		/*send the match flag to MC1_mainOptions*/
		UART_sendByte(g_state);
    1a72:	80 91 9e 01 	lds	r24, 0x019E
    1a76:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>
	}
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <MC2_DoorHandler>:
 * Description: this function opens the door then wait for 3 sec then close
 * 				it again using timer driver,and on each action changes the current
 * 				state and send it to HMI_ECU
 */
void  MC2_DoorHandler(void)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
	if(g_flag_motor==1)
    1a8c:	80 91 68 01 	lds	r24, 0x0168
    1a90:	81 30       	cpi	r24, 0x01	; 1
    1a92:	31 f4       	brne	.+12     	; 0x1aa0 <MC2_DoorHandler+0x1c>
	{
		/*initiate the Timer driver*/
		TIMER_init(&g_timer);
    1a94:	8a e6       	ldi	r24, 0x6A	; 106
    1a96:	91 e0       	ldi	r25, 0x01	; 1
    1a98:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <TIMER_init>
		/*clear the flag so that the timer INIT. function won't be
		 *called again in next iterations in the super loop
		 */
		g_flag_motor=0;
    1a9c:	10 92 68 01 	sts	0x0168, r1
	}
	/* motor rotates clockwise (opens door)*/
	DcMotor_Rotate(CLOCKWISE);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	0e 94 2b 10 	call	0x2056	; 0x2056 <DcMotor_Rotate>

	/*wait 15 seconds then change the state to door is opened*/
	while(g_timer_counter <=15);
    1aa6:	80 91 87 01 	lds	r24, 0x0187
    1aaa:	80 31       	cpi	r24, 0x10	; 16
    1aac:	e0 f3       	brcs	.-8      	; 0x1aa6 <MC2_DoorHandler+0x22>

	/*stop motor door is opened*/
	DcMotor_Rotate(STOP);
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	0e 94 2b 10 	call	0x2056	; 0x2056 <DcMotor_Rotate>

	/*change the current state to DOOR_IS_OPENED*/
	g_state = DOOR_IS_OPENED;
    1ab4:	89 ef       	ldi	r24, 0xF9	; 249
    1ab6:	80 93 9e 01 	sts	0x019E, r24

	/*send the current state to HMI_ECU*/
	UART_sendByte(g_state);
    1aba:	80 91 9e 01 	lds	r24, 0x019E
    1abe:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>

	/*wait 3 more seconds then change current state to CLOSING */
	while(g_timer_counter <=18);
    1ac2:	80 91 87 01 	lds	r24, 0x0187
    1ac6:	83 31       	cpi	r24, 0x13	; 19
    1ac8:	e0 f3       	brcs	.-8      	; 0x1ac2 <MC2_DoorHandler+0x3e>

	/*motor rotates anti-clockwise (closes door)*/
	DcMotor_Rotate(ANTI_CLOCKWISE);
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	0e 94 2b 10 	call	0x2056	; 0x2056 <DcMotor_Rotate>

	/*change the current state to CLOSING*/
	g_state = CLOSING;
    1ad0:	88 ef       	ldi	r24, 0xF8	; 248
    1ad2:	80 93 9e 01 	sts	0x019E, r24

	/*send the current state to HMI_ECU*/
	UART_sendByte(g_state);/*send the match flag to MC1_mainOptions*/
    1ad6:	80 91 9e 01 	lds	r24, 0x019E
    1ada:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>

	/*wait 15 more seconds while closing the door*/
	while(g_timer_counter <=33);
    1ade:	80 91 87 01 	lds	r24, 0x0187
    1ae2:	82 32       	cpi	r24, 0x22	; 34
    1ae4:	e0 f3       	brcs	.-8      	; 0x1ade <MC2_DoorHandler+0x5a>
	/*stop motor door is closed again*/
	DcMotor_Rotate(STOP);
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	0e 94 2b 10 	call	0x2056	; 0x2056 <DcMotor_Rotate>

	/*change the current state to MAIN_OPTIONS*/
	g_state = MAIN_OPTIONS;
    1aec:	8d ef       	ldi	r24, 0xFD	; 253
    1aee:	80 93 9e 01 	sts	0x019E, r24

	/*send the current state to HMI_ECU*/
	UART_sendByte(g_state);
    1af2:	80 91 9e 01 	lds	r24, 0x019E
    1af6:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>

	/*close the timer driver by disabling the clock bits*/
	TIMER_deinit(&g_timer);
    1afa:	8a e6       	ldi	r24, 0x6A	; 106
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <TIMER_deinit>

	/*clear the seconds counter*/
	g_timer_counter=0;
    1b02:	10 92 87 01 	sts	0x0187, r1

	/*set the flag again to be able to execute the function again when called */
	g_flag_motor=1;
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	80 93 68 01 	sts	0x0168, r24
}
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <MC2_checkNewPassword>:
 * 				this function is used to set the password for the first time
 * 				of using the system or to change an old password.
 *
 */
uint8  MC2_checkNewPassword()
{
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <MC2_checkNewPassword+0xa>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <MC2_checkNewPassword+0xc>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
	/*this for loop takes the password for the first time from HMI_ECU
	 * by UART and save it in array g_recivedIntialPassword*/
	for(uint8 i=0;i<5;i++)
    1b22:	1b 82       	std	Y+3, r1	; 0x03
    1b24:	0c c0       	rjmp	.+24     	; 0x1b3e <MC2_checkNewPassword+0x2c>
	{
		g_recivedIntialPassword[i]=UART_recieveByte();
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	08 2f       	mov	r16, r24
    1b2a:	10 e0       	ldi	r17, 0x00	; 0
    1b2c:	0e 94 84 19 	call	0x3308	; 0x3308 <UART_recieveByte>
    1b30:	f8 01       	movw	r30, r16
    1b32:	e8 56       	subi	r30, 0x68	; 104
    1b34:	fe 4f       	sbci	r31, 0xFE	; 254
    1b36:	80 83       	st	Z, r24
 */
uint8  MC2_checkNewPassword()
{
	/*this for loop takes the password for the first time from HMI_ECU
	 * by UART and save it in array g_recivedIntialPassword*/
	for(uint8 i=0;i<5;i++)
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	8f 5f       	subi	r24, 0xFF	; 255
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	85 30       	cpi	r24, 0x05	; 5
    1b42:	88 f3       	brcs	.-30     	; 0x1b26 <MC2_checkNewPassword+0x14>
		g_recivedIntialPassword[i]=UART_recieveByte();
	}

	/*this for loop takes the password for the second time from HMI_ECU
	 * by UART and save it in array g_recivedReenterdPassword*/
	for(uint8 j =0;j<PASS_LENGTH;j++)
    1b44:	1a 82       	std	Y+2, r1	; 0x02
    1b46:	0c c0       	rjmp	.+24     	; 0x1b60 <MC2_checkNewPassword+0x4e>
	{
		g_recivedReenterdPassword[j]=UART_recieveByte();
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	08 2f       	mov	r16, r24
    1b4c:	10 e0       	ldi	r17, 0x00	; 0
    1b4e:	0e 94 84 19 	call	0x3308	; 0x3308 <UART_recieveByte>
    1b52:	f8 01       	movw	r30, r16
    1b54:	e2 57       	subi	r30, 0x72	; 114
    1b56:	fe 4f       	sbci	r31, 0xFE	; 254
    1b58:	80 83       	st	Z, r24
		g_recivedIntialPassword[i]=UART_recieveByte();
	}

	/*this for loop takes the password for the second time from HMI_ECU
	 * by UART and save it in array g_recivedReenterdPassword*/
	for(uint8 j =0;j<PASS_LENGTH;j++)
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	8f 5f       	subi	r24, 0xFF	; 255
    1b5e:	8a 83       	std	Y+2, r24	; 0x02
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	85 30       	cpi	r24, 0x05	; 5
    1b64:	88 f3       	brcs	.-30     	; 0x1b48 <MC2_checkNewPassword+0x36>
	{
		g_recivedReenterdPassword[j]=UART_recieveByte();
	}

	/*this for loop takes compare between the two arrays and check if MATCHED*/
	for(uint8 k=0;k<PASS_LENGTH;k++)
    1b66:	19 82       	std	Y+1, r1	; 0x01
    1b68:	1e c0       	rjmp	.+60     	; 0x1ba6 <MC2_checkNewPassword+0x94>
	{
		if(g_recivedIntialPassword[k]!=g_recivedReenterdPassword[k])
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	88 2f       	mov	r24, r24
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	fc 01       	movw	r30, r24
    1b72:	e8 56       	subi	r30, 0x68	; 104
    1b74:	fe 4f       	sbci	r31, 0xFE	; 254
    1b76:	20 81       	ld	r18, Z
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	fc 01       	movw	r30, r24
    1b80:	e2 57       	subi	r30, 0x72	; 114
    1b82:	fe 4f       	sbci	r31, 0xFE	; 254
    1b84:	80 81       	ld	r24, Z
    1b86:	28 17       	cp	r18, r24
    1b88:	59 f0       	breq	.+22     	; 0x1ba0 <MC2_checkNewPassword+0x8e>
		{
			/*password mismatched change current state to MISMATCH */
			g_state=MISMATCH;
    1b8a:	8e ee       	ldi	r24, 0xEE	; 238
    1b8c:	80 93 9e 01 	sts	0x019E, r24

			/*send the current state to HMI_ECU*/
			UART_sendByte(g_state);
    1b90:	80 91 9e 01 	lds	r24, 0x019E
    1b94:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>

			/*call same function to try again*/
			MC2_checkNewPassword();
    1b98:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <MC2_checkNewPassword>

			/*terminate the function*/
			return 0;
    1b9c:	1c 82       	std	Y+4, r1	; 0x04
    1b9e:	19 c0       	rjmp	.+50     	; 0x1bd2 <MC2_checkNewPassword+0xc0>
	{
		g_recivedReenterdPassword[j]=UART_recieveByte();
	}

	/*this for loop takes compare between the two arrays and check if MATCHED*/
	for(uint8 k=0;k<PASS_LENGTH;k++)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	8f 5f       	subi	r24, 0xFF	; 255
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	85 30       	cpi	r24, 0x05	; 5
    1baa:	f8 f2       	brcs	.-66     	; 0x1b6a <MC2_checkNewPassword+0x58>
			return 0;
		}
	}

	/*save the new pass in EEPROM*/
	MC2_savePassword((uint8 *)&g_recivedIntialPassword);
    1bac:	88 e9       	ldi	r24, 0x98	; 152
    1bae:	91 e0       	ldi	r25, 0x01	; 1
    1bb0:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <MC2_savePassword>
	/*change current state to MATCH */
	g_state=MATCH;
    1bb4:	8c ec       	ldi	r24, 0xCC	; 204
    1bb6:	80 93 9e 01 	sts	0x019E, r24

	/*send the current state to HMI_ECU to print PASWORD IS SET  on screen*/
	UART_sendByte(g_state);
    1bba:	80 91 9e 01 	lds	r24, 0x019E
    1bbe:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>

	/*change current state to MAIN_OPTIONS */
	g_state=MAIN_OPTIONS;
    1bc2:	8d ef       	ldi	r24, 0xFD	; 253
    1bc4:	80 93 9e 01 	sts	0x019E, r24

	/*send the current state to HMI_ECU */
	UART_sendByte(g_state);
    1bc8:	80 91 9e 01 	lds	r24, 0x019E
    1bcc:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>
	return 0;
    1bd0:	1c 82       	std	Y+4, r1	; 0x04
    1bd2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	08 95       	ret

00001be6 <MC2_checkPassword>:
 * 				changed so the action chosen by user will be executed
 * 				if the user missed for 3 consecutive times then the flag will
 * 				be set to ERROR
 */
uint8  MC2_checkPassword(void)
{
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	00 d0       	rcall	.+0      	; 0x1bf0 <MC2_checkPassword+0xa>
    1bf0:	0f 92       	push	r0
    1bf2:	cd b7       	in	r28, 0x3d	; 61
    1bf4:	de b7       	in	r29, 0x3e	; 62
	/*this for loop takes the password  from HMI_ECU
	 * by UART and save it in array g_recivedIntialPassword*/
	for(uint8 j =0;j<PASS_LENGTH;j++)
    1bf6:	1a 82       	std	Y+2, r1	; 0x02
    1bf8:	0c c0       	rjmp	.+24     	; 0x1c12 <MC2_checkPassword+0x2c>
	{
		g_recivedIntialPassword[j]=UART_recieveByte();
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	08 2f       	mov	r16, r24
    1bfe:	10 e0       	ldi	r17, 0x00	; 0
    1c00:	0e 94 84 19 	call	0x3308	; 0x3308 <UART_recieveByte>
    1c04:	f8 01       	movw	r30, r16
    1c06:	e8 56       	subi	r30, 0x68	; 104
    1c08:	fe 4f       	sbci	r31, 0xFE	; 254
    1c0a:	80 83       	st	Z, r24
 */
uint8  MC2_checkPassword(void)
{
	/*this for loop takes the password  from HMI_ECU
	 * by UART and save it in array g_recivedIntialPassword*/
	for(uint8 j =0;j<PASS_LENGTH;j++)
    1c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	8a 83       	std	Y+2, r24	; 0x02
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	85 30       	cpi	r24, 0x05	; 5
    1c16:	88 f3       	brcs	.-30     	; 0x1bfa <MC2_checkPassword+0x14>
	{
		g_recivedIntialPassword[j]=UART_recieveByte();
	}

	/*read password from EEPROM to compare it with entered one*/
	MC2_readPassword((uint8 *)&g_Password);
    1c18:	83 e9       	ldi	r24, 0x93	; 147
    1c1a:	91 e0       	ldi	r25, 0x01	; 1
    1c1c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <MC2_readPassword>

	/*this for loop takes compare between the received password
	 * and the one in EEPROM and check if MATCHED*/
	for(uint8 i=0;i<PASS_LENGTH;i++)
    1c20:	19 82       	std	Y+1, r1	; 0x01
    1c22:	42 c0       	rjmp	.+132    	; 0x1ca8 <MC2_checkPassword+0xc2>
	{
		if(g_recivedIntialPassword[i]==g_Password[i])
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	88 2f       	mov	r24, r24
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	fc 01       	movw	r30, r24
    1c2c:	e8 56       	subi	r30, 0x68	; 104
    1c2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c30:	20 81       	ld	r18, Z
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	88 2f       	mov	r24, r24
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	fc 01       	movw	r30, r24
    1c3a:	ed 56       	subi	r30, 0x6D	; 109
    1c3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c3e:	80 81       	ld	r24, Z
    1c40:	28 17       	cp	r18, r24
    1c42:	79 f1       	breq	.+94     	; 0x1ca2 <MC2_checkPassword+0xbc>
		{
			/*skip the current iteration of the for loop*/
			continue;
		}
		else if(g_recivedIntialPassword[i]!=g_Password[i])
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	88 2f       	mov	r24, r24
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	e8 56       	subi	r30, 0x68	; 104
    1c4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c50:	20 81       	ld	r18, Z
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	88 2f       	mov	r24, r24
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	fc 01       	movw	r30, r24
    1c5a:	ed 56       	subi	r30, 0x6D	; 109
    1c5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1c5e:	80 81       	ld	r24, Z
    1c60:	28 17       	cp	r18, r24
    1c62:	f9 f0       	breq	.+62     	; 0x1ca2 <MC2_checkPassword+0xbc>
		{
			/*if they are not the same increment the counter by 1*/
			if(mismatchCounter<2)
    1c64:	80 91 86 01 	lds	r24, 0x0186
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	70 f4       	brcc	.+28     	; 0x1c88 <MC2_checkPassword+0xa2>
			{
				/*increment counter*/
				mismatchCounter++;
    1c6c:	80 91 86 01 	lds	r24, 0x0186
    1c70:	8f 5f       	subi	r24, 0xFF	; 255
    1c72:	80 93 86 01 	sts	0x0186, r24

				/*change current state to MISMATCH */
				g_state=MISMATCH;
    1c76:	8e ee       	ldi	r24, 0xEE	; 238
    1c78:	80 93 9e 01 	sts	0x019E, r24

				/*send the current state to HMI_ECU */
				UART_sendByte(g_state);
    1c7c:	80 91 9e 01 	lds	r24, 0x019E
    1c80:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>

				return 0;
    1c84:	1b 82       	std	Y+3, r1	; 0x03
    1c86:	1c c0       	rjmp	.+56     	; 0x1cc0 <MC2_checkPassword+0xda>
			}
			else if(mismatchCounter==2)
    1c88:	80 91 86 01 	lds	r24, 0x0186
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	49 f4       	brne	.+18     	; 0x1ca2 <MC2_checkPassword+0xbc>
			{
				/*if the password was entered wrong for 3 times*/
				/*change current state to ERROR_STATE */
				g_state=ERROR_STATE;
    1c90:	87 ef       	ldi	r24, 0xF7	; 247
    1c92:	80 93 9e 01 	sts	0x019E, r24

				/*send the current state to HMI_ECU */
				UART_sendByte(g_state);
    1c96:	80 91 9e 01 	lds	r24, 0x019E
    1c9a:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>
				return 0;
    1c9e:	1b 82       	std	Y+3, r1	; 0x03
    1ca0:	0f c0       	rjmp	.+30     	; 0x1cc0 <MC2_checkPassword+0xda>
	/*read password from EEPROM to compare it with entered one*/
	MC2_readPassword((uint8 *)&g_Password);

	/*this for loop takes compare between the received password
	 * and the one in EEPROM and check if MATCHED*/
	for(uint8 i=0;i<PASS_LENGTH;i++)
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	8f 5f       	subi	r24, 0xFF	; 255
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	85 30       	cpi	r24, 0x05	; 5
    1cac:	08 f4       	brcc	.+2      	; 0x1cb0 <MC2_checkPassword+0xca>
    1cae:	ba cf       	rjmp	.-140    	; 0x1c24 <MC2_checkPassword+0x3e>
				return 0;
			}
		}
	}
	/*change current state to MATCH */
	g_state=MATCH;
    1cb0:	8c ec       	ldi	r24, 0xCC	; 204
    1cb2:	80 93 9e 01 	sts	0x019E, r24

	/*send the current state to HMI_ECU */
	UART_sendByte(g_state);
    1cb6:	80 91 9e 01 	lds	r24, 0x019E
    1cba:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>
	return 0;
    1cbe:	1b 82       	std	Y+3, r1	; 0x03
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	1f 91       	pop	r17
    1cce:	0f 91       	pop	r16
    1cd0:	08 95       	ret

00001cd2 <MC2_savePassword>:
 * Description: this function saves the password in the EEPROM
 * Input:
 * 		a_passwordArr: pointer to array of characters
 */
void  MC2_savePassword(uint8 *a_passwordArr)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
    1cda:	61 97       	sbiw	r28, 0x11	; 17
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	cd bf       	out	0x3d, r28	; 61
    1ce6:	99 8b       	std	Y+17, r25	; 0x11
    1ce8:	88 8b       	std	Y+16, r24	; 0x10
	/*this for loop write bytes equal to the number of PASS_LENGTH
	 * in the EEPROM to save the password*/
	for(uint8 counter=0 ; counter < PASS_LENGTH ; counter++)
    1cea:	1f 86       	std	Y+15, r1	; 0x0f
    1cec:	87 c0       	rjmp	.+270    	; 0x1dfc <MC2_savePassword+0x12a>
	{
		EEPROM_writeByte(PASSWORD_ADDRESS+counter,a_passwordArr[counter]);
    1cee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	05 96       	adiw	r24, 0x05	; 5
    1cf6:	ac 01       	movw	r20, r24
    1cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	88 89       	ldd	r24, Y+16	; 0x10
    1d00:	99 89       	ldd	r25, Y+17	; 0x11
    1d02:	fc 01       	movw	r30, r24
    1d04:	e2 0f       	add	r30, r18
    1d06:	f3 1f       	adc	r31, r19
    1d08:	20 81       	ld	r18, Z
    1d0a:	ca 01       	movw	r24, r20
    1d0c:	62 2f       	mov	r22, r18
    1d0e:	0e 94 76 10 	call	0x20ec	; 0x20ec <EEPROM_writeByte>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a8 ec       	ldi	r26, 0xC8	; 200
    1d18:	b2 e4       	ldi	r27, 0x42	; 66
    1d1a:	8b 87       	std	Y+11, r24	; 0x0b
    1d1c:	9c 87       	std	Y+12, r25	; 0x0c
    1d1e:	ad 87       	std	Y+13, r26	; 0x0d
    1d20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d22:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d24:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d26:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d28:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d2a:	20 e0       	ldi	r18, 0x00	; 0
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	4a e7       	ldi	r20, 0x7A	; 122
    1d30:	53 e4       	ldi	r21, 0x43	; 67
    1d32:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	8f 83       	std	Y+7, r24	; 0x07
    1d3c:	98 87       	std	Y+8, r25	; 0x08
    1d3e:	a9 87       	std	Y+9, r26	; 0x09
    1d40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d42:	6f 81       	ldd	r22, Y+7	; 0x07
    1d44:	78 85       	ldd	r23, Y+8	; 0x08
    1d46:	89 85       	ldd	r24, Y+9	; 0x09
    1d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <MC2_savePassword+0x92>
		__ticks = 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	9e 83       	std	Y+6, r25	; 0x06
    1d60:	8d 83       	std	Y+5, r24	; 0x05
    1d62:	3f c0       	rjmp	.+126    	; 0x1de2 <MC2_savePassword+0x110>
	else if (__tmp > 65535)
    1d64:	6f 81       	ldd	r22, Y+7	; 0x07
    1d66:	78 85       	ldd	r23, Y+8	; 0x08
    1d68:	89 85       	ldd	r24, Y+9	; 0x09
    1d6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	3f ef       	ldi	r19, 0xFF	; 255
    1d70:	4f e7       	ldi	r20, 0x7F	; 127
    1d72:	57 e4       	ldi	r21, 0x47	; 71
    1d74:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1d78:	18 16       	cp	r1, r24
    1d7a:	4c f5       	brge	.+82     	; 0x1dce <MC2_savePassword+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e2       	ldi	r20, 0x20	; 32
    1d8a:	51 e4       	ldi	r21, 0x41	; 65
    1d8c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	9e 83       	std	Y+6, r25	; 0x06
    1da2:	8d 83       	std	Y+5, r24	; 0x05
    1da4:	0f c0       	rjmp	.+30     	; 0x1dc4 <MC2_savePassword+0xf2>
    1da6:	89 e1       	ldi	r24, 0x19	; 25
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	9c 83       	std	Y+4, r25	; 0x04
    1dac:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	9c 81       	ldd	r25, Y+4	; 0x04
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <MC2_savePassword+0xe0>
    1db6:	9c 83       	std	Y+4, r25	; 0x04
    1db8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	9e 83       	std	Y+6, r25	; 0x06
    1dc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	69 f7       	brne	.-38     	; 0x1da6 <MC2_savePassword+0xd4>
    1dcc:	14 c0       	rjmp	.+40     	; 0x1df6 <MC2_savePassword+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dce:	6f 81       	ldd	r22, Y+7	; 0x07
    1dd0:	78 85       	ldd	r23, Y+8	; 0x08
    1dd2:	89 85       	ldd	r24, Y+9	; 0x09
    1dd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dd6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	9a 81       	ldd	r25, Y+2	; 0x02
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <MC2_savePassword+0x11c>
    1df2:	9a 83       	std	Y+2, r25	; 0x02
    1df4:	89 83       	std	Y+1, r24	; 0x01
 */
void  MC2_savePassword(uint8 *a_passwordArr)
{
	/*this for loop write bytes equal to the number of PASS_LENGTH
	 * in the EEPROM to save the password*/
	for(uint8 counter=0 ; counter < PASS_LENGTH ; counter++)
    1df6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1df8:	8f 5f       	subi	r24, 0xFF	; 255
    1dfa:	8f 87       	std	Y+15, r24	; 0x0f
    1dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dfe:	85 30       	cpi	r24, 0x05	; 5
    1e00:	08 f4       	brcc	.+2      	; 0x1e04 <MC2_savePassword+0x132>
    1e02:	75 cf       	rjmp	.-278    	; 0x1cee <MC2_savePassword+0x1c>
	{
		EEPROM_writeByte(PASSWORD_ADDRESS+counter,a_passwordArr[counter]);
		_delay_ms(100);
	}
}
    1e04:	61 96       	adiw	r28, 0x11	; 17
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <MC2_readPassword>:
 * Input:
 * 		a_passwordSavedInEeprom: pointer to constant data in array of characters
 */

void  MC2_readPassword(const uint8 *a_passwordSavedInEeprom)
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	61 97       	sbiw	r28, 0x11	; 17
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	de bf       	out	0x3e, r29	; 62
    1e26:	0f be       	out	0x3f, r0	; 63
    1e28:	cd bf       	out	0x3d, r28	; 61
    1e2a:	99 8b       	std	Y+17, r25	; 0x11
    1e2c:	88 8b       	std	Y+16, r24	; 0x10
	/*this for loop read bytes equal to the number of PASS_LENGTH
	 * from the EEPROM to read the current password*/
	for(uint8 counter=0 ; counter < PASS_LENGTH ; counter++)
    1e2e:	1f 86       	std	Y+15, r1	; 0x0f
    1e30:	85 c0       	rjmp	.+266    	; 0x1f3c <MC2_readPassword+0x126>
	{
		EEPROM_readByte(PASSWORD_ADDRESS+counter,a_passwordSavedInEeprom+counter);
    1e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e34:	88 2f       	mov	r24, r24
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	05 96       	adiw	r24, 0x05	; 5
    1e3a:	ac 01       	movw	r20, r24
    1e3c:	28 89       	ldd	r18, Y+16	; 0x10
    1e3e:	39 89       	ldd	r19, Y+17	; 0x11
    1e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e42:	88 2f       	mov	r24, r24
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	28 0f       	add	r18, r24
    1e48:	39 1f       	adc	r19, r25
    1e4a:	ca 01       	movw	r24, r20
    1e4c:	b9 01       	movw	r22, r18
    1e4e:	0e 94 b7 10 	call	0x216e	; 0x216e <EEPROM_readByte>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a8 ec       	ldi	r26, 0xC8	; 200
    1e58:	b2 e4       	ldi	r27, 0x42	; 66
    1e5a:	8b 87       	std	Y+11, r24	; 0x0b
    1e5c:	9c 87       	std	Y+12, r25	; 0x0c
    1e5e:	ad 87       	std	Y+13, r26	; 0x0d
    1e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	4a e7       	ldi	r20, 0x7A	; 122
    1e70:	53 e4       	ldi	r21, 0x43	; 67
    1e72:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	8f 83       	std	Y+7, r24	; 0x07
    1e7c:	98 87       	std	Y+8, r25	; 0x08
    1e7e:	a9 87       	std	Y+9, r26	; 0x09
    1e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e82:	6f 81       	ldd	r22, Y+7	; 0x07
    1e84:	78 85       	ldd	r23, Y+8	; 0x08
    1e86:	89 85       	ldd	r24, Y+9	; 0x09
    1e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	40 e8       	ldi	r20, 0x80	; 128
    1e90:	5f e3       	ldi	r21, 0x3F	; 63
    1e92:	0e 94 6d 0a 	call	0x14da	; 0x14da <__ltsf2>
    1e96:	88 23       	and	r24, r24
    1e98:	2c f4       	brge	.+10     	; 0x1ea4 <MC2_readPassword+0x8e>
		__ticks = 1;
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9e 83       	std	Y+6, r25	; 0x06
    1ea0:	8d 83       	std	Y+5, r24	; 0x05
    1ea2:	3f c0       	rjmp	.+126    	; 0x1f22 <MC2_readPassword+0x10c>
	else if (__tmp > 65535)
    1ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea6:	78 85       	ldd	r23, Y+8	; 0x08
    1ea8:	89 85       	ldd	r24, Y+9	; 0x09
    1eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	3f ef       	ldi	r19, 0xFF	; 255
    1eb0:	4f e7       	ldi	r20, 0x7F	; 127
    1eb2:	57 e4       	ldi	r21, 0x47	; 71
    1eb4:	0e 94 0d 0a 	call	0x141a	; 0x141a <__gtsf2>
    1eb8:	18 16       	cp	r1, r24
    1eba:	4c f5       	brge	.+82     	; 0x1f0e <MC2_readPassword+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	bc 01       	movw	r22, r24
    1ed6:	cd 01       	movw	r24, r26
    1ed8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	0f c0       	rjmp	.+30     	; 0x1f04 <MC2_readPassword+0xee>
    1ee6:	89 e1       	ldi	r24, 0x19	; 25
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 83       	std	Y+4, r25	; 0x04
    1eec:	8b 83       	std	Y+3, r24	; 0x03
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <MC2_readPassword+0xdc>
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f04:	8d 81       	ldd	r24, Y+5	; 0x05
    1f06:	9e 81       	ldd	r25, Y+6	; 0x06
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	69 f7       	brne	.-38     	; 0x1ee6 <MC2_readPassword+0xd0>
    1f0c:	14 c0       	rjmp	.+40     	; 0x1f36 <MC2_readPassword+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f10:	78 85       	ldd	r23, Y+8	; 0x08
    1f12:	89 85       	ldd	r24, Y+9	; 0x09
    1f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f16:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	8d 83       	std	Y+5, r24	; 0x05
    1f22:	8d 81       	ldd	r24, Y+5	; 0x05
    1f24:	9e 81       	ldd	r25, Y+6	; 0x06
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	f1 f7       	brne	.-4      	; 0x1f2e <MC2_readPassword+0x118>
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01

void  MC2_readPassword(const uint8 *a_passwordSavedInEeprom)
{
	/*this for loop read bytes equal to the number of PASS_LENGTH
	 * from the EEPROM to read the current password*/
	for(uint8 counter=0 ; counter < PASS_LENGTH ; counter++)
    1f36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	8f 87       	std	Y+15, r24	; 0x0f
    1f3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f3e:	85 30       	cpi	r24, 0x05	; 5
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <MC2_readPassword+0x12e>
    1f42:	77 cf       	rjmp	.-274    	; 0x1e32 <MC2_readPassword+0x1c>
	{
		EEPROM_readByte(PASSWORD_ADDRESS+counter,a_passwordSavedInEeprom+counter);
		_delay_ms(100);
	}
}
    1f44:	61 96       	adiw	r28, 0x11	; 17
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <MC2_timer_Handler>:
 * Description: this is the callback function of the time
 * 				this function increment the counter of seconds
 */

void MC2_timer_Handler()
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
	/*increment the seconds counter each call*/
	g_timer_counter++;
    1f5e:	80 91 87 01 	lds	r24, 0x0187
    1f62:	8f 5f       	subi	r24, 0xFF	; 255
    1f64:	80 93 87 01 	sts	0x0187, r24
}
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <MC2_alarm>:
/* Function Name:  MC2_alarm
 * Description: this function enable the buzzer for one second
 */

void MC2_alarm()
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
	if(g_flag_buzzer== 1 )
    1f76:	80 91 69 01 	lds	r24, 0x0169
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	31 f4       	brne	.+12     	; 0x1f8a <MC2_alarm+0x1c>
	{
		/*initiate the timer driver to count the 60 seconds*/
		TIMER_init(&g_timer);
    1f7e:	8a e6       	ldi	r24, 0x6A	; 106
    1f80:	91 e0       	ldi	r25, 0x01	; 1
    1f82:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <TIMER_init>

		/*clear the flag so that the timer INIT won't be called
		 * again in next iterations of the super loop */
		g_flag_buzzer=0;
    1f86:	10 92 69 01 	sts	0x0169, r1
	}
	if(g_timer_counter <=60)
    1f8a:	80 91 87 01 	lds	r24, 0x0187
    1f8e:	8d 33       	cpi	r24, 0x3D	; 61
    1f90:	18 f4       	brcc	.+6      	; 0x1f98 <MC2_alarm+0x2a>
	{
		/*enable the buzzer for 60 seconds*/
		BUZZER_on();
    1f92:	0e 94 04 10 	call	0x2008	; 0x2008 <BUZZER_on>
    1f96:	18 c0       	rjmp	.+48     	; 0x1fc8 <MC2_alarm+0x5a>
	}
	else if (g_timer_counter>60)
    1f98:	80 91 87 01 	lds	r24, 0x0187
    1f9c:	8d 33       	cpi	r24, 0x3D	; 61
    1f9e:	a0 f0       	brcs	.+40     	; 0x1fc8 <MC2_alarm+0x5a>
		/*after 1 minute close the buzzer
		 * close the timer driver by clearing the clock bits
		 * set the g_flag_buzzer again so that the function could be  executed again
		 * clear the timer counter
		 * */
		BUZZER_off();
    1fa0:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <BUZZER_off>
		g_flag_buzzer=1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	80 93 69 01 	sts	0x0169, r24
		TIMER_deinit(&g_timer);
    1faa:	8a e6       	ldi	r24, 0x6A	; 106
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <TIMER_deinit>
		g_timer_counter=0;
    1fb2:	10 92 87 01 	sts	0x0187, r1

		/*change current state to MAIN_OPTIONS */
		g_state = MAIN_OPTIONS;
    1fb6:	8d ef       	ldi	r24, 0xFD	; 253
    1fb8:	80 93 9e 01 	sts	0x019E, r24

		/*send the current state to HMI_ECU */
		UART_sendByte(g_state);
    1fbc:	80 91 9e 01 	lds	r24, 0x019E
    1fc0:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>

		/*clear the mismatch counter */
		mismatchCounter=0;
    1fc4:	10 92 86 01 	sts	0x0186, r1
	}
}
    1fc8:	cf 91       	pop	r28
    1fca:	df 91       	pop	r29
    1fcc:	08 95       	ret

00001fce <BUZZER_init>:
/*Function name:BUZZER_init
 * Description :
 * initiating the buzzer driver according to the connection port and pin
 */
void BUZZER_init()
{
    1fce:	df 93       	push	r29
    1fd0:	cf 93       	push	r28
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	60 e0       	ldi	r22, 0x00	; 0
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 17 11 	call	0x222e	; 0x222e <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_LOW);
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	60 e0       	ldi	r22, 0x00	; 0
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
}
    1fea:	cf 91       	pop	r28
    1fec:	df 91       	pop	r29
    1fee:	08 95       	ret

00001ff0 <BUZZER_off>:
/*Function name:BUZZER_off
 * Description :
 * disabling the buzzer
 */
void BUZZER_off()
{
    1ff0:	df 93       	push	r29
    1ff2:	cf 93       	push	r28
    1ff4:	cd b7       	in	r28, 0x3d	; 61
    1ff6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_LOW);
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	60 e0       	ldi	r22, 0x00	; 0
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
}
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <BUZZER_on>:
 * Description :
 * enabling the buzzer
 *
 */
void BUZZER_on()
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID,LOGIC_HIGH);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	60 e0       	ldi	r22, 0x00	; 0
    2014:	41 e0       	ldi	r20, 0x01	; 1
    2016:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
}
    201a:	cf 91       	pop	r28
    201c:	df 91       	pop	r29
    201e:	08 95       	ret

00002020 <DcMotor_Init>:
/* Function Name:DcMotor_Init
 * Description: initialize the DC motor driver selected pins in the AVR
 * 				to output pins and keep the motor off at start
 */
void DcMotor_Init(void)
{
    2020:	df 93       	push	r29
    2022:	cf 93       	push	r28
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, PIN_OUTPUT);/*SET THE MOTOR PINS AS OUTPUT*/
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	41 e0       	ldi	r20, 0x01	; 1
    202e:	0e 94 17 11 	call	0x222e	; 0x222e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, PIN_OUTPUT);
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	61 e0       	ldi	r22, 0x01	; 1
    2036:	41 e0       	ldi	r20, 0x01	; 1
    2038:	0e 94 17 11 	call	0x222e	; 0x222e <GPIO_setupPinDirection>
	GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_LOW);/*MOTOR  OFF AT THE BEGINNG*/
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	40 e0       	ldi	r20, 0x00	; 0
    2042:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
	GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_LOW);
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	61 e0       	ldi	r22, 0x01	; 1
    204a:	40 e0       	ldi	r20, 0x00	; 0
    204c:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>

}
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <DcMotor_Rotate>:
 * description: update the motor state and speed according to its selected configuration structure
 * Arguments:the member of the config_type structure state
 *
 */
void DcMotor_Rotate(DcMotor_State a_state)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	00 d0       	rcall	.+0      	; 0x205c <DcMotor_Rotate+0x6>
    205c:	0f 92       	push	r0
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	89 83       	std	Y+1, r24	; 0x01
	switch (a_state)
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	3b 83       	std	Y+3, r19	; 0x03
    206c:	2a 83       	std	Y+2, r18	; 0x02
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	9b 81       	ldd	r25, Y+3	; 0x03
    2072:	81 30       	cpi	r24, 0x01	; 1
    2074:	91 05       	cpc	r25, r1
    2076:	a1 f0       	breq	.+40     	; 0x20a0 <DcMotor_Rotate+0x4a>
    2078:	2a 81       	ldd	r18, Y+2	; 0x02
    207a:	3b 81       	ldd	r19, Y+3	; 0x03
    207c:	22 30       	cpi	r18, 0x02	; 2
    207e:	31 05       	cpc	r19, r1
    2080:	d1 f0       	breq	.+52     	; 0x20b6 <DcMotor_Rotate+0x60>
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	00 97       	sbiw	r24, 0x00	; 0
    2088:	09 f5       	brne	.+66     	; 0x20cc <DcMotor_Rotate+0x76>
	{/* switch case on the new state value to update the motor state*/
	case STOP:
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_LOW);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_LOW);/*both pins are zeros motor stop*/
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	61 e0       	ldi	r22, 0x01	; 1
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
    209e:	20 c0       	rjmp	.+64     	; 0x20e0 <DcMotor_Rotate+0x8a>
		break;
	case CLOCKWISE:
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_LOW);/*set motor pins in CW direction*/
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	60 e0       	ldi	r22, 0x00	; 0
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_HIGH);
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	61 e0       	ldi	r22, 0x01	; 1
    20ae:	41 e0       	ldi	r20, 0x01	; 1
    20b0:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
    20b4:	15 c0       	rjmp	.+42     	; 0x20e0 <DcMotor_Rotate+0x8a>
		break;
	case ANTI_CLOCKWISE:
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_HIGH);/*set motor pins in ACW direction*/
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	41 e0       	ldi	r20, 0x01	; 1
    20bc:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_LOW);
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
    20ca:	0a c0       	rjmp	.+20     	; 0x20e0 <DcMotor_Rotate+0x8a>
		break;
	default:
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN1_PIN_ID, LOGIC_LOW);
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>
		GPIO_writePin(MOTOR1_IN_PORT_ID, MOTOR1_IN2_PIN_ID, LOGIC_LOW);/*both pins are zeros motor stop*/
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	0e 94 02 12 	call	0x2404	; 0x2404 <GPIO_writePin>

	}
}
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    20ec:	df 93       	push	r29
    20ee:	cf 93       	push	r28
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <EEPROM_writeByte+0x6>
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <EEPROM_writeByte+0x8>
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	9a 83       	std	Y+2, r25	; 0x02
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    20fe:	0e 94 05 18 	call	0x300a	; 0x300a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2102:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    2106:	88 30       	cpi	r24, 0x08	; 8
    2108:	11 f0       	breq	.+4      	; 0x210e <EEPROM_writeByte+0x22>
        return ERROR;
    210a:	1c 82       	std	Y+4, r1	; 0x04
    210c:	28 c0       	rjmp	.+80     	; 0x215e <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	9a 81       	ldd	r25, Y+2	; 0x02
    2112:	80 70       	andi	r24, 0x00	; 0
    2114:	97 70       	andi	r25, 0x07	; 7
    2116:	88 0f       	add	r24, r24
    2118:	89 2f       	mov	r24, r25
    211a:	88 1f       	adc	r24, r24
    211c:	99 0b       	sbc	r25, r25
    211e:	91 95       	neg	r25
    2120:	80 6a       	ori	r24, 0xA0	; 160
    2122:	0e 94 20 18 	call	0x3040	; 0x3040 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    2126:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    212a:	88 31       	cpi	r24, 0x18	; 24
    212c:	11 f0       	breq	.+4      	; 0x2132 <EEPROM_writeByte+0x46>
        return ERROR; 
    212e:	1c 82       	std	Y+4, r1	; 0x04
    2130:	16 c0       	rjmp	.+44     	; 0x215e <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	0e 94 20 18 	call	0x3040	; 0x3040 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    2138:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    213c:	88 32       	cpi	r24, 0x28	; 40
    213e:	11 f0       	breq	.+4      	; 0x2144 <EEPROM_writeByte+0x58>
        return ERROR;
    2140:	1c 82       	std	Y+4, r1	; 0x04
    2142:	0d c0       	rjmp	.+26     	; 0x215e <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	0e 94 20 18 	call	0x3040	; 0x3040 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    214a:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    214e:	88 32       	cpi	r24, 0x28	; 40
    2150:	11 f0       	breq	.+4      	; 0x2156 <EEPROM_writeByte+0x6a>
        return ERROR;
    2152:	1c 82       	std	Y+4, r1	; 0x04
    2154:	04 c0       	rjmp	.+8      	; 0x215e <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2156:	0e 94 15 18 	call	0x302a	; 0x302a <TWI_stop>
	
    return SUCCESS;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	8c 83       	std	Y+4, r24	; 0x04
    215e:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	00 d0       	rcall	.+0      	; 0x2174 <EEPROM_readByte+0x6>
    2174:	00 d0       	rcall	.+0      	; 0x2176 <EEPROM_readByte+0x8>
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	9a 83       	std	Y+2, r25	; 0x02
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	7c 83       	std	Y+4, r23	; 0x04
    2182:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2184:	0e 94 05 18 	call	0x300a	; 0x300a <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2188:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    218c:	88 30       	cpi	r24, 0x08	; 8
    218e:	11 f0       	breq	.+4      	; 0x2194 <EEPROM_readByte+0x26>
        return ERROR;
    2190:	1d 82       	std	Y+5, r1	; 0x05
    2192:	44 c0       	rjmp	.+136    	; 0x221c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	80 70       	andi	r24, 0x00	; 0
    219a:	97 70       	andi	r25, 0x07	; 7
    219c:	88 0f       	add	r24, r24
    219e:	89 2f       	mov	r24, r25
    21a0:	88 1f       	adc	r24, r24
    21a2:	99 0b       	sbc	r25, r25
    21a4:	91 95       	neg	r25
    21a6:	80 6a       	ori	r24, 0xA0	; 160
    21a8:	0e 94 20 18 	call	0x3040	; 0x3040 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    21ac:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    21b0:	88 31       	cpi	r24, 0x18	; 24
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <EEPROM_readByte+0x4a>
        return ERROR;
    21b4:	1d 82       	std	Y+5, r1	; 0x05
    21b6:	32 c0       	rjmp	.+100    	; 0x221c <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	0e 94 20 18 	call	0x3040	; 0x3040 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    21be:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    21c2:	88 32       	cpi	r24, 0x28	; 40
    21c4:	11 f0       	breq	.+4      	; 0x21ca <EEPROM_readByte+0x5c>
        return ERROR;
    21c6:	1d 82       	std	Y+5, r1	; 0x05
    21c8:	29 c0       	rjmp	.+82     	; 0x221c <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    21ca:	0e 94 05 18 	call	0x300a	; 0x300a <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    21ce:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    21d2:	80 31       	cpi	r24, 0x10	; 16
    21d4:	11 f0       	breq	.+4      	; 0x21da <EEPROM_readByte+0x6c>
        return ERROR;
    21d6:	1d 82       	std	Y+5, r1	; 0x05
    21d8:	21 c0       	rjmp	.+66     	; 0x221c <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    21da:	89 81       	ldd	r24, Y+1	; 0x01
    21dc:	9a 81       	ldd	r25, Y+2	; 0x02
    21de:	80 70       	andi	r24, 0x00	; 0
    21e0:	97 70       	andi	r25, 0x07	; 7
    21e2:	88 0f       	add	r24, r24
    21e4:	89 2f       	mov	r24, r25
    21e6:	88 1f       	adc	r24, r24
    21e8:	99 0b       	sbc	r25, r25
    21ea:	91 95       	neg	r25
    21ec:	81 6a       	ori	r24, 0xA1	; 161
    21ee:	0e 94 20 18 	call	0x3040	; 0x3040 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    21f2:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    21f6:	80 34       	cpi	r24, 0x40	; 64
    21f8:	11 f0       	breq	.+4      	; 0x21fe <EEPROM_readByte+0x90>
        return ERROR;
    21fa:	1d 82       	std	Y+5, r1	; 0x05
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    21fe:	0e 94 4a 18 	call	0x3094	; 0x3094 <TWI_readByteWithNACK>
    2202:	eb 81       	ldd	r30, Y+3	; 0x03
    2204:	fc 81       	ldd	r31, Y+4	; 0x04
    2206:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2208:	0e 94 5d 18 	call	0x30ba	; 0x30ba <TWI_getStatus>
    220c:	88 35       	cpi	r24, 0x58	; 88
    220e:	11 f0       	breq	.+4      	; 0x2214 <EEPROM_readByte+0xa6>
        return ERROR;
    2210:	1d 82       	std	Y+5, r1	; 0x05
    2212:	04 c0       	rjmp	.+8      	; 0x221c <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2214:	0e 94 15 18 	call	0x302a	; 0x302a <TWI_stop>

    return SUCCESS;
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	8d 83       	std	Y+5, r24	; 0x05
    221c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	00 d0       	rcall	.+0      	; 0x2234 <GPIO_setupPinDirection+0x6>
    2234:	00 d0       	rcall	.+0      	; 0x2236 <GPIO_setupPinDirection+0x8>
    2236:	0f 92       	push	r0
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	89 83       	std	Y+1, r24	; 0x01
    223e:	6a 83       	std	Y+2, r22	; 0x02
    2240:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2242:	8a 81       	ldd	r24, Y+2	; 0x02
    2244:	88 30       	cpi	r24, 0x08	; 8
    2246:	08 f0       	brcs	.+2      	; 0x224a <GPIO_setupPinDirection+0x1c>
    2248:	d5 c0       	rjmp	.+426    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	84 30       	cpi	r24, 0x04	; 4
    224e:	08 f0       	brcs	.+2      	; 0x2252 <GPIO_setupPinDirection+0x24>
    2250:	d1 c0       	rjmp	.+418    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2252:	89 81       	ldd	r24, Y+1	; 0x01
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	3d 83       	std	Y+5, r19	; 0x05
    225a:	2c 83       	std	Y+4, r18	; 0x04
    225c:	8c 81       	ldd	r24, Y+4	; 0x04
    225e:	9d 81       	ldd	r25, Y+5	; 0x05
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	91 05       	cpc	r25, r1
    2264:	09 f4       	brne	.+2      	; 0x2268 <GPIO_setupPinDirection+0x3a>
    2266:	43 c0       	rjmp	.+134    	; 0x22ee <GPIO_setupPinDirection+0xc0>
    2268:	2c 81       	ldd	r18, Y+4	; 0x04
    226a:	3d 81       	ldd	r19, Y+5	; 0x05
    226c:	22 30       	cpi	r18, 0x02	; 2
    226e:	31 05       	cpc	r19, r1
    2270:	2c f4       	brge	.+10     	; 0x227c <GPIO_setupPinDirection+0x4e>
    2272:	8c 81       	ldd	r24, Y+4	; 0x04
    2274:	9d 81       	ldd	r25, Y+5	; 0x05
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	71 f0       	breq	.+28     	; 0x2296 <GPIO_setupPinDirection+0x68>
    227a:	bc c0       	rjmp	.+376    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
    227c:	2c 81       	ldd	r18, Y+4	; 0x04
    227e:	3d 81       	ldd	r19, Y+5	; 0x05
    2280:	22 30       	cpi	r18, 0x02	; 2
    2282:	31 05       	cpc	r19, r1
    2284:	09 f4       	brne	.+2      	; 0x2288 <GPIO_setupPinDirection+0x5a>
    2286:	5f c0       	rjmp	.+190    	; 0x2346 <GPIO_setupPinDirection+0x118>
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	9d 81       	ldd	r25, Y+5	; 0x05
    228c:	83 30       	cpi	r24, 0x03	; 3
    228e:	91 05       	cpc	r25, r1
    2290:	09 f4       	brne	.+2      	; 0x2294 <GPIO_setupPinDirection+0x66>
    2292:	85 c0       	rjmp	.+266    	; 0x239e <GPIO_setupPinDirection+0x170>
    2294:	af c0       	rjmp	.+350    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	81 30       	cpi	r24, 0x01	; 1
    229a:	a1 f4       	brne	.+40     	; 0x22c4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    229c:	aa e3       	ldi	r26, 0x3A	; 58
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ea e3       	ldi	r30, 0x3A	; 58
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	48 2f       	mov	r20, r24
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	02 2e       	mov	r0, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <GPIO_setupPinDirection+0x8c>
    22b6:	88 0f       	add	r24, r24
    22b8:	99 1f       	adc	r25, r25
    22ba:	0a 94       	dec	r0
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <GPIO_setupPinDirection+0x88>
    22be:	84 2b       	or	r24, r20
    22c0:	8c 93       	st	X, r24
    22c2:	98 c0       	rjmp	.+304    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    22c4:	aa e3       	ldi	r26, 0x3A	; 58
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ea e3       	ldi	r30, 0x3A	; 58
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	48 2f       	mov	r20, r24
    22d0:	8a 81       	ldd	r24, Y+2	; 0x02
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	02 2e       	mov	r0, r18
    22dc:	02 c0       	rjmp	.+4      	; 0x22e2 <GPIO_setupPinDirection+0xb4>
    22de:	88 0f       	add	r24, r24
    22e0:	99 1f       	adc	r25, r25
    22e2:	0a 94       	dec	r0
    22e4:	e2 f7       	brpl	.-8      	; 0x22de <GPIO_setupPinDirection+0xb0>
    22e6:	80 95       	com	r24
    22e8:	84 23       	and	r24, r20
    22ea:	8c 93       	st	X, r24
    22ec:	83 c0       	rjmp	.+262    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	a1 f4       	brne	.+40     	; 0x231c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    22f4:	a7 e3       	ldi	r26, 0x37	; 55
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	e7 e3       	ldi	r30, 0x37	; 55
    22fa:	f0 e0       	ldi	r31, 0x00	; 0
    22fc:	80 81       	ld	r24, Z
    22fe:	48 2f       	mov	r20, r24
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	28 2f       	mov	r18, r24
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	02 2e       	mov	r0, r18
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <GPIO_setupPinDirection+0xe4>
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	0a 94       	dec	r0
    2314:	e2 f7       	brpl	.-8      	; 0x230e <GPIO_setupPinDirection+0xe0>
    2316:	84 2b       	or	r24, r20
    2318:	8c 93       	st	X, r24
    231a:	6c c0       	rjmp	.+216    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    231c:	a7 e3       	ldi	r26, 0x37	; 55
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e7 e3       	ldi	r30, 0x37	; 55
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	48 2f       	mov	r20, r24
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	28 2f       	mov	r18, r24
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	02 2e       	mov	r0, r18
    2334:	02 c0       	rjmp	.+4      	; 0x233a <GPIO_setupPinDirection+0x10c>
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	0a 94       	dec	r0
    233c:	e2 f7       	brpl	.-8      	; 0x2336 <GPIO_setupPinDirection+0x108>
    233e:	80 95       	com	r24
    2340:	84 23       	and	r24, r20
    2342:	8c 93       	st	X, r24
    2344:	57 c0       	rjmp	.+174    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	a1 f4       	brne	.+40     	; 0x2374 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    234c:	a4 e3       	ldi	r26, 0x34	; 52
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	e4 e3       	ldi	r30, 0x34	; 52
    2352:	f0 e0       	ldi	r31, 0x00	; 0
    2354:	80 81       	ld	r24, Z
    2356:	48 2f       	mov	r20, r24
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	28 2f       	mov	r18, r24
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	02 2e       	mov	r0, r18
    2364:	02 c0       	rjmp	.+4      	; 0x236a <GPIO_setupPinDirection+0x13c>
    2366:	88 0f       	add	r24, r24
    2368:	99 1f       	adc	r25, r25
    236a:	0a 94       	dec	r0
    236c:	e2 f7       	brpl	.-8      	; 0x2366 <GPIO_setupPinDirection+0x138>
    236e:	84 2b       	or	r24, r20
    2370:	8c 93       	st	X, r24
    2372:	40 c0       	rjmp	.+128    	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2374:	a4 e3       	ldi	r26, 0x34	; 52
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	e4 e3       	ldi	r30, 0x34	; 52
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	48 2f       	mov	r20, r24
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	28 2f       	mov	r18, r24
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	02 2e       	mov	r0, r18
    238c:	02 c0       	rjmp	.+4      	; 0x2392 <GPIO_setupPinDirection+0x164>
    238e:	88 0f       	add	r24, r24
    2390:	99 1f       	adc	r25, r25
    2392:	0a 94       	dec	r0
    2394:	e2 f7       	brpl	.-8      	; 0x238e <GPIO_setupPinDirection+0x160>
    2396:	80 95       	com	r24
    2398:	84 23       	and	r24, r20
    239a:	8c 93       	st	X, r24
    239c:	2b c0       	rjmp	.+86     	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	81 30       	cpi	r24, 0x01	; 1
    23a2:	a1 f4       	brne	.+40     	; 0x23cc <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    23a4:	a1 e3       	ldi	r26, 0x31	; 49
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e1 e3       	ldi	r30, 0x31	; 49
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	48 2f       	mov	r20, r24
    23b0:	8a 81       	ldd	r24, Y+2	; 0x02
    23b2:	28 2f       	mov	r18, r24
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	02 2e       	mov	r0, r18
    23bc:	02 c0       	rjmp	.+4      	; 0x23c2 <GPIO_setupPinDirection+0x194>
    23be:	88 0f       	add	r24, r24
    23c0:	99 1f       	adc	r25, r25
    23c2:	0a 94       	dec	r0
    23c4:	e2 f7       	brpl	.-8      	; 0x23be <GPIO_setupPinDirection+0x190>
    23c6:	84 2b       	or	r24, r20
    23c8:	8c 93       	st	X, r24
    23ca:	14 c0       	rjmp	.+40     	; 0x23f4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    23cc:	a1 e3       	ldi	r26, 0x31	; 49
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e1 e3       	ldi	r30, 0x31	; 49
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	48 2f       	mov	r20, r24
    23d8:	8a 81       	ldd	r24, Y+2	; 0x02
    23da:	28 2f       	mov	r18, r24
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	02 2e       	mov	r0, r18
    23e4:	02 c0       	rjmp	.+4      	; 0x23ea <GPIO_setupPinDirection+0x1bc>
    23e6:	88 0f       	add	r24, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	0a 94       	dec	r0
    23ec:	e2 f7       	brpl	.-8      	; 0x23e6 <GPIO_setupPinDirection+0x1b8>
    23ee:	80 95       	com	r24
    23f0:	84 23       	and	r24, r20
    23f2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	00 d0       	rcall	.+0      	; 0x240a <GPIO_writePin+0x6>
    240a:	00 d0       	rcall	.+0      	; 0x240c <GPIO_writePin+0x8>
    240c:	0f 92       	push	r0
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	89 83       	std	Y+1, r24	; 0x01
    2414:	6a 83       	std	Y+2, r22	; 0x02
    2416:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	88 30       	cpi	r24, 0x08	; 8
    241c:	08 f0       	brcs	.+2      	; 0x2420 <GPIO_writePin+0x1c>
    241e:	d5 c0       	rjmp	.+426    	; 0x25ca <GPIO_writePin+0x1c6>
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	84 30       	cpi	r24, 0x04	; 4
    2424:	08 f0       	brcs	.+2      	; 0x2428 <GPIO_writePin+0x24>
    2426:	d1 c0       	rjmp	.+418    	; 0x25ca <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	28 2f       	mov	r18, r24
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	3d 83       	std	Y+5, r19	; 0x05
    2430:	2c 83       	std	Y+4, r18	; 0x04
    2432:	8c 81       	ldd	r24, Y+4	; 0x04
    2434:	9d 81       	ldd	r25, Y+5	; 0x05
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	91 05       	cpc	r25, r1
    243a:	09 f4       	brne	.+2      	; 0x243e <GPIO_writePin+0x3a>
    243c:	43 c0       	rjmp	.+134    	; 0x24c4 <GPIO_writePin+0xc0>
    243e:	2c 81       	ldd	r18, Y+4	; 0x04
    2440:	3d 81       	ldd	r19, Y+5	; 0x05
    2442:	22 30       	cpi	r18, 0x02	; 2
    2444:	31 05       	cpc	r19, r1
    2446:	2c f4       	brge	.+10     	; 0x2452 <GPIO_writePin+0x4e>
    2448:	8c 81       	ldd	r24, Y+4	; 0x04
    244a:	9d 81       	ldd	r25, Y+5	; 0x05
    244c:	00 97       	sbiw	r24, 0x00	; 0
    244e:	71 f0       	breq	.+28     	; 0x246c <GPIO_writePin+0x68>
    2450:	bc c0       	rjmp	.+376    	; 0x25ca <GPIO_writePin+0x1c6>
    2452:	2c 81       	ldd	r18, Y+4	; 0x04
    2454:	3d 81       	ldd	r19, Y+5	; 0x05
    2456:	22 30       	cpi	r18, 0x02	; 2
    2458:	31 05       	cpc	r19, r1
    245a:	09 f4       	brne	.+2      	; 0x245e <GPIO_writePin+0x5a>
    245c:	5f c0       	rjmp	.+190    	; 0x251c <GPIO_writePin+0x118>
    245e:	8c 81       	ldd	r24, Y+4	; 0x04
    2460:	9d 81       	ldd	r25, Y+5	; 0x05
    2462:	83 30       	cpi	r24, 0x03	; 3
    2464:	91 05       	cpc	r25, r1
    2466:	09 f4       	brne	.+2      	; 0x246a <GPIO_writePin+0x66>
    2468:	85 c0       	rjmp	.+266    	; 0x2574 <GPIO_writePin+0x170>
    246a:	af c0       	rjmp	.+350    	; 0x25ca <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	81 30       	cpi	r24, 0x01	; 1
    2470:	a1 f4       	brne	.+40     	; 0x249a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2472:	ab e3       	ldi	r26, 0x3B	; 59
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	eb e3       	ldi	r30, 0x3B	; 59
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	48 2f       	mov	r20, r24
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	02 2e       	mov	r0, r18
    248a:	02 c0       	rjmp	.+4      	; 0x2490 <GPIO_writePin+0x8c>
    248c:	88 0f       	add	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	0a 94       	dec	r0
    2492:	e2 f7       	brpl	.-8      	; 0x248c <GPIO_writePin+0x88>
    2494:	84 2b       	or	r24, r20
    2496:	8c 93       	st	X, r24
    2498:	98 c0       	rjmp	.+304    	; 0x25ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    249a:	ab e3       	ldi	r26, 0x3B	; 59
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	eb e3       	ldi	r30, 0x3B	; 59
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	48 2f       	mov	r20, r24
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	28 2f       	mov	r18, r24
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	02 2e       	mov	r0, r18
    24b2:	02 c0       	rjmp	.+4      	; 0x24b8 <GPIO_writePin+0xb4>
    24b4:	88 0f       	add	r24, r24
    24b6:	99 1f       	adc	r25, r25
    24b8:	0a 94       	dec	r0
    24ba:	e2 f7       	brpl	.-8      	; 0x24b4 <GPIO_writePin+0xb0>
    24bc:	80 95       	com	r24
    24be:	84 23       	and	r24, r20
    24c0:	8c 93       	st	X, r24
    24c2:	83 c0       	rjmp	.+262    	; 0x25ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	81 30       	cpi	r24, 0x01	; 1
    24c8:	a1 f4       	brne	.+40     	; 0x24f2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    24ca:	a8 e3       	ldi	r26, 0x38	; 56
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	e8 e3       	ldi	r30, 0x38	; 56
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	48 2f       	mov	r20, r24
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	02 2e       	mov	r0, r18
    24e2:	02 c0       	rjmp	.+4      	; 0x24e8 <GPIO_writePin+0xe4>
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	0a 94       	dec	r0
    24ea:	e2 f7       	brpl	.-8      	; 0x24e4 <GPIO_writePin+0xe0>
    24ec:	84 2b       	or	r24, r20
    24ee:	8c 93       	st	X, r24
    24f0:	6c c0       	rjmp	.+216    	; 0x25ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    24f2:	a8 e3       	ldi	r26, 0x38	; 56
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	e8 e3       	ldi	r30, 0x38	; 56
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	48 2f       	mov	r20, r24
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	02 2e       	mov	r0, r18
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <GPIO_writePin+0x10c>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	0a 94       	dec	r0
    2512:	e2 f7       	brpl	.-8      	; 0x250c <GPIO_writePin+0x108>
    2514:	80 95       	com	r24
    2516:	84 23       	and	r24, r20
    2518:	8c 93       	st	X, r24
    251a:	57 c0       	rjmp	.+174    	; 0x25ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    251c:	8b 81       	ldd	r24, Y+3	; 0x03
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	a1 f4       	brne	.+40     	; 0x254a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    2522:	a5 e3       	ldi	r26, 0x35	; 53
    2524:	b0 e0       	ldi	r27, 0x00	; 0
    2526:	e5 e3       	ldi	r30, 0x35	; 53
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	48 2f       	mov	r20, r24
    252e:	8a 81       	ldd	r24, Y+2	; 0x02
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	02 2e       	mov	r0, r18
    253a:	02 c0       	rjmp	.+4      	; 0x2540 <GPIO_writePin+0x13c>
    253c:	88 0f       	add	r24, r24
    253e:	99 1f       	adc	r25, r25
    2540:	0a 94       	dec	r0
    2542:	e2 f7       	brpl	.-8      	; 0x253c <GPIO_writePin+0x138>
    2544:	84 2b       	or	r24, r20
    2546:	8c 93       	st	X, r24
    2548:	40 c0       	rjmp	.+128    	; 0x25ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    254a:	a5 e3       	ldi	r26, 0x35	; 53
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e5 e3       	ldi	r30, 0x35	; 53
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	80 81       	ld	r24, Z
    2554:	48 2f       	mov	r20, r24
    2556:	8a 81       	ldd	r24, Y+2	; 0x02
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <GPIO_writePin+0x164>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <GPIO_writePin+0x160>
    256c:	80 95       	com	r24
    256e:	84 23       	and	r24, r20
    2570:	8c 93       	st	X, r24
    2572:	2b c0       	rjmp	.+86     	; 0x25ca <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	81 30       	cpi	r24, 0x01	; 1
    2578:	a1 f4       	brne	.+40     	; 0x25a2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    257a:	a2 e3       	ldi	r26, 0x32	; 50
    257c:	b0 e0       	ldi	r27, 0x00	; 0
    257e:	e2 e3       	ldi	r30, 0x32	; 50
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	80 81       	ld	r24, Z
    2584:	48 2f       	mov	r20, r24
    2586:	8a 81       	ldd	r24, Y+2	; 0x02
    2588:	28 2f       	mov	r18, r24
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 2e       	mov	r0, r18
    2592:	02 c0       	rjmp	.+4      	; 0x2598 <GPIO_writePin+0x194>
    2594:	88 0f       	add	r24, r24
    2596:	99 1f       	adc	r25, r25
    2598:	0a 94       	dec	r0
    259a:	e2 f7       	brpl	.-8      	; 0x2594 <GPIO_writePin+0x190>
    259c:	84 2b       	or	r24, r20
    259e:	8c 93       	st	X, r24
    25a0:	14 c0       	rjmp	.+40     	; 0x25ca <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    25a2:	a2 e3       	ldi	r26, 0x32	; 50
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e2 e3       	ldi	r30, 0x32	; 50
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	80 81       	ld	r24, Z
    25ac:	48 2f       	mov	r20, r24
    25ae:	8a 81       	ldd	r24, Y+2	; 0x02
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <GPIO_writePin+0x1bc>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <GPIO_writePin+0x1b8>
    25c4:	80 95       	com	r24
    25c6:	84 23       	and	r24, r20
    25c8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <GPIO_readPin+0x6>
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <GPIO_readPin+0x8>
    25e2:	0f 92       	push	r0
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	8a 83       	std	Y+2, r24	; 0x02
    25ea:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    25ec:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	88 30       	cpi	r24, 0x08	; 8
    25f2:	08 f0       	brcs	.+2      	; 0x25f6 <GPIO_readPin+0x1c>
    25f4:	84 c0       	rjmp	.+264    	; 0x26fe <GPIO_readPin+0x124>
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	84 30       	cpi	r24, 0x04	; 4
    25fa:	08 f0       	brcs	.+2      	; 0x25fe <GPIO_readPin+0x24>
    25fc:	80 c0       	rjmp	.+256    	; 0x26fe <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	28 2f       	mov	r18, r24
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	3d 83       	std	Y+5, r19	; 0x05
    2606:	2c 83       	std	Y+4, r18	; 0x04
    2608:	4c 81       	ldd	r20, Y+4	; 0x04
    260a:	5d 81       	ldd	r21, Y+5	; 0x05
    260c:	41 30       	cpi	r20, 0x01	; 1
    260e:	51 05       	cpc	r21, r1
    2610:	79 f1       	breq	.+94     	; 0x2670 <GPIO_readPin+0x96>
    2612:	8c 81       	ldd	r24, Y+4	; 0x04
    2614:	9d 81       	ldd	r25, Y+5	; 0x05
    2616:	82 30       	cpi	r24, 0x02	; 2
    2618:	91 05       	cpc	r25, r1
    261a:	34 f4       	brge	.+12     	; 0x2628 <GPIO_readPin+0x4e>
    261c:	2c 81       	ldd	r18, Y+4	; 0x04
    261e:	3d 81       	ldd	r19, Y+5	; 0x05
    2620:	21 15       	cp	r18, r1
    2622:	31 05       	cpc	r19, r1
    2624:	69 f0       	breq	.+26     	; 0x2640 <GPIO_readPin+0x66>
    2626:	6b c0       	rjmp	.+214    	; 0x26fe <GPIO_readPin+0x124>
    2628:	4c 81       	ldd	r20, Y+4	; 0x04
    262a:	5d 81       	ldd	r21, Y+5	; 0x05
    262c:	42 30       	cpi	r20, 0x02	; 2
    262e:	51 05       	cpc	r21, r1
    2630:	b9 f1       	breq	.+110    	; 0x26a0 <GPIO_readPin+0xc6>
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	9d 81       	ldd	r25, Y+5	; 0x05
    2636:	83 30       	cpi	r24, 0x03	; 3
    2638:	91 05       	cpc	r25, r1
    263a:	09 f4       	brne	.+2      	; 0x263e <GPIO_readPin+0x64>
    263c:	49 c0       	rjmp	.+146    	; 0x26d0 <GPIO_readPin+0xf6>
    263e:	5f c0       	rjmp	.+190    	; 0x26fe <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2640:	e9 e3       	ldi	r30, 0x39	; 57
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	80 81       	ld	r24, Z
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	a9 01       	movw	r20, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <GPIO_readPin+0x7e>
    2654:	55 95       	asr	r21
    2656:	47 95       	ror	r20
    2658:	8a 95       	dec	r24
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <GPIO_readPin+0x7a>
    265c:	ca 01       	movw	r24, r20
    265e:	81 70       	andi	r24, 0x01	; 1
    2660:	90 70       	andi	r25, 0x00	; 0
    2662:	88 23       	and	r24, r24
    2664:	19 f0       	breq	.+6      	; 0x266c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	49 c0       	rjmp	.+146    	; 0x26fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    266c:	19 82       	std	Y+1, r1	; 0x01
    266e:	47 c0       	rjmp	.+142    	; 0x26fe <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2670:	e6 e3       	ldi	r30, 0x36	; 54
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	88 2f       	mov	r24, r24
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	a9 01       	movw	r20, r18
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <GPIO_readPin+0xae>
    2684:	55 95       	asr	r21
    2686:	47 95       	ror	r20
    2688:	8a 95       	dec	r24
    268a:	e2 f7       	brpl	.-8      	; 0x2684 <GPIO_readPin+0xaa>
    268c:	ca 01       	movw	r24, r20
    268e:	81 70       	andi	r24, 0x01	; 1
    2690:	90 70       	andi	r25, 0x00	; 0
    2692:	88 23       	and	r24, r24
    2694:	19 f0       	breq	.+6      	; 0x269c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	89 83       	std	Y+1, r24	; 0x01
    269a:	31 c0       	rjmp	.+98     	; 0x26fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    269c:	19 82       	std	Y+1, r1	; 0x01
    269e:	2f c0       	rjmp	.+94     	; 0x26fe <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    26a0:	e3 e3       	ldi	r30, 0x33	; 51
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	88 2f       	mov	r24, r24
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	a9 01       	movw	r20, r18
    26b2:	02 c0       	rjmp	.+4      	; 0x26b8 <GPIO_readPin+0xde>
    26b4:	55 95       	asr	r21
    26b6:	47 95       	ror	r20
    26b8:	8a 95       	dec	r24
    26ba:	e2 f7       	brpl	.-8      	; 0x26b4 <GPIO_readPin+0xda>
    26bc:	ca 01       	movw	r24, r20
    26be:	81 70       	andi	r24, 0x01	; 1
    26c0:	90 70       	andi	r25, 0x00	; 0
    26c2:	88 23       	and	r24, r24
    26c4:	19 f0       	breq	.+6      	; 0x26cc <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	19 c0       	rjmp	.+50     	; 0x26fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    26cc:	19 82       	std	Y+1, r1	; 0x01
    26ce:	17 c0       	rjmp	.+46     	; 0x26fe <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    26d0:	e0 e3       	ldi	r30, 0x30	; 48
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	8b 81       	ldd	r24, Y+3	; 0x03
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a9 01       	movw	r20, r18
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <GPIO_readPin+0x10e>
    26e4:	55 95       	asr	r21
    26e6:	47 95       	ror	r20
    26e8:	8a 95       	dec	r24
    26ea:	e2 f7       	brpl	.-8      	; 0x26e4 <GPIO_readPin+0x10a>
    26ec:	ca 01       	movw	r24, r20
    26ee:	81 70       	andi	r24, 0x01	; 1
    26f0:	90 70       	andi	r25, 0x00	; 0
    26f2:	88 23       	and	r24, r24
    26f4:	19 f0       	breq	.+6      	; 0x26fc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	89 83       	std	Y+1, r24	; 0x01
    26fa:	01 c0       	rjmp	.+2      	; 0x26fe <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    26fc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	00 d0       	rcall	.+0      	; 0x2716 <GPIO_setupPortDirection+0x6>
    2716:	00 d0       	rcall	.+0      	; 0x2718 <GPIO_setupPortDirection+0x8>
    2718:	cd b7       	in	r28, 0x3d	; 61
    271a:	de b7       	in	r29, 0x3e	; 62
    271c:	89 83       	std	Y+1, r24	; 0x01
    271e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2720:	89 81       	ldd	r24, Y+1	; 0x01
    2722:	84 30       	cpi	r24, 0x04	; 4
    2724:	90 f5       	brcc	.+100    	; 0x278a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	28 2f       	mov	r18, r24
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	3c 83       	std	Y+4, r19	; 0x04
    272e:	2b 83       	std	Y+3, r18	; 0x03
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	81 30       	cpi	r24, 0x01	; 1
    2736:	91 05       	cpc	r25, r1
    2738:	d1 f0       	breq	.+52     	; 0x276e <GPIO_setupPortDirection+0x5e>
    273a:	2b 81       	ldd	r18, Y+3	; 0x03
    273c:	3c 81       	ldd	r19, Y+4	; 0x04
    273e:	22 30       	cpi	r18, 0x02	; 2
    2740:	31 05       	cpc	r19, r1
    2742:	2c f4       	brge	.+10     	; 0x274e <GPIO_setupPortDirection+0x3e>
    2744:	8b 81       	ldd	r24, Y+3	; 0x03
    2746:	9c 81       	ldd	r25, Y+4	; 0x04
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	61 f0       	breq	.+24     	; 0x2764 <GPIO_setupPortDirection+0x54>
    274c:	1e c0       	rjmp	.+60     	; 0x278a <GPIO_setupPortDirection+0x7a>
    274e:	2b 81       	ldd	r18, Y+3	; 0x03
    2750:	3c 81       	ldd	r19, Y+4	; 0x04
    2752:	22 30       	cpi	r18, 0x02	; 2
    2754:	31 05       	cpc	r19, r1
    2756:	81 f0       	breq	.+32     	; 0x2778 <GPIO_setupPortDirection+0x68>
    2758:	8b 81       	ldd	r24, Y+3	; 0x03
    275a:	9c 81       	ldd	r25, Y+4	; 0x04
    275c:	83 30       	cpi	r24, 0x03	; 3
    275e:	91 05       	cpc	r25, r1
    2760:	81 f0       	breq	.+32     	; 0x2782 <GPIO_setupPortDirection+0x72>
    2762:	13 c0       	rjmp	.+38     	; 0x278a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2764:	ea e3       	ldi	r30, 0x3A	; 58
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	80 83       	st	Z, r24
    276c:	0e c0       	rjmp	.+28     	; 0x278a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    276e:	e7 e3       	ldi	r30, 0x37	; 55
    2770:	f0 e0       	ldi	r31, 0x00	; 0
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	80 83       	st	Z, r24
    2776:	09 c0       	rjmp	.+18     	; 0x278a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2778:	e4 e3       	ldi	r30, 0x34	; 52
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	8a 81       	ldd	r24, Y+2	; 0x02
    277e:	80 83       	st	Z, r24
    2780:	04 c0       	rjmp	.+8      	; 0x278a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2782:	e1 e3       	ldi	r30, 0x31	; 49
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	8a 81       	ldd	r24, Y+2	; 0x02
    2788:	80 83       	st	Z, r24
			break;
		}
	}
}
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	cf 91       	pop	r28
    2794:	df 91       	pop	r29
    2796:	08 95       	ret

00002798 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2798:	df 93       	push	r29
    279a:	cf 93       	push	r28
    279c:	00 d0       	rcall	.+0      	; 0x279e <GPIO_writePort+0x6>
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <GPIO_writePort+0x8>
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	89 83       	std	Y+1, r24	; 0x01
    27a6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	84 30       	cpi	r24, 0x04	; 4
    27ac:	90 f5       	brcc	.+100    	; 0x2812 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    27ae:	89 81       	ldd	r24, Y+1	; 0x01
    27b0:	28 2f       	mov	r18, r24
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	3c 83       	std	Y+4, r19	; 0x04
    27b6:	2b 83       	std	Y+3, r18	; 0x03
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	91 05       	cpc	r25, r1
    27c0:	d1 f0       	breq	.+52     	; 0x27f6 <GPIO_writePort+0x5e>
    27c2:	2b 81       	ldd	r18, Y+3	; 0x03
    27c4:	3c 81       	ldd	r19, Y+4	; 0x04
    27c6:	22 30       	cpi	r18, 0x02	; 2
    27c8:	31 05       	cpc	r19, r1
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <GPIO_writePort+0x3e>
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	9c 81       	ldd	r25, Y+4	; 0x04
    27d0:	00 97       	sbiw	r24, 0x00	; 0
    27d2:	61 f0       	breq	.+24     	; 0x27ec <GPIO_writePort+0x54>
    27d4:	1e c0       	rjmp	.+60     	; 0x2812 <GPIO_writePort+0x7a>
    27d6:	2b 81       	ldd	r18, Y+3	; 0x03
    27d8:	3c 81       	ldd	r19, Y+4	; 0x04
    27da:	22 30       	cpi	r18, 0x02	; 2
    27dc:	31 05       	cpc	r19, r1
    27de:	81 f0       	breq	.+32     	; 0x2800 <GPIO_writePort+0x68>
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	9c 81       	ldd	r25, Y+4	; 0x04
    27e4:	83 30       	cpi	r24, 0x03	; 3
    27e6:	91 05       	cpc	r25, r1
    27e8:	81 f0       	breq	.+32     	; 0x280a <GPIO_writePort+0x72>
    27ea:	13 c0       	rjmp	.+38     	; 0x2812 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    27ec:	eb e3       	ldi	r30, 0x3B	; 59
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	8a 81       	ldd	r24, Y+2	; 0x02
    27f2:	80 83       	st	Z, r24
    27f4:	0e c0       	rjmp	.+28     	; 0x2812 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    27f6:	e8 e3       	ldi	r30, 0x38	; 56
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	80 83       	st	Z, r24
    27fe:	09 c0       	rjmp	.+18     	; 0x2812 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2800:	e5 e3       	ldi	r30, 0x35	; 53
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	80 83       	st	Z, r24
    2808:	04 c0       	rjmp	.+8      	; 0x2812 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    280a:	e2 e3       	ldi	r30, 0x32	; 50
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	8a 81       	ldd	r24, Y+2	; 0x02
    2810:	80 83       	st	Z, r24
			break;
		}
	}
}
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	cf 91       	pop	r28
    281c:	df 91       	pop	r29
    281e:	08 95       	ret

00002820 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2820:	df 93       	push	r29
    2822:	cf 93       	push	r28
    2824:	00 d0       	rcall	.+0      	; 0x2826 <GPIO_readPort+0x6>
    2826:	00 d0       	rcall	.+0      	; 0x2828 <GPIO_readPort+0x8>
    2828:	cd b7       	in	r28, 0x3d	; 61
    282a:	de b7       	in	r29, 0x3e	; 62
    282c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    282e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2830:	8a 81       	ldd	r24, Y+2	; 0x02
    2832:	84 30       	cpi	r24, 0x04	; 4
    2834:	90 f5       	brcc	.+100    	; 0x289a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2836:	8a 81       	ldd	r24, Y+2	; 0x02
    2838:	28 2f       	mov	r18, r24
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	3c 83       	std	Y+4, r19	; 0x04
    283e:	2b 83       	std	Y+3, r18	; 0x03
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	91 05       	cpc	r25, r1
    2848:	d1 f0       	breq	.+52     	; 0x287e <GPIO_readPort+0x5e>
    284a:	2b 81       	ldd	r18, Y+3	; 0x03
    284c:	3c 81       	ldd	r19, Y+4	; 0x04
    284e:	22 30       	cpi	r18, 0x02	; 2
    2850:	31 05       	cpc	r19, r1
    2852:	2c f4       	brge	.+10     	; 0x285e <GPIO_readPort+0x3e>
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	9c 81       	ldd	r25, Y+4	; 0x04
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	61 f0       	breq	.+24     	; 0x2874 <GPIO_readPort+0x54>
    285c:	1e c0       	rjmp	.+60     	; 0x289a <GPIO_readPort+0x7a>
    285e:	2b 81       	ldd	r18, Y+3	; 0x03
    2860:	3c 81       	ldd	r19, Y+4	; 0x04
    2862:	22 30       	cpi	r18, 0x02	; 2
    2864:	31 05       	cpc	r19, r1
    2866:	81 f0       	breq	.+32     	; 0x2888 <GPIO_readPort+0x68>
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	9c 81       	ldd	r25, Y+4	; 0x04
    286c:	83 30       	cpi	r24, 0x03	; 3
    286e:	91 05       	cpc	r25, r1
    2870:	81 f0       	breq	.+32     	; 0x2892 <GPIO_readPort+0x72>
    2872:	13 c0       	rjmp	.+38     	; 0x289a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2874:	e9 e3       	ldi	r30, 0x39	; 57
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	80 81       	ld	r24, Z
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	0e c0       	rjmp	.+28     	; 0x289a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    287e:	e6 e3       	ldi	r30, 0x36	; 54
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	09 c0       	rjmp	.+18     	; 0x289a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2888:	e3 e3       	ldi	r30, 0x33	; 51
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	04 c0       	rjmp	.+8      	; 0x289a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2892:	e0 e3       	ldi	r30, 0x30	; 48
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    289a:	89 81       	ldd	r24, Y+1	; 0x01
}
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    28aa:	1f 92       	push	r1
    28ac:	0f 92       	push	r0
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	0f 92       	push	r0
    28b2:	11 24       	eor	r1, r1
    28b4:	2f 93       	push	r18
    28b6:	3f 93       	push	r19
    28b8:	4f 93       	push	r20
    28ba:	5f 93       	push	r21
    28bc:	6f 93       	push	r22
    28be:	7f 93       	push	r23
    28c0:	8f 93       	push	r24
    28c2:	9f 93       	push	r25
    28c4:	af 93       	push	r26
    28c6:	bf 93       	push	r27
    28c8:	ef 93       	push	r30
    28ca:	ff 93       	push	r31
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    28d4:	80 91 88 01 	lds	r24, 0x0188
    28d8:	90 91 89 01 	lds	r25, 0x0189
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	29 f0       	breq	.+10     	; 0x28ea <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr_timer0)();
    28e0:	e0 91 88 01 	lds	r30, 0x0188
    28e4:	f0 91 89 01 	lds	r31, 0x0189
    28e8:	09 95       	icall
	}
}
    28ea:	cf 91       	pop	r28
    28ec:	df 91       	pop	r29
    28ee:	ff 91       	pop	r31
    28f0:	ef 91       	pop	r30
    28f2:	bf 91       	pop	r27
    28f4:	af 91       	pop	r26
    28f6:	9f 91       	pop	r25
    28f8:	8f 91       	pop	r24
    28fa:	7f 91       	pop	r23
    28fc:	6f 91       	pop	r22
    28fe:	5f 91       	pop	r21
    2900:	4f 91       	pop	r20
    2902:	3f 91       	pop	r19
    2904:	2f 91       	pop	r18
    2906:	0f 90       	pop	r0
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	0f 90       	pop	r0
    290c:	1f 90       	pop	r1
    290e:	18 95       	reti

00002910 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    2910:	1f 92       	push	r1
    2912:	0f 92       	push	r0
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	0f 92       	push	r0
    2918:	11 24       	eor	r1, r1
    291a:	2f 93       	push	r18
    291c:	3f 93       	push	r19
    291e:	4f 93       	push	r20
    2920:	5f 93       	push	r21
    2922:	6f 93       	push	r22
    2924:	7f 93       	push	r23
    2926:	8f 93       	push	r24
    2928:	9f 93       	push	r25
    292a:	af 93       	push	r26
    292c:	bf 93       	push	r27
    292e:	ef 93       	push	r30
    2930:	ff 93       	push	r31
    2932:	df 93       	push	r29
    2934:	cf 93       	push	r28
    2936:	cd b7       	in	r28, 0x3d	; 61
    2938:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer0 != NULL_PTR)
    293a:	80 91 88 01 	lds	r24, 0x0188
    293e:	90 91 89 01 	lds	r25, 0x0189
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	29 f0       	breq	.+10     	; 0x2950 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr_timer0)();
    2946:	e0 91 88 01 	lds	r30, 0x0188
    294a:	f0 91 89 01 	lds	r31, 0x0189
    294e:	09 95       	icall
	}
}
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	ff 91       	pop	r31
    2956:	ef 91       	pop	r30
    2958:	bf 91       	pop	r27
    295a:	af 91       	pop	r26
    295c:	9f 91       	pop	r25
    295e:	8f 91       	pop	r24
    2960:	7f 91       	pop	r23
    2962:	6f 91       	pop	r22
    2964:	5f 91       	pop	r21
    2966:	4f 91       	pop	r20
    2968:	3f 91       	pop	r19
    296a:	2f 91       	pop	r18
    296c:	0f 90       	pop	r0
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	0f 90       	pop	r0
    2972:	1f 90       	pop	r1
    2974:	18 95       	reti

00002976 <__vector_8>:
ISR(TIMER1_OVF_vect)
{
    2976:	1f 92       	push	r1
    2978:	0f 92       	push	r0
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	0f 92       	push	r0
    297e:	11 24       	eor	r1, r1
    2980:	2f 93       	push	r18
    2982:	3f 93       	push	r19
    2984:	4f 93       	push	r20
    2986:	5f 93       	push	r21
    2988:	6f 93       	push	r22
    298a:	7f 93       	push	r23
    298c:	8f 93       	push	r24
    298e:	9f 93       	push	r25
    2990:	af 93       	push	r26
    2992:	bf 93       	push	r27
    2994:	ef 93       	push	r30
    2996:	ff 93       	push	r31
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    29a0:	80 91 8a 01 	lds	r24, 0x018A
    29a4:	90 91 8b 01 	lds	r25, 0x018B
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	29 f0       	breq	.+10     	; 0x29b6 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr_timer1)();
    29ac:	e0 91 8a 01 	lds	r30, 0x018A
    29b0:	f0 91 8b 01 	lds	r31, 0x018B
    29b4:	09 95       	icall
	}
}
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	ff 91       	pop	r31
    29bc:	ef 91       	pop	r30
    29be:	bf 91       	pop	r27
    29c0:	af 91       	pop	r26
    29c2:	9f 91       	pop	r25
    29c4:	8f 91       	pop	r24
    29c6:	7f 91       	pop	r23
    29c8:	6f 91       	pop	r22
    29ca:	5f 91       	pop	r21
    29cc:	4f 91       	pop	r20
    29ce:	3f 91       	pop	r19
    29d0:	2f 91       	pop	r18
    29d2:	0f 90       	pop	r0
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	0f 90       	pop	r0
    29d8:	1f 90       	pop	r1
    29da:	18 95       	reti

000029dc <__vector_6>:
ISR(TIMER1_COMPA_vect)
{
    29dc:	1f 92       	push	r1
    29de:	0f 92       	push	r0
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	0f 92       	push	r0
    29e4:	11 24       	eor	r1, r1
    29e6:	2f 93       	push	r18
    29e8:	3f 93       	push	r19
    29ea:	4f 93       	push	r20
    29ec:	5f 93       	push	r21
    29ee:	6f 93       	push	r22
    29f0:	7f 93       	push	r23
    29f2:	8f 93       	push	r24
    29f4:	9f 93       	push	r25
    29f6:	af 93       	push	r26
    29f8:	bf 93       	push	r27
    29fa:	ef 93       	push	r30
    29fc:	ff 93       	push	r31
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer1 != NULL_PTR)
    2a06:	80 91 8a 01 	lds	r24, 0x018A
    2a0a:	90 91 8b 01 	lds	r25, 0x018B
    2a0e:	00 97       	sbiw	r24, 0x00	; 0
    2a10:	29 f0       	breq	.+10     	; 0x2a1c <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr_timer1)();
    2a12:	e0 91 8a 01 	lds	r30, 0x018A
    2a16:	f0 91 8b 01 	lds	r31, 0x018B
    2a1a:	09 95       	icall
	}
}
    2a1c:	cf 91       	pop	r28
    2a1e:	df 91       	pop	r29
    2a20:	ff 91       	pop	r31
    2a22:	ef 91       	pop	r30
    2a24:	bf 91       	pop	r27
    2a26:	af 91       	pop	r26
    2a28:	9f 91       	pop	r25
    2a2a:	8f 91       	pop	r24
    2a2c:	7f 91       	pop	r23
    2a2e:	6f 91       	pop	r22
    2a30:	5f 91       	pop	r21
    2a32:	4f 91       	pop	r20
    2a34:	3f 91       	pop	r19
    2a36:	2f 91       	pop	r18
    2a38:	0f 90       	pop	r0
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	0f 90       	pop	r0
    2a3e:	1f 90       	pop	r1
    2a40:	18 95       	reti

00002a42 <__vector_4>:
ISR(TIMER2_OVF_vect)
{
    2a42:	1f 92       	push	r1
    2a44:	0f 92       	push	r0
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	0f 92       	push	r0
    2a4a:	11 24       	eor	r1, r1
    2a4c:	2f 93       	push	r18
    2a4e:	3f 93       	push	r19
    2a50:	4f 93       	push	r20
    2a52:	5f 93       	push	r21
    2a54:	6f 93       	push	r22
    2a56:	7f 93       	push	r23
    2a58:	8f 93       	push	r24
    2a5a:	9f 93       	push	r25
    2a5c:	af 93       	push	r26
    2a5e:	bf 93       	push	r27
    2a60:	ef 93       	push	r30
    2a62:	ff 93       	push	r31
    2a64:	df 93       	push	r29
    2a66:	cf 93       	push	r28
    2a68:	cd b7       	in	r28, 0x3d	; 61
    2a6a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    2a6c:	80 91 8c 01 	lds	r24, 0x018C
    2a70:	90 91 8d 01 	lds	r25, 0x018D
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	29 f0       	breq	.+10     	; 0x2a82 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr_timer2)();
    2a78:	e0 91 8c 01 	lds	r30, 0x018C
    2a7c:	f0 91 8d 01 	lds	r31, 0x018D
    2a80:	09 95       	icall
	}
}
    2a82:	cf 91       	pop	r28
    2a84:	df 91       	pop	r29
    2a86:	ff 91       	pop	r31
    2a88:	ef 91       	pop	r30
    2a8a:	bf 91       	pop	r27
    2a8c:	af 91       	pop	r26
    2a8e:	9f 91       	pop	r25
    2a90:	8f 91       	pop	r24
    2a92:	7f 91       	pop	r23
    2a94:	6f 91       	pop	r22
    2a96:	5f 91       	pop	r21
    2a98:	4f 91       	pop	r20
    2a9a:	3f 91       	pop	r19
    2a9c:	2f 91       	pop	r18
    2a9e:	0f 90       	pop	r0
    2aa0:	0f be       	out	0x3f, r0	; 63
    2aa2:	0f 90       	pop	r0
    2aa4:	1f 90       	pop	r1
    2aa6:	18 95       	reti

00002aa8 <__vector_3>:
ISR(TIMER2_COMP_vect)
{
    2aa8:	1f 92       	push	r1
    2aaa:	0f 92       	push	r0
    2aac:	0f b6       	in	r0, 0x3f	; 63
    2aae:	0f 92       	push	r0
    2ab0:	11 24       	eor	r1, r1
    2ab2:	2f 93       	push	r18
    2ab4:	3f 93       	push	r19
    2ab6:	4f 93       	push	r20
    2ab8:	5f 93       	push	r21
    2aba:	6f 93       	push	r22
    2abc:	7f 93       	push	r23
    2abe:	8f 93       	push	r24
    2ac0:	9f 93       	push	r25
    2ac2:	af 93       	push	r26
    2ac4:	bf 93       	push	r27
    2ac6:	ef 93       	push	r30
    2ac8:	ff 93       	push	r31
    2aca:	df 93       	push	r29
    2acc:	cf 93       	push	r28
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_timer2 != NULL_PTR)
    2ad2:	80 91 8c 01 	lds	r24, 0x018C
    2ad6:	90 91 8d 01 	lds	r25, 0x018D
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	29 f0       	breq	.+10     	; 0x2ae8 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the interrupt is detected */
		(*g_callBackPtr_timer2)();
    2ade:	e0 91 8c 01 	lds	r30, 0x018C
    2ae2:	f0 91 8d 01 	lds	r31, 0x018D
    2ae6:	09 95       	icall
	}
}
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	ff 91       	pop	r31
    2aee:	ef 91       	pop	r30
    2af0:	bf 91       	pop	r27
    2af2:	af 91       	pop	r26
    2af4:	9f 91       	pop	r25
    2af6:	8f 91       	pop	r24
    2af8:	7f 91       	pop	r23
    2afa:	6f 91       	pop	r22
    2afc:	5f 91       	pop	r21
    2afe:	4f 91       	pop	r20
    2b00:	3f 91       	pop	r19
    2b02:	2f 91       	pop	r18
    2b04:	0f 90       	pop	r0
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	0f 90       	pop	r0
    2b0a:	1f 90       	pop	r1
    2b0c:	18 95       	reti

00002b0e <TIMER_init>:
/* Function Name:TIMER_init
 * Description: initialize the selected timer driver in the AVR
 * 				according to the conifig-type structure
 */
void TIMER_init(const Timer_ConfigType * Config_Ptr)
{/*choosing timer 0*/
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <TIMER_init+0x6>
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	9a 83       	std	Y+2, r25	; 0x02
    2b1a:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_id==TIMER_0)
    2b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b20:	83 81       	ldd	r24, Z+3	; 0x03
    2b22:	88 23       	and	r24, r24
    2b24:	09 f0       	breq	.+2      	; 0x2b28 <TIMER_init+0x1a>
    2b26:	96 c0       	rjmp	.+300    	; 0x2c54 <TIMER_init+0x146>
	{/*timer0 overflow mode*/
		if(Config_Ptr->mode==NORMAL)
    2b28:	e9 81       	ldd	r30, Y+1	; 0x01
    2b2a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b2c:	80 81       	ld	r24, Z
    2b2e:	88 23       	and	r24, r24
    2b30:	51 f5       	brne	.+84     	; 0x2b86 <TIMER_init+0x78>
		{
			TCNT0 = Config_Ptr->initialValue; /* Set Timer initial value */
    2b32:	22 e5       	ldi	r18, 0x52	; 82
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	e9 81       	ldd	r30, Y+1	; 0x01
    2b38:	fa 81       	ldd	r31, Y+2	; 0x02
    2b3a:	84 81       	ldd	r24, Z+4	; 0x04
    2b3c:	95 81       	ldd	r25, Z+5	; 0x05
    2b3e:	a6 81       	ldd	r26, Z+6	; 0x06
    2b40:	b7 81       	ldd	r27, Z+7	; 0x07
    2b42:	f9 01       	movw	r30, r18
    2b44:	80 83       	st	Z, r24
			SET_BIT(TIMSK,TOIE0);// Enable Timer0 Overflow Interrupt
    2b46:	a9 e5       	ldi	r26, 0x59	; 89
    2b48:	b0 e0       	ldi	r27, 0x00	; 0
    2b4a:	e9 e5       	ldi	r30, 0x59	; 89
    2b4c:	f0 e0       	ldi	r31, 0x00	; 0
    2b4e:	80 81       	ld	r24, Z
    2b50:	81 60       	ori	r24, 0x01	; 1
    2b52:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal Mode COM00=0 & COM01=0
			 * 4. clock = F_CPU/selected_prescaler
			 */
			SET_BIT(TCCR0,FOC0);
    2b54:	a3 e5       	ldi	r26, 0x53	; 83
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	e3 e5       	ldi	r30, 0x53	; 83
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	80 68       	ori	r24, 0x80	; 128
    2b60:	8c 93       	st	X, r24
			TCCR0 |=(TCCR0 & 0xF8)|(Config_Ptr->prescaler);
    2b62:	a3 e5       	ldi	r26, 0x53	; 83
    2b64:	b0 e0       	ldi	r27, 0x00	; 0
    2b66:	e3 e5       	ldi	r30, 0x53	; 83
    2b68:	f0 e0       	ldi	r31, 0x00	; 0
    2b6a:	80 81       	ld	r24, Z
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	e3 e5       	ldi	r30, 0x53	; 83
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	80 81       	ld	r24, Z
    2b74:	98 2f       	mov	r25, r24
    2b76:	98 7f       	andi	r25, 0xF8	; 248
    2b78:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b7c:	81 81       	ldd	r24, Z+1	; 0x01
    2b7e:	89 2b       	or	r24, r25
    2b80:	82 2b       	or	r24, r18
    2b82:	8c 93       	st	X, r24
    2b84:	a3 c1       	rjmp	.+838    	; 0x2ecc <TIMER_init+0x3be>
		}
		else if(Config_Ptr->mode==CTC)
    2b86:	e9 81       	ldd	r30, Y+1	; 0x01
    2b88:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8a:	80 81       	ld	r24, Z
    2b8c:	81 30       	cpi	r24, 0x01	; 1
    2b8e:	09 f0       	breq	.+2      	; 0x2b92 <TIMER_init+0x84>
    2b90:	9d c1       	rjmp	.+826    	; 0x2ecc <TIMER_init+0x3be>
		{/*timer0 compare mode*/
			TCNT0 = Config_Ptr->initialValue;  /* Set Initial Value */
    2b92:	22 e5       	ldi	r18, 0x52	; 82
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	e9 81       	ldd	r30, Y+1	; 0x01
    2b98:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9a:	84 81       	ldd	r24, Z+4	; 0x04
    2b9c:	95 81       	ldd	r25, Z+5	; 0x05
    2b9e:	a6 81       	ldd	r26, Z+6	; 0x06
    2ba0:	b7 81       	ldd	r27, Z+7	; 0x07
    2ba2:	f9 01       	movw	r30, r18
    2ba4:	80 83       	st	Z, r24
			OCR0 = Config_Ptr->comparelValue; /* Set Compare Value*/
    2ba6:	2c e5       	ldi	r18, 0x5C	; 92
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	e9 81       	ldd	r30, Y+1	; 0x01
    2bac:	fa 81       	ldd	r31, Y+2	; 0x02
    2bae:	80 85       	ldd	r24, Z+8	; 0x08
    2bb0:	91 85       	ldd	r25, Z+9	; 0x09
    2bb2:	a2 85       	ldd	r26, Z+10	; 0x0a
    2bb4:	b3 85       	ldd	r27, Z+11	; 0x0b
    2bb6:	f9 01       	movw	r30, r18
    2bb8:	80 83       	st	Z, r24
			SET_BIT(TIMSK,OCIE0); /* Enable Timer0 output compare match Interrupt */
    2bba:	a9 e5       	ldi	r26, 0x59	; 89
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e9 e5       	ldi	r30, 0x59	; 89
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	82 60       	ori	r24, 0x02	; 2
    2bc6:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC0=1
			 * 2. CTC Mode WGM01=1 & WGM00=0
			 * 3. selected compare output mode operation for  COM00 & COM01
			 * 4. clock = F_CPU/selected_prescaler
			 */
			SET_BIT(TCCR0,FOC0) ;
    2bc8:	a3 e5       	ldi	r26, 0x53	; 83
    2bca:	b0 e0       	ldi	r27, 0x00	; 0
    2bcc:	e3 e5       	ldi	r30, 0x53	; 83
    2bce:	f0 e0       	ldi	r31, 0x00	; 0
    2bd0:	80 81       	ld	r24, Z
    2bd2:	80 68       	ori	r24, 0x80	; 128
    2bd4:	8c 93       	st	X, r24
			SET_BIT(TCCR0,WGM01) ;
    2bd6:	a3 e5       	ldi	r26, 0x53	; 83
    2bd8:	b0 e0       	ldi	r27, 0x00	; 0
    2bda:	e3 e5       	ldi	r30, 0x53	; 83
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	88 60       	ori	r24, 0x08	; 8
    2be2:	8c 93       	st	X, r24
			TCCR0 |=(TCCR0 & 0xCF)|((Config_Ptr->CompareOutputMode)<<4);
    2be4:	a3 e5       	ldi	r26, 0x53	; 83
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e3 e5       	ldi	r30, 0x53	; 83
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	38 2f       	mov	r19, r24
    2bf0:	e3 e5       	ldi	r30, 0x53	; 83
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	80 81       	ld	r24, Z
    2bf6:	28 2f       	mov	r18, r24
    2bf8:	2f 7c       	andi	r18, 0xCF	; 207
    2bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfe:	84 85       	ldd	r24, Z+12	; 0x0c
    2c00:	88 2f       	mov	r24, r24
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	82 95       	swap	r24
    2c06:	92 95       	swap	r25
    2c08:	90 7f       	andi	r25, 0xF0	; 240
    2c0a:	98 27       	eor	r25, r24
    2c0c:	80 7f       	andi	r24, 0xF0	; 240
    2c0e:	98 27       	eor	r25, r24
    2c10:	82 2b       	or	r24, r18
    2c12:	83 2b       	or	r24, r19
    2c14:	8c 93       	st	X, r24
			TCCR0 |=(TCCR0 & 0xF8)|(Config_Ptr->prescaler);
    2c16:	a3 e5       	ldi	r26, 0x53	; 83
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e3 e5       	ldi	r30, 0x53	; 83
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	28 2f       	mov	r18, r24
    2c22:	e3 e5       	ldi	r30, 0x53	; 83
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	80 81       	ld	r24, Z
    2c28:	98 2f       	mov	r25, r24
    2c2a:	98 7f       	andi	r25, 0xF8	; 248
    2c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c30:	81 81       	ldd	r24, Z+1	; 0x01
    2c32:	89 2b       	or	r24, r25
    2c34:	82 2b       	or	r24, r18
    2c36:	8c 93       	st	X, r24
			if(Config_Ptr->CompareOutputMode!=NORMAL_OC_DISCONNECT)
    2c38:	e9 81       	ldd	r30, Y+1	; 0x01
    2c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c3c:	84 85       	ldd	r24, Z+12	; 0x0c
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <TIMER_init+0x136>
    2c42:	44 c1       	rjmp	.+648    	; 0x2ecc <TIMER_init+0x3be>
			{
				SET_BIT(DDRB,PB3);/* Configure PB3/OC0 Pin as output pin*/
    2c44:	a7 e3       	ldi	r26, 0x37	; 55
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e7 e3       	ldi	r30, 0x37	; 55
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	88 60       	ori	r24, 0x08	; 8
    2c50:	8c 93       	st	X, r24
    2c52:	3c c1       	rjmp	.+632    	; 0x2ecc <TIMER_init+0x3be>
			}
		}
	}

	/*choosing timer1*/
	else if(Config_Ptr->timer_id==TIMER_1)
    2c54:	e9 81       	ldd	r30, Y+1	; 0x01
    2c56:	fa 81       	ldd	r31, Y+2	; 0x02
    2c58:	83 81       	ldd	r24, Z+3	; 0x03
    2c5a:	81 30       	cpi	r24, 0x01	; 1
    2c5c:	09 f0       	breq	.+2      	; 0x2c60 <TIMER_init+0x152>
    2c5e:	9c c0       	rjmp	.+312    	; 0x2d98 <TIMER_init+0x28a>
	{/*timer1 overflow mode*/
		if(Config_Ptr->mode==NORMAL)
    2c60:	e9 81       	ldd	r30, Y+1	; 0x01
    2c62:	fa 81       	ldd	r31, Y+2	; 0x02
    2c64:	80 81       	ld	r24, Z
    2c66:	88 23       	and	r24, r24
    2c68:	59 f5       	brne	.+86     	; 0x2cc0 <TIMER_init+0x1b2>
		{
			TCNT1 = Config_Ptr->initialValue; /* Set Timer initial value */
    2c6a:	2c e4       	ldi	r18, 0x4C	; 76
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c70:	fa 81       	ldd	r31, Y+2	; 0x02
    2c72:	84 81       	ldd	r24, Z+4	; 0x04
    2c74:	95 81       	ldd	r25, Z+5	; 0x05
    2c76:	a6 81       	ldd	r26, Z+6	; 0x06
    2c78:	b7 81       	ldd	r27, Z+7	; 0x07
    2c7a:	f9 01       	movw	r30, r18
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	80 83       	st	Z, r24
			SET_BIT(TIMSK,TOIE1); /* Enable Timer1 Overflow Interrupt */
    2c80:	a9 e5       	ldi	r26, 0x59	; 89
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	e9 e5       	ldi	r30, 0x59	; 89
    2c86:	f0 e0       	ldi	r31, 0x00	; 0
    2c88:	80 81       	ld	r24, Z
    2c8a:	84 60       	ori	r24, 0x04	; 4
    2c8c:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC1A=1
			 * 2. Normal Mode WGM12=0 & WGM11=0 & WGM10=0
			 * 3. Normal Mode COM1A0=0 & COM1A1=0
			 * 4. clock = F_CPU/selected_prescaler using dynamic configuration
			 */
			SET_BIT(TCCR1A,FOC1A);
    2c8e:	af e4       	ldi	r26, 0x4F	; 79
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	ef e4       	ldi	r30, 0x4F	; 79
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	80 81       	ld	r24, Z
    2c98:	88 60       	ori	r24, 0x08	; 8
    2c9a:	8c 93       	st	X, r24
			TCCR1B |=(TCCR1B & 0xF8)|(Config_Ptr->prescaler);
    2c9c:	ae e4       	ldi	r26, 0x4E	; 78
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	ee e4       	ldi	r30, 0x4E	; 78
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	ee e4       	ldi	r30, 0x4E	; 78
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	98 2f       	mov	r25, r24
    2cb0:	98 7f       	andi	r25, 0xF8	; 248
    2cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb6:	81 81       	ldd	r24, Z+1	; 0x01
    2cb8:	89 2b       	or	r24, r25
    2cba:	82 2b       	or	r24, r18
    2cbc:	8c 93       	st	X, r24
    2cbe:	06 c1       	rjmp	.+524    	; 0x2ecc <TIMER_init+0x3be>
		}
		else if(Config_Ptr->mode==CTC)
    2cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc4:	80 81       	ld	r24, Z
    2cc6:	81 30       	cpi	r24, 0x01	; 1
    2cc8:	09 f0       	breq	.+2      	; 0x2ccc <TIMER_init+0x1be>
    2cca:	00 c1       	rjmp	.+512    	; 0x2ecc <TIMER_init+0x3be>
		{
			TCNT1 = Config_Ptr->initialValue;  /* Set Initial Value */
    2ccc:	2c e4       	ldi	r18, 0x4C	; 76
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd2:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd4:	84 81       	ldd	r24, Z+4	; 0x04
    2cd6:	95 81       	ldd	r25, Z+5	; 0x05
    2cd8:	a6 81       	ldd	r26, Z+6	; 0x06
    2cda:	b7 81       	ldd	r27, Z+7	; 0x07
    2cdc:	f9 01       	movw	r30, r18
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	80 83       	st	Z, r24
			OCR1A = Config_Ptr->comparelValue; /* Set Compare Value*/
    2ce2:	2a e4       	ldi	r18, 0x4A	; 74
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cea:	80 85       	ldd	r24, Z+8	; 0x08
    2cec:	91 85       	ldd	r25, Z+9	; 0x09
    2cee:	a2 85       	ldd	r26, Z+10	; 0x0a
    2cf0:	b3 85       	ldd	r27, Z+11	; 0x0b
    2cf2:	f9 01       	movw	r30, r18
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	80 83       	st	Z, r24
			SET_BIT(TIMSK,OCIE1A); /* Enable Timer1 output compare match Interrupt */
    2cf8:	a9 e5       	ldi	r26, 0x59	; 89
    2cfa:	b0 e0       	ldi	r27, 0x00	; 0
    2cfc:	e9 e5       	ldi	r30, 0x59	; 89
    2cfe:	f0 e0       	ldi	r31, 0x00	; 0
    2d00:	80 81       	ld	r24, Z
    2d02:	80 61       	ori	r24, 0x10	; 16
    2d04:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC1A=1
			 * 2. CTC Mode WGM12=1 & WGM11=0 & WGM10=0
			 * 3. selected compare output mode operation for COM1A0 & COM1A1
			 * 4. clock = F_CPU/selected_prescaler using dynamic configuration
			 */
			SET_BIT(TCCR1A,FOC1A);
    2d06:	af e4       	ldi	r26, 0x4F	; 79
    2d08:	b0 e0       	ldi	r27, 0x00	; 0
    2d0a:	ef e4       	ldi	r30, 0x4F	; 79
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	88 60       	ori	r24, 0x08	; 8
    2d12:	8c 93       	st	X, r24
			SET_BIT(TCCR1B,WGM12);
    2d14:	ae e4       	ldi	r26, 0x4E	; 78
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	ee e4       	ldi	r30, 0x4E	; 78
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	88 60       	ori	r24, 0x08	; 8
    2d20:	8c 93       	st	X, r24
			TCCR1A |=(TCCR1A & 0x3F)|((Config_Ptr->CompareOutputMode)<<6);
    2d22:	af e4       	ldi	r26, 0x4F	; 79
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	ef e4       	ldi	r30, 0x4F	; 79
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	38 2f       	mov	r19, r24
    2d2e:	ef e4       	ldi	r30, 0x4F	; 79
    2d30:	f0 e0       	ldi	r31, 0x00	; 0
    2d32:	80 81       	ld	r24, Z
    2d34:	28 2f       	mov	r18, r24
    2d36:	2f 73       	andi	r18, 0x3F	; 63
    2d38:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3c:	84 85       	ldd	r24, Z+12	; 0x0c
    2d3e:	88 2f       	mov	r24, r24
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	00 24       	eor	r0, r0
    2d44:	96 95       	lsr	r25
    2d46:	87 95       	ror	r24
    2d48:	07 94       	ror	r0
    2d4a:	96 95       	lsr	r25
    2d4c:	87 95       	ror	r24
    2d4e:	07 94       	ror	r0
    2d50:	98 2f       	mov	r25, r24
    2d52:	80 2d       	mov	r24, r0
    2d54:	82 2b       	or	r24, r18
    2d56:	83 2b       	or	r24, r19
    2d58:	8c 93       	st	X, r24
			TCCR1B |=(TCCR1B & 0xF8)|(Config_Ptr->prescaler);
    2d5a:	ae e4       	ldi	r26, 0x4E	; 78
    2d5c:	b0 e0       	ldi	r27, 0x00	; 0
    2d5e:	ee e4       	ldi	r30, 0x4E	; 78
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	80 81       	ld	r24, Z
    2d64:	28 2f       	mov	r18, r24
    2d66:	ee e4       	ldi	r30, 0x4E	; 78
    2d68:	f0 e0       	ldi	r31, 0x00	; 0
    2d6a:	80 81       	ld	r24, Z
    2d6c:	98 2f       	mov	r25, r24
    2d6e:	98 7f       	andi	r25, 0xF8	; 248
    2d70:	e9 81       	ldd	r30, Y+1	; 0x01
    2d72:	fa 81       	ldd	r31, Y+2	; 0x02
    2d74:	81 81       	ldd	r24, Z+1	; 0x01
    2d76:	89 2b       	or	r24, r25
    2d78:	82 2b       	or	r24, r18
    2d7a:	8c 93       	st	X, r24
			if(Config_Ptr->CompareOutputMode!=NORMAL_OC_DISCONNECT)
    2d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d80:	84 85       	ldd	r24, Z+12	; 0x0c
    2d82:	88 23       	and	r24, r24
    2d84:	09 f4       	brne	.+2      	; 0x2d88 <TIMER_init+0x27a>
    2d86:	a2 c0       	rjmp	.+324    	; 0x2ecc <TIMER_init+0x3be>
			{
				SET_BIT(DDRD,PD5);/* Configure PD5/OC1A Pin as output pin*/
    2d88:	a1 e3       	ldi	r26, 0x31	; 49
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	e1 e3       	ldi	r30, 0x31	; 49
    2d8e:	f0 e0       	ldi	r31, 0x00	; 0
    2d90:	80 81       	ld	r24, Z
    2d92:	80 62       	ori	r24, 0x20	; 32
    2d94:	8c 93       	st	X, r24
    2d96:	9a c0       	rjmp	.+308    	; 0x2ecc <TIMER_init+0x3be>
			}
		}

	}
	/*choosing timer 2*/
	else if(Config_Ptr->timer_id==TIMER_2)
    2d98:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9c:	83 81       	ldd	r24, Z+3	; 0x03
    2d9e:	82 30       	cpi	r24, 0x02	; 2
    2da0:	09 f0       	breq	.+2      	; 0x2da4 <TIMER_init+0x296>
    2da2:	94 c0       	rjmp	.+296    	; 0x2ecc <TIMER_init+0x3be>
	{/*overflow mode */
		if(Config_Ptr->mode==NORMAL)
    2da4:	e9 81       	ldd	r30, Y+1	; 0x01
    2da6:	fa 81       	ldd	r31, Y+2	; 0x02
    2da8:	80 81       	ld	r24, Z
    2daa:	88 23       	and	r24, r24
    2dac:	51 f5       	brne	.+84     	; 0x2e02 <TIMER_init+0x2f4>
		{
			TCNT2 = Config_Ptr->initialValue; /* Set Timer initial value */
    2dae:	24 e4       	ldi	r18, 0x44	; 68
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	e9 81       	ldd	r30, Y+1	; 0x01
    2db4:	fa 81       	ldd	r31, Y+2	; 0x02
    2db6:	84 81       	ldd	r24, Z+4	; 0x04
    2db8:	95 81       	ldd	r25, Z+5	; 0x05
    2dba:	a6 81       	ldd	r26, Z+6	; 0x06
    2dbc:	b7 81       	ldd	r27, Z+7	; 0x07
    2dbe:	f9 01       	movw	r30, r18
    2dc0:	80 83       	st	Z, r24
			SET_BIT(TIMSK,TOIE2); /* Enable Timer2 Overflow Interrupt */
    2dc2:	a9 e5       	ldi	r26, 0x59	; 89
    2dc4:	b0 e0       	ldi	r27, 0x00	; 0
    2dc6:	e9 e5       	ldi	r30, 0x59	; 89
    2dc8:	f0 e0       	ldi	r31, 0x00	; 0
    2dca:	80 81       	ld	r24, Z
    2dcc:	80 64       	ori	r24, 0x40	; 64
    2dce:	8c 93       	st	X, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal Mode COM20=0 & COM21=0
			 * 4. clock = F_CPU/selected_prescaler
			 */
			SET_BIT(TCCR2,FOC2);
    2dd0:	a5 e4       	ldi	r26, 0x45	; 69
    2dd2:	b0 e0       	ldi	r27, 0x00	; 0
    2dd4:	e5 e4       	ldi	r30, 0x45	; 69
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	80 68       	ori	r24, 0x80	; 128
    2ddc:	8c 93       	st	X, r24
			TCCR2 |=(TCCR2 & 0xF8)|(Config_Ptr->prescaler2);
    2dde:	a5 e4       	ldi	r26, 0x45	; 69
    2de0:	b0 e0       	ldi	r27, 0x00	; 0
    2de2:	e5 e4       	ldi	r30, 0x45	; 69
    2de4:	f0 e0       	ldi	r31, 0x00	; 0
    2de6:	80 81       	ld	r24, Z
    2de8:	28 2f       	mov	r18, r24
    2dea:	e5 e4       	ldi	r30, 0x45	; 69
    2dec:	f0 e0       	ldi	r31, 0x00	; 0
    2dee:	80 81       	ld	r24, Z
    2df0:	98 2f       	mov	r25, r24
    2df2:	98 7f       	andi	r25, 0xF8	; 248
    2df4:	e9 81       	ldd	r30, Y+1	; 0x01
    2df6:	fa 81       	ldd	r31, Y+2	; 0x02
    2df8:	82 81       	ldd	r24, Z+2	; 0x02
    2dfa:	89 2b       	or	r24, r25
    2dfc:	82 2b       	or	r24, r18
    2dfe:	8c 93       	st	X, r24
    2e00:	65 c0       	rjmp	.+202    	; 0x2ecc <TIMER_init+0x3be>
		}
		/*compare mode*/
		else if(Config_Ptr->mode==CTC)
    2e02:	e9 81       	ldd	r30, Y+1	; 0x01
    2e04:	fa 81       	ldd	r31, Y+2	; 0x02
    2e06:	80 81       	ld	r24, Z
    2e08:	81 30       	cpi	r24, 0x01	; 1
    2e0a:	09 f0       	breq	.+2      	; 0x2e0e <TIMER_init+0x300>
    2e0c:	5f c0       	rjmp	.+190    	; 0x2ecc <TIMER_init+0x3be>
		{
			SET_BIT(TIMSK,OCIE2); /* Enable Timer2 Overflow Interrupt */
    2e0e:	a9 e5       	ldi	r26, 0x59	; 89
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	e9 e5       	ldi	r30, 0x59	; 89
    2e14:	f0 e0       	ldi	r31, 0x00	; 0
    2e16:	80 81       	ld	r24, Z
    2e18:	80 68       	ori	r24, 0x80	; 128
    2e1a:	8c 93       	st	X, r24
			TCNT2 = Config_Ptr->initialValue;  /* Set Initial Value */
    2e1c:	24 e4       	ldi	r18, 0x44	; 68
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	e9 81       	ldd	r30, Y+1	; 0x01
    2e22:	fa 81       	ldd	r31, Y+2	; 0x02
    2e24:	84 81       	ldd	r24, Z+4	; 0x04
    2e26:	95 81       	ldd	r25, Z+5	; 0x05
    2e28:	a6 81       	ldd	r26, Z+6	; 0x06
    2e2a:	b7 81       	ldd	r27, Z+7	; 0x07
    2e2c:	f9 01       	movw	r30, r18
    2e2e:	80 83       	st	Z, r24
			OCR2 = Config_Ptr->comparelValue; /* Set Compare Value*/
    2e30:	23 e4       	ldi	r18, 0x43	; 67
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	e9 81       	ldd	r30, Y+1	; 0x01
    2e36:	fa 81       	ldd	r31, Y+2	; 0x02
    2e38:	80 85       	ldd	r24, Z+8	; 0x08
    2e3a:	91 85       	ldd	r25, Z+9	; 0x09
    2e3c:	a2 85       	ldd	r26, Z+10	; 0x0a
    2e3e:	b3 85       	ldd	r27, Z+11	; 0x0b
    2e40:	f9 01       	movw	r30, r18
    2e42:	80 83       	st	Z, r24
			 * 1. Non PWM mode FOC2=1
			 * 2. CTC Mode WGM21=1 & WGM20=0
			 * 3. selected compare output mode operation for  COM20 & COM21
			 * 4. clock = F_CPU/selected_prescaler
			 */
			SET_BIT(TCCR2,WGM21);
    2e44:	a5 e4       	ldi	r26, 0x45	; 69
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	e5 e4       	ldi	r30, 0x45	; 69
    2e4a:	f0 e0       	ldi	r31, 0x00	; 0
    2e4c:	80 81       	ld	r24, Z
    2e4e:	88 60       	ori	r24, 0x08	; 8
    2e50:	8c 93       	st	X, r24
			SET_BIT(TCCR2,FOC2);
    2e52:	a5 e4       	ldi	r26, 0x45	; 69
    2e54:	b0 e0       	ldi	r27, 0x00	; 0
    2e56:	e5 e4       	ldi	r30, 0x45	; 69
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	80 68       	ori	r24, 0x80	; 128
    2e5e:	8c 93       	st	X, r24
			TCCR2 |=(TCCR2 & 0xCF)|((Config_Ptr->CompareOutputMode)<<4);
    2e60:	a5 e4       	ldi	r26, 0x45	; 69
    2e62:	b0 e0       	ldi	r27, 0x00	; 0
    2e64:	e5 e4       	ldi	r30, 0x45	; 69
    2e66:	f0 e0       	ldi	r31, 0x00	; 0
    2e68:	80 81       	ld	r24, Z
    2e6a:	38 2f       	mov	r19, r24
    2e6c:	e5 e4       	ldi	r30, 0x45	; 69
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	80 81       	ld	r24, Z
    2e72:	28 2f       	mov	r18, r24
    2e74:	2f 7c       	andi	r18, 0xCF	; 207
    2e76:	e9 81       	ldd	r30, Y+1	; 0x01
    2e78:	fa 81       	ldd	r31, Y+2	; 0x02
    2e7a:	84 85       	ldd	r24, Z+12	; 0x0c
    2e7c:	88 2f       	mov	r24, r24
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	82 95       	swap	r24
    2e82:	92 95       	swap	r25
    2e84:	90 7f       	andi	r25, 0xF0	; 240
    2e86:	98 27       	eor	r25, r24
    2e88:	80 7f       	andi	r24, 0xF0	; 240
    2e8a:	98 27       	eor	r25, r24
    2e8c:	82 2b       	or	r24, r18
    2e8e:	83 2b       	or	r24, r19
    2e90:	8c 93       	st	X, r24
			TCCR2 |=(TCCR2 & 0xF8)|(Config_Ptr->prescaler2);
    2e92:	a5 e4       	ldi	r26, 0x45	; 69
    2e94:	b0 e0       	ldi	r27, 0x00	; 0
    2e96:	e5 e4       	ldi	r30, 0x45	; 69
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	e5 e4       	ldi	r30, 0x45	; 69
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	80 81       	ld	r24, Z
    2ea4:	98 2f       	mov	r25, r24
    2ea6:	98 7f       	andi	r25, 0xF8	; 248
    2ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    2eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    2eac:	82 81       	ldd	r24, Z+2	; 0x02
    2eae:	89 2b       	or	r24, r25
    2eb0:	82 2b       	or	r24, r18
    2eb2:	8c 93       	st	X, r24
			if(Config_Ptr->CompareOutputMode!=NORMAL_OC_DISCONNECT)
    2eb4:	e9 81       	ldd	r30, Y+1	; 0x01
    2eb6:	fa 81       	ldd	r31, Y+2	; 0x02
    2eb8:	84 85       	ldd	r24, Z+12	; 0x0c
    2eba:	88 23       	and	r24, r24
    2ebc:	39 f0       	breq	.+14     	; 0x2ecc <TIMER_init+0x3be>
			{
				SET_BIT(DDRD,PD7);/* Configure PD7/OC2 Pin as output pin*/
    2ebe:	a1 e3       	ldi	r26, 0x31	; 49
    2ec0:	b0 e0       	ldi	r27, 0x00	; 0
    2ec2:	e1 e3       	ldi	r30, 0x31	; 49
    2ec4:	f0 e0       	ldi	r31, 0x00	; 0
    2ec6:	80 81       	ld	r24, Z
    2ec8:	80 68       	ori	r24, 0x80	; 128
    2eca:	8c 93       	st	X, r24
			}
		}
	}
}
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <TIMER0_setCallBack>:
/* Function Name:TIMER0_setCallBack
 * Description:  Save the address of the Call back function in a global variable
 */
void TIMER0_setCallBack(void(*a_ptr0)(void))
{
    2ed6:	df 93       	push	r29
    2ed8:	cf 93       	push	r28
    2eda:	00 d0       	rcall	.+0      	; 0x2edc <TIMER0_setCallBack+0x6>
    2edc:	cd b7       	in	r28, 0x3d	; 61
    2ede:	de b7       	in	r29, 0x3e	; 62
    2ee0:	9a 83       	std	Y+2, r25	; 0x02
    2ee2:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr_timer0 = a_ptr0;
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	90 93 89 01 	sts	0x0189, r25
    2eec:	80 93 88 01 	sts	0x0188, r24
}
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	cf 91       	pop	r28
    2ef6:	df 91       	pop	r29
    2ef8:	08 95       	ret

00002efa <TIMER1_setCallBack>:

/* Function Name:TIMER1_setCallBack
 * Description:  Save the address of the Call back function in a global variable
 */
void TIMER1_setCallBack(void(*a_ptr1)(void))
{
    2efa:	df 93       	push	r29
    2efc:	cf 93       	push	r28
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <TIMER1_setCallBack+0x6>
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	9a 83       	std	Y+2, r25	; 0x02
    2f06:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr_timer1 = a_ptr1;
    2f08:	89 81       	ldd	r24, Y+1	; 0x01
    2f0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0c:	90 93 8b 01 	sts	0x018B, r25
    2f10:	80 93 8a 01 	sts	0x018A, r24
}
    2f14:	0f 90       	pop	r0
    2f16:	0f 90       	pop	r0
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <TIMER2_setCallBack>:
/* Function Name:TIMER2_setCallBack
 * Description:  Save the address of the Call back function in a global variable
 */
void TIMER2_setCallBack(void(*a_ptr2)(void))
{
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	00 d0       	rcall	.+0      	; 0x2f24 <TIMER2_setCallBack+0x6>
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
		g_callBackPtr_timer2 = a_ptr2;
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f30:	90 93 8d 01 	sts	0x018D, r25
    2f34:	80 93 8c 01 	sts	0x018C, r24
}
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <TIMER_deinit>:

/* Function Name:TIMER_deinit
 * Description:  closing the selected timer driver by clearing the clock
 * */
void TIMER_deinit(const Timer_ConfigType * Config_Ptr)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	00 d0       	rcall	.+0      	; 0x2f48 <TIMER_deinit+0x6>
    2f48:	cd b7       	in	r28, 0x3d	; 61
    2f4a:	de b7       	in	r29, 0x3e	; 62
    2f4c:	9a 83       	std	Y+2, r25	; 0x02
    2f4e:	89 83       	std	Y+1, r24	; 0x01
	if(Config_Ptr->timer_id==TIMER_0)
    2f50:	e9 81       	ldd	r30, Y+1	; 0x01
    2f52:	fa 81       	ldd	r31, Y+2	; 0x02
    2f54:	83 81       	ldd	r24, Z+3	; 0x03
    2f56:	88 23       	and	r24, r24
    2f58:	41 f4       	brne	.+16     	; 0x2f6a <TIMER_deinit+0x28>
	{/*closing timer0*/
		TCCR0 = (TCCR0 & 0xF8);
    2f5a:	a3 e5       	ldi	r26, 0x53	; 83
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e3 e5       	ldi	r30, 0x53	; 83
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	88 7f       	andi	r24, 0xF8	; 248
    2f66:	8c 93       	st	X, r24
    2f68:	19 c0       	rjmp	.+50     	; 0x2f9c <TIMER_deinit+0x5a>
	}
	else if(Config_Ptr->timer_id==TIMER_1)
    2f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6e:	83 81       	ldd	r24, Z+3	; 0x03
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	41 f4       	brne	.+16     	; 0x2f84 <TIMER_deinit+0x42>
	{/*closing timer1*/
		TCCR1B = (TCCR1B & 0xF8);
    2f74:	ae e4       	ldi	r26, 0x4E	; 78
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ee e4       	ldi	r30, 0x4E	; 78
    2f7a:	f0 e0       	ldi	r31, 0x00	; 0
    2f7c:	80 81       	ld	r24, Z
    2f7e:	88 7f       	andi	r24, 0xF8	; 248
    2f80:	8c 93       	st	X, r24
    2f82:	0c c0       	rjmp	.+24     	; 0x2f9c <TIMER_deinit+0x5a>
	}
	else if(Config_Ptr->timer_id==TIMER_2)
    2f84:	e9 81       	ldd	r30, Y+1	; 0x01
    2f86:	fa 81       	ldd	r31, Y+2	; 0x02
    2f88:	83 81       	ldd	r24, Z+3	; 0x03
    2f8a:	82 30       	cpi	r24, 0x02	; 2
    2f8c:	39 f4       	brne	.+14     	; 0x2f9c <TIMER_deinit+0x5a>
	{/*closing timer2*/
		TCCR2 = (TCCR2 & 0xF8);
    2f8e:	a5 e4       	ldi	r26, 0x45	; 69
    2f90:	b0 e0       	ldi	r27, 0x00	; 0
    2f92:	e5 e4       	ldi	r30, 0x45	; 69
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	80 81       	ld	r24, Z
    2f98:	88 7f       	andi	r24, 0xF8	; 248
    2f9a:	8c 93       	st	X, r24
	}
}
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	cf 91       	pop	r28
    2fa2:	df 91       	pop	r29
    2fa4:	08 95       	ret

00002fa6 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const Twi_ConfigType * Config_Ptr)
{
    2fa6:	df 93       	push	r29
    2fa8:	cf 93       	push	r28
    2faa:	00 d0       	rcall	.+0      	; 0x2fac <TWI_init+0x6>
    2fac:	cd b7       	in	r28, 0x3d	; 61
    2fae:	de b7       	in	r29, 0x3e	; 62
    2fb0:	9a 83       	std	Y+2, r25	; 0x02
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bitRate;
    2fb4:	a0 e2       	ldi	r26, 0x20	; 32
    2fb6:	b0 e0       	ldi	r27, 0x00	; 0
    2fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fba:	fa 81       	ldd	r31, Y+2	; 0x02
    2fbc:	80 81       	ld	r24, Z
    2fbe:	8c 93       	st	X, r24
	TWSR = (TWSR & 0xFC)|(Config_Ptr->prescaler);
    2fc0:	a1 e2       	ldi	r26, 0x21	; 33
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	e1 e2       	ldi	r30, 0x21	; 33
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 81       	ld	r24, Z
    2fca:	98 2f       	mov	r25, r24
    2fcc:	9c 7f       	andi	r25, 0xFC	; 252
    2fce:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd2:	81 81       	ldd	r24, Z+1	; 0x01
    2fd4:	89 2b       	or	r24, r25
    2fd6:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (TWAR & 0x01)|((Config_Ptr->slaveAddress)<<1); // my address = 0x01 :)
    2fd8:	a2 e2       	ldi	r26, 0x22	; 34
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e2 e2       	ldi	r30, 0x22	; 34
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	21 70       	andi	r18, 0x01	; 1
    2fe6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fea:	82 81       	ldd	r24, Z+2	; 0x02
    2fec:	88 2f       	mov	r24, r24
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	82 2b       	or	r24, r18
    2ff6:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2ff8:	e6 e5       	ldi	r30, 0x56	; 86
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	84 e0       	ldi	r24, 0x04	; 4
    2ffe:	80 83       	st	Z, r24
}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <TWI_start>:

void TWI_start(void)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    3012:	e6 e5       	ldi	r30, 0x56	; 86
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	84 ea       	ldi	r24, 0xA4	; 164
    3018:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    301a:	e6 e5       	ldi	r30, 0x56	; 86
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	80 81       	ld	r24, Z
    3020:	88 23       	and	r24, r24
    3022:	dc f7       	brge	.-10     	; 0x301a <TWI_start+0x10>
}
    3024:	cf 91       	pop	r28
    3026:	df 91       	pop	r29
    3028:	08 95       	ret

0000302a <TWI_stop>:

void TWI_stop(void)
{
    302a:	df 93       	push	r29
    302c:	cf 93       	push	r28
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3032:	e6 e5       	ldi	r30, 0x56	; 86
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	84 e9       	ldi	r24, 0x94	; 148
    3038:	80 83       	st	Z, r24
}
    303a:	cf 91       	pop	r28
    303c:	df 91       	pop	r29
    303e:	08 95       	ret

00003040 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	0f 92       	push	r0
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    304c:	e3 e2       	ldi	r30, 0x23	; 35
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	89 81       	ldd	r24, Y+1	; 0x01
    3052:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3054:	e6 e5       	ldi	r30, 0x56	; 86
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	84 e8       	ldi	r24, 0x84	; 132
    305a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    305c:	e6 e5       	ldi	r30, 0x56	; 86
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	88 23       	and	r24, r24
    3064:	dc f7       	brge	.-10     	; 0x305c <TWI_writeByte+0x1c>
}
    3066:	0f 90       	pop	r0
    3068:	cf 91       	pop	r28
    306a:	df 91       	pop	r29
    306c:	08 95       	ret

0000306e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    306e:	df 93       	push	r29
    3070:	cf 93       	push	r28
    3072:	cd b7       	in	r28, 0x3d	; 61
    3074:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3076:	e6 e5       	ldi	r30, 0x56	; 86
    3078:	f0 e0       	ldi	r31, 0x00	; 0
    307a:	84 ec       	ldi	r24, 0xC4	; 196
    307c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    307e:	e6 e5       	ldi	r30, 0x56	; 86
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	88 23       	and	r24, r24
    3086:	dc f7       	brge	.-10     	; 0x307e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3088:	e3 e2       	ldi	r30, 0x23	; 35
    308a:	f0 e0       	ldi	r31, 0x00	; 0
    308c:	80 81       	ld	r24, Z
}
    308e:	cf 91       	pop	r28
    3090:	df 91       	pop	r29
    3092:	08 95       	ret

00003094 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3094:	df 93       	push	r29
    3096:	cf 93       	push	r28
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    309c:	e6 e5       	ldi	r30, 0x56	; 86
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	84 e8       	ldi	r24, 0x84	; 132
    30a2:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    30a4:	e6 e5       	ldi	r30, 0x56	; 86
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	88 23       	and	r24, r24
    30ac:	dc f7       	brge	.-10     	; 0x30a4 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    30ae:	e3 e2       	ldi	r30, 0x23	; 35
    30b0:	f0 e0       	ldi	r31, 0x00	; 0
    30b2:	80 81       	ld	r24, Z
}
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	08 95       	ret

000030ba <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    30ba:	df 93       	push	r29
    30bc:	cf 93       	push	r28
    30be:	0f 92       	push	r0
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    30c4:	e1 e2       	ldi	r30, 0x21	; 33
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	80 81       	ld	r24, Z
    30ca:	88 7f       	andi	r24, 0xF8	; 248
    30cc:	89 83       	std	Y+1, r24	; 0x01
    return status;
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    30d0:	0f 90       	pop	r0
    30d2:	cf 91       	pop	r28
    30d4:	df 91       	pop	r29
    30d6:	08 95       	ret

000030d8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    30d8:	2f 92       	push	r2
    30da:	3f 92       	push	r3
    30dc:	4f 92       	push	r4
    30de:	5f 92       	push	r5
    30e0:	6f 92       	push	r6
    30e2:	7f 92       	push	r7
    30e4:	8f 92       	push	r8
    30e6:	9f 92       	push	r9
    30e8:	af 92       	push	r10
    30ea:	bf 92       	push	r11
    30ec:	cf 92       	push	r12
    30ee:	df 92       	push	r13
    30f0:	ef 92       	push	r14
    30f2:	ff 92       	push	r15
    30f4:	0f 93       	push	r16
    30f6:	1f 93       	push	r17
    30f8:	df 93       	push	r29
    30fa:	cf 93       	push	r28
    30fc:	00 d0       	rcall	.+0      	; 0x30fe <UART_init+0x26>
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <UART_init+0x28>
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
    3104:	9c 83       	std	Y+4, r25	; 0x04
    3106:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3108:	1a 82       	std	Y+2, r1	; 0x02
    310a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    310c:	eb e2       	ldi	r30, 0x2B	; 43
    310e:	f0 e0       	ldi	r31, 0x00	; 0
    3110:	82 e0       	ldi	r24, 0x02	; 2
    3112:	80 83       	st	Z, r24
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3114:	ea e2       	ldi	r30, 0x2A	; 42
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	88 e1       	ldi	r24, 0x18	; 24
    311a:	80 83       	st	Z, r24
	
	if(_9_BITS==(Config_Ptr->parityMode))
    311c:	eb 81       	ldd	r30, Y+3	; 0x03
    311e:	fc 81       	ldd	r31, Y+4	; 0x04
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	87 30       	cpi	r24, 0x07	; 7
    3124:	39 f4       	brne	.+14     	; 0x3134 <UART_init+0x5c>
	{/*RXB8 & TXB8  used for 9-bit data mode*/
		UCSRB |=(1<<RXB8) |(1<<TXB8);
    3126:	aa e2       	ldi	r26, 0x2A	; 42
    3128:	b0 e0       	ldi	r27, 0x00	; 0
    312a:	ea e2       	ldi	r30, 0x2A	; 42
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	80 81       	ld	r24, Z
    3130:	83 60       	ori	r24, 0x03	; 3
    3132:	8c 93       	st	X, r24
	 * UCPOL   = 0 Used with the Synchronous operation only
	 * inserting the parity mode bits in register UCSRC according to the dynamic configuration
	 * inserting the number of stop bits in register UCSRC according to the dynamic configuration
	 * inserting the character size bits in both registers UCSRC & UCSRB according to the dynamic configuration
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3134:	e0 e4       	ldi	r30, 0x40	; 64
    3136:	f0 e0       	ldi	r31, 0x00	; 0
    3138:	80 e8       	ldi	r24, 0x80	; 128
    313a:	80 83       	st	Z, r24
	UCSRC|=(UCSRC & 0xCF)|((Config_Ptr->parityMode)<<4);
    313c:	a0 e4       	ldi	r26, 0x40	; 64
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	e0 e4       	ldi	r30, 0x40	; 64
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	80 81       	ld	r24, Z
    3146:	38 2f       	mov	r19, r24
    3148:	e0 e4       	ldi	r30, 0x40	; 64
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	28 2f       	mov	r18, r24
    3150:	2f 7c       	andi	r18, 0xCF	; 207
    3152:	eb 81       	ldd	r30, Y+3	; 0x03
    3154:	fc 81       	ldd	r31, Y+4	; 0x04
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	88 2f       	mov	r24, r24
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	82 95       	swap	r24
    315e:	92 95       	swap	r25
    3160:	90 7f       	andi	r25, 0xF0	; 240
    3162:	98 27       	eor	r25, r24
    3164:	80 7f       	andi	r24, 0xF0	; 240
    3166:	98 27       	eor	r25, r24
    3168:	82 2b       	or	r24, r18
    316a:	83 2b       	or	r24, r19
    316c:	8c 93       	st	X, r24
	UCSRC|=(UCSRC & 0xF7)|((Config_Ptr->stopBit)<<3);
    316e:	a0 e4       	ldi	r26, 0x40	; 64
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e0 e4       	ldi	r30, 0x40	; 64
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	38 2f       	mov	r19, r24
    317a:	e0 e4       	ldi	r30, 0x40	; 64
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	28 2f       	mov	r18, r24
    3182:	27 7f       	andi	r18, 0xF7	; 247
    3184:	eb 81       	ldd	r30, Y+3	; 0x03
    3186:	fc 81       	ldd	r31, Y+4	; 0x04
    3188:	81 81       	ldd	r24, Z+1	; 0x01
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	88 0f       	add	r24, r24
    3194:	99 1f       	adc	r25, r25
    3196:	88 0f       	add	r24, r24
    3198:	99 1f       	adc	r25, r25
    319a:	82 2b       	or	r24, r18
    319c:	83 2b       	or	r24, r19
    319e:	8c 93       	st	X, r24
	UCSRC|=(UCSRC & 0xF9)|(((Config_Ptr->characterSize) & 0x03)<<1);
    31a0:	a0 e4       	ldi	r26, 0x40	; 64
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e0 e4       	ldi	r30, 0x40	; 64
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	38 2f       	mov	r19, r24
    31ac:	e0 e4       	ldi	r30, 0x40	; 64
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	80 81       	ld	r24, Z
    31b2:	28 2f       	mov	r18, r24
    31b4:	29 7f       	andi	r18, 0xF9	; 249
    31b6:	eb 81       	ldd	r30, Y+3	; 0x03
    31b8:	fc 81       	ldd	r31, Y+4	; 0x04
    31ba:	80 81       	ld	r24, Z
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	83 70       	andi	r24, 0x03	; 3
    31c2:	90 70       	andi	r25, 0x00	; 0
    31c4:	88 0f       	add	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	82 2b       	or	r24, r18
    31ca:	83 2b       	or	r24, r19
    31cc:	8c 93       	st	X, r24
	UCSRB|=(UCSRB & 0xFB)|(((Config_Ptr->characterSize) & 0x04)<<2);
    31ce:	aa e2       	ldi	r26, 0x2A	; 42
    31d0:	b0 e0       	ldi	r27, 0x00	; 0
    31d2:	ea e2       	ldi	r30, 0x2A	; 42
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	80 81       	ld	r24, Z
    31d8:	38 2f       	mov	r19, r24
    31da:	ea e2       	ldi	r30, 0x2A	; 42
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
    31e0:	28 2f       	mov	r18, r24
    31e2:	2b 7f       	andi	r18, 0xFB	; 251
    31e4:	eb 81       	ldd	r30, Y+3	; 0x03
    31e6:	fc 81       	ldd	r31, Y+4	; 0x04
    31e8:	80 81       	ld	r24, Z
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	84 70       	andi	r24, 0x04	; 4
    31f0:	90 70       	andi	r25, 0x00	; 0
    31f2:	88 0f       	add	r24, r24
    31f4:	99 1f       	adc	r25, r25
    31f6:	88 0f       	add	r24, r24
    31f8:	99 1f       	adc	r25, r25
    31fa:	82 2b       	or	r24, r18
    31fc:	83 2b       	or	r24, r19
    31fe:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baudRate * 8UL))) - 1);
    3200:	eb 81       	ldd	r30, Y+3	; 0x03
    3202:	fc 81       	ldd	r31, Y+4	; 0x04
    3204:	a3 80       	ldd	r10, Z+3	; 0x03
    3206:	b4 80       	ldd	r11, Z+4	; 0x04
    3208:	c5 80       	ldd	r12, Z+5	; 0x05
    320a:	d6 80       	ldd	r13, Z+6	; 0x06
    320c:	e7 80       	ldd	r14, Z+7	; 0x07
    320e:	f0 84       	ldd	r15, Z+8	; 0x08
    3210:	01 85       	ldd	r16, Z+9	; 0x09
    3212:	12 85       	ldd	r17, Z+10	; 0x0a
    3214:	2a 2d       	mov	r18, r10
    3216:	3b 2d       	mov	r19, r11
    3218:	4c 2d       	mov	r20, r12
    321a:	5d 2d       	mov	r21, r13
    321c:	6e 2d       	mov	r22, r14
    321e:	7f 2d       	mov	r23, r15
    3220:	80 2f       	mov	r24, r16
    3222:	91 2f       	mov	r25, r17
    3224:	03 e0       	ldi	r16, 0x03	; 3
    3226:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    322a:	a2 2e       	mov	r10, r18
    322c:	b3 2e       	mov	r11, r19
    322e:	c4 2e       	mov	r12, r20
    3230:	d5 2e       	mov	r13, r21
    3232:	e6 2e       	mov	r14, r22
    3234:	f7 2e       	mov	r15, r23
    3236:	08 2f       	mov	r16, r24
    3238:	19 2f       	mov	r17, r25
    323a:	2a 2c       	mov	r2, r10
    323c:	3b 2c       	mov	r3, r11
    323e:	4c 2c       	mov	r4, r12
    3240:	5d 2c       	mov	r5, r13
    3242:	6e 2c       	mov	r6, r14
    3244:	7f 2c       	mov	r7, r15
    3246:	80 2e       	mov	r8, r16
    3248:	91 2e       	mov	r9, r17
    324a:	20 e4       	ldi	r18, 0x40	; 64
    324c:	32 e4       	ldi	r19, 0x42	; 66
    324e:	4f e0       	ldi	r20, 0x0F	; 15
    3250:	50 e0       	ldi	r21, 0x00	; 0
    3252:	60 e0       	ldi	r22, 0x00	; 0
    3254:	70 e0       	ldi	r23, 0x00	; 0
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	a2 2c       	mov	r10, r2
    325c:	b3 2c       	mov	r11, r3
    325e:	c4 2c       	mov	r12, r4
    3260:	d5 2c       	mov	r13, r5
    3262:	e6 2c       	mov	r14, r6
    3264:	f7 2c       	mov	r15, r7
    3266:	08 2d       	mov	r16, r8
    3268:	19 2d       	mov	r17, r9
    326a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    326e:	a2 2e       	mov	r10, r18
    3270:	b3 2e       	mov	r11, r19
    3272:	c4 2e       	mov	r12, r20
    3274:	d5 2e       	mov	r13, r21
    3276:	e6 2e       	mov	r14, r22
    3278:	f7 2e       	mov	r15, r23
    327a:	08 2f       	mov	r16, r24
    327c:	19 2f       	mov	r17, r25
    327e:	2a 2d       	mov	r18, r10
    3280:	3b 2d       	mov	r19, r11
    3282:	4c 2d       	mov	r20, r12
    3284:	5d 2d       	mov	r21, r13
    3286:	6e 2d       	mov	r22, r14
    3288:	7f 2d       	mov	r23, r15
    328a:	80 2f       	mov	r24, r16
    328c:	91 2f       	mov	r25, r17
    328e:	c9 01       	movw	r24, r18
    3290:	01 97       	sbiw	r24, 0x01	; 1
    3292:	9a 83       	std	Y+2, r25	; 0x02
    3294:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3296:	e0 e4       	ldi	r30, 0x40	; 64
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	89 81       	ldd	r24, Y+1	; 0x01
    329c:	9a 81       	ldd	r25, Y+2	; 0x02
    329e:	89 2f       	mov	r24, r25
    32a0:	99 27       	eor	r25, r25
    32a2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    32a4:	e9 e2       	ldi	r30, 0x29	; 41
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	80 83       	st	Z, r24
}
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	df 90       	pop	r13
    32c2:	cf 90       	pop	r12
    32c4:	bf 90       	pop	r11
    32c6:	af 90       	pop	r10
    32c8:	9f 90       	pop	r9
    32ca:	8f 90       	pop	r8
    32cc:	7f 90       	pop	r7
    32ce:	6f 90       	pop	r6
    32d0:	5f 90       	pop	r5
    32d2:	4f 90       	pop	r4
    32d4:	3f 90       	pop	r3
    32d6:	2f 90       	pop	r2
    32d8:	08 95       	ret

000032da <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	0f 92       	push	r0
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    32e6:	eb e2       	ldi	r30, 0x2B	; 43
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	88 2f       	mov	r24, r24
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	80 72       	andi	r24, 0x20	; 32
    32f2:	90 70       	andi	r25, 0x00	; 0
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	b9 f3       	breq	.-18     	; 0x32e6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    32f8:	ec e2       	ldi	r30, 0x2C	; 44
    32fa:	f0 e0       	ldi	r31, 0x00	; 0
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3300:	0f 90       	pop	r0
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3310:	eb e2       	ldi	r30, 0x2B	; 43
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	88 23       	and	r24, r24
    3318:	dc f7       	brge	.-10     	; 0x3310 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    331a:	ec e2       	ldi	r30, 0x2C	; 44
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
}
    3320:	cf 91       	pop	r28
    3322:	df 91       	pop	r29
    3324:	08 95       	ret

00003326 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3326:	df 93       	push	r29
    3328:	cf 93       	push	r28
    332a:	00 d0       	rcall	.+0      	; 0x332c <UART_sendString+0x6>
    332c:	0f 92       	push	r0
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	9b 83       	std	Y+3, r25	; 0x03
    3334:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3336:	19 82       	std	Y+1, r1	; 0x01
    3338:	0e c0       	rjmp	.+28     	; 0x3356 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	28 2f       	mov	r18, r24
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	9b 81       	ldd	r25, Y+3	; 0x03
    3344:	fc 01       	movw	r30, r24
    3346:	e2 0f       	add	r30, r18
    3348:	f3 1f       	adc	r31, r19
    334a:	80 81       	ld	r24, Z
    334c:	0e 94 6d 19 	call	0x32da	; 0x32da <UART_sendByte>
		i++;
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	8f 5f       	subi	r24, 0xFF	; 255
    3354:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	28 2f       	mov	r18, r24
    335a:	30 e0       	ldi	r19, 0x00	; 0
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	fc 01       	movw	r30, r24
    3362:	e2 0f       	add	r30, r18
    3364:	f3 1f       	adc	r31, r19
    3366:	80 81       	ld	r24, Z
    3368:	88 23       	and	r24, r24
    336a:	39 f7       	brne	.-50     	; 0x333a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	cf 91       	pop	r28
    3374:	df 91       	pop	r29
    3376:	08 95       	ret

00003378 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3378:	0f 93       	push	r16
    337a:	1f 93       	push	r17
    337c:	df 93       	push	r29
    337e:	cf 93       	push	r28
    3380:	00 d0       	rcall	.+0      	; 0x3382 <UART_receiveString+0xa>
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	9b 83       	std	Y+3, r25	; 0x03
    338a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    338c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	28 2f       	mov	r18, r24
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	8a 81       	ldd	r24, Y+2	; 0x02
    3396:	9b 81       	ldd	r25, Y+3	; 0x03
    3398:	8c 01       	movw	r16, r24
    339a:	02 0f       	add	r16, r18
    339c:	13 1f       	adc	r17, r19
    339e:	0e 94 84 19 	call	0x3308	; 0x3308 <UART_recieveByte>
    33a2:	f8 01       	movw	r30, r16
    33a4:	80 83       	st	Z, r24
    33a6:	0f c0       	rjmp	.+30     	; 0x33c6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
	{
		i++;
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	8f 5f       	subi	r24, 0xFF	; 255
    33ac:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    33ae:	89 81       	ldd	r24, Y+1	; 0x01
    33b0:	28 2f       	mov	r18, r24
    33b2:	30 e0       	ldi	r19, 0x00	; 0
    33b4:	8a 81       	ldd	r24, Y+2	; 0x02
    33b6:	9b 81       	ldd	r25, Y+3	; 0x03
    33b8:	8c 01       	movw	r16, r24
    33ba:	02 0f       	add	r16, r18
    33bc:	13 1f       	adc	r17, r19
    33be:	0e 94 84 19 	call	0x3308	; 0x3308 <UART_recieveByte>
    33c2:	f8 01       	movw	r30, r16
    33c4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != 13)
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	28 2f       	mov	r18, r24
    33ca:	30 e0       	ldi	r19, 0x00	; 0
    33cc:	8a 81       	ldd	r24, Y+2	; 0x02
    33ce:	9b 81       	ldd	r25, Y+3	; 0x03
    33d0:	fc 01       	movw	r30, r24
    33d2:	e2 0f       	add	r30, r18
    33d4:	f3 1f       	adc	r31, r19
    33d6:	80 81       	ld	r24, Z
    33d8:	8d 30       	cpi	r24, 0x0D	; 13
    33da:	31 f7       	brne	.-52     	; 0x33a8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    33dc:	89 81       	ldd	r24, Y+1	; 0x01
    33de:	28 2f       	mov	r18, r24
    33e0:	30 e0       	ldi	r19, 0x00	; 0
    33e2:	8a 81       	ldd	r24, Y+2	; 0x02
    33e4:	9b 81       	ldd	r25, Y+3	; 0x03
    33e6:	fc 01       	movw	r30, r24
    33e8:	e2 0f       	add	r30, r18
    33ea:	f3 1f       	adc	r31, r19
    33ec:	10 82       	st	Z, r1
}
    33ee:	0f 90       	pop	r0
    33f0:	0f 90       	pop	r0
    33f2:	0f 90       	pop	r0
    33f4:	cf 91       	pop	r28
    33f6:	df 91       	pop	r29
    33f8:	1f 91       	pop	r17
    33fa:	0f 91       	pop	r16
    33fc:	08 95       	ret

000033fe <__mulsi3>:
    33fe:	62 9f       	mul	r22, r18
    3400:	d0 01       	movw	r26, r0
    3402:	73 9f       	mul	r23, r19
    3404:	f0 01       	movw	r30, r0
    3406:	82 9f       	mul	r24, r18
    3408:	e0 0d       	add	r30, r0
    340a:	f1 1d       	adc	r31, r1
    340c:	64 9f       	mul	r22, r20
    340e:	e0 0d       	add	r30, r0
    3410:	f1 1d       	adc	r31, r1
    3412:	92 9f       	mul	r25, r18
    3414:	f0 0d       	add	r31, r0
    3416:	83 9f       	mul	r24, r19
    3418:	f0 0d       	add	r31, r0
    341a:	74 9f       	mul	r23, r20
    341c:	f0 0d       	add	r31, r0
    341e:	65 9f       	mul	r22, r21
    3420:	f0 0d       	add	r31, r0
    3422:	99 27       	eor	r25, r25
    3424:	72 9f       	mul	r23, r18
    3426:	b0 0d       	add	r27, r0
    3428:	e1 1d       	adc	r30, r1
    342a:	f9 1f       	adc	r31, r25
    342c:	63 9f       	mul	r22, r19
    342e:	b0 0d       	add	r27, r0
    3430:	e1 1d       	adc	r30, r1
    3432:	f9 1f       	adc	r31, r25
    3434:	bd 01       	movw	r22, r26
    3436:	cf 01       	movw	r24, r30
    3438:	11 24       	eor	r1, r1
    343a:	08 95       	ret

0000343c <__udivmodsi4>:
    343c:	a1 e2       	ldi	r26, 0x21	; 33
    343e:	1a 2e       	mov	r1, r26
    3440:	aa 1b       	sub	r26, r26
    3442:	bb 1b       	sub	r27, r27
    3444:	fd 01       	movw	r30, r26
    3446:	0d c0       	rjmp	.+26     	; 0x3462 <__udivmodsi4_ep>

00003448 <__udivmodsi4_loop>:
    3448:	aa 1f       	adc	r26, r26
    344a:	bb 1f       	adc	r27, r27
    344c:	ee 1f       	adc	r30, r30
    344e:	ff 1f       	adc	r31, r31
    3450:	a2 17       	cp	r26, r18
    3452:	b3 07       	cpc	r27, r19
    3454:	e4 07       	cpc	r30, r20
    3456:	f5 07       	cpc	r31, r21
    3458:	20 f0       	brcs	.+8      	; 0x3462 <__udivmodsi4_ep>
    345a:	a2 1b       	sub	r26, r18
    345c:	b3 0b       	sbc	r27, r19
    345e:	e4 0b       	sbc	r30, r20
    3460:	f5 0b       	sbc	r31, r21

00003462 <__udivmodsi4_ep>:
    3462:	66 1f       	adc	r22, r22
    3464:	77 1f       	adc	r23, r23
    3466:	88 1f       	adc	r24, r24
    3468:	99 1f       	adc	r25, r25
    346a:	1a 94       	dec	r1
    346c:	69 f7       	brne	.-38     	; 0x3448 <__udivmodsi4_loop>
    346e:	60 95       	com	r22
    3470:	70 95       	com	r23
    3472:	80 95       	com	r24
    3474:	90 95       	com	r25
    3476:	9b 01       	movw	r18, r22
    3478:	ac 01       	movw	r20, r24
    347a:	bd 01       	movw	r22, r26
    347c:	cf 01       	movw	r24, r30
    347e:	08 95       	ret

00003480 <__prologue_saves__>:
    3480:	2f 92       	push	r2
    3482:	3f 92       	push	r3
    3484:	4f 92       	push	r4
    3486:	5f 92       	push	r5
    3488:	6f 92       	push	r6
    348a:	7f 92       	push	r7
    348c:	8f 92       	push	r8
    348e:	9f 92       	push	r9
    3490:	af 92       	push	r10
    3492:	bf 92       	push	r11
    3494:	cf 92       	push	r12
    3496:	df 92       	push	r13
    3498:	ef 92       	push	r14
    349a:	ff 92       	push	r15
    349c:	0f 93       	push	r16
    349e:	1f 93       	push	r17
    34a0:	cf 93       	push	r28
    34a2:	df 93       	push	r29
    34a4:	cd b7       	in	r28, 0x3d	; 61
    34a6:	de b7       	in	r29, 0x3e	; 62
    34a8:	ca 1b       	sub	r28, r26
    34aa:	db 0b       	sbc	r29, r27
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	09 94       	ijmp

000034b8 <__epilogue_restores__>:
    34b8:	2a 88       	ldd	r2, Y+18	; 0x12
    34ba:	39 88       	ldd	r3, Y+17	; 0x11
    34bc:	48 88       	ldd	r4, Y+16	; 0x10
    34be:	5f 84       	ldd	r5, Y+15	; 0x0f
    34c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    34c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    34c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    34c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    34c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    34ca:	b9 84       	ldd	r11, Y+9	; 0x09
    34cc:	c8 84       	ldd	r12, Y+8	; 0x08
    34ce:	df 80       	ldd	r13, Y+7	; 0x07
    34d0:	ee 80       	ldd	r14, Y+6	; 0x06
    34d2:	fd 80       	ldd	r15, Y+5	; 0x05
    34d4:	0c 81       	ldd	r16, Y+4	; 0x04
    34d6:	1b 81       	ldd	r17, Y+3	; 0x03
    34d8:	aa 81       	ldd	r26, Y+2	; 0x02
    34da:	b9 81       	ldd	r27, Y+1	; 0x01
    34dc:	ce 0f       	add	r28, r30
    34de:	d1 1d       	adc	r29, r1
    34e0:	0f b6       	in	r0, 0x3f	; 63
    34e2:	f8 94       	cli
    34e4:	de bf       	out	0x3e, r29	; 62
    34e6:	0f be       	out	0x3f, r0	; 63
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	ed 01       	movw	r28, r26
    34ec:	08 95       	ret

000034ee <_exit>:
    34ee:	f8 94       	cli

000034f0 <__stop_program>:
    34f0:	ff cf       	rjmp	.-2      	; 0x34f0 <__stop_program>
